!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ASTNODEUTIL_H_	include/ASTNodeUtil.h	31;"	d
ASTNode	include/ASTNode.h	/^struct ASTNode$/;"	s
ASTNode	include/ASTNode.h	/^typedef struct ASTNode ASTNode;$/;"	t	typeref:struct:ASTNode
ASTNodeKind	include/ASTNode.h	/^enum ASTNodeKind {$/;"	g
ASTNodeKindNames	mutation/ASTNode.c	/^gchar * ASTNodeKindNames[1024] ;$/;"	v
ASTNodeKindNames_init	mutation/ASTNode.c	/^void ASTNodeKindNames_init()$/;"	f
ASTNodeTraverseFunc	include/ASTNode.h	/^typedef gboolean (*ASTNodeTraverseFunc) (ASTNode * node, gpointer data);$/;"	t
ASTNodeType	include/ASTNode.h	/^struct ASTNodeType$/;"	s
ASTNodeType	include/ASTNode.h	/^typedef struct ASTNodeType ASTNodeType;$/;"	t	typeref:struct:ASTNodeType
ASTNodeTypeKind	include/ASTNode.h	/^enum ASTNodeTypeKind {$/;"	g
ASTNodeTypeKindNames	mutation/ASTNode.c	/^gchar * ASTNodeTypeKindNames[1024] ;$/;"	v
ASTNodeTypeKindNames_init	mutation/ASTNode.c	/^void ASTNodeTypeKindNames_init()$/;"	f
ASTNodeType_free	mutation/ASTNode.c	/^void ASTNodeType_free(ASTNodeType * type)$/;"	f
ASTNodeType_new	mutation/ASTNode.c	/^ASTNodeType * ASTNodeType_new(NodeTypeKind kind, ASTNode * node)$/;"	f
ASTNodeType_restore_original_kind	mutation/ASTNode.c	/^void ASTNodeType_restore_original_kind(ASTNode * node)$/;"	f
ASTNodeType_restore_original_text	mutation/ASTNode.c	/^void ASTNodeType_restore_original_text(ASTNode * node)$/;"	f
ASTNodeType_save_original_kind	mutation/ASTNode.c	/^void ASTNodeType_save_original_kind(ASTNode * node)$/;"	f
ASTNodeType_save_original_text	mutation/ASTNode.c	/^void ASTNodeType_save_original_text(ASTNode * node)$/;"	f
ASTNodeType_set_text	mutation/ASTNode.c	/^void ASTNodeType_set_text(ASTNode * node, gchar * text)$/;"	f
ASTNode_ID	mutation/ASTNode.c	/^static gsize ASTNode_ID = 1;$/;"	v	file:
ASTNode_add_type	mutation/ASTNode.c	/^void ASTNode_add_type(ASTNode * node, NodeTypeKind kind, ASTNode * link_node)$/;"	f
ASTNode_append_child	mutation/ASTNode.c	/^void ASTNode_append_child(ASTNode * node, ASTNode * child)$/;"	f
ASTNode_check_ext_3	mutation/ASTNode.c	/^gboolean ASTNode_check_ext_3(ASTNode * node)$/;"	f
ASTNode_check_type_kind	mutation/ASTNode.c	/^gboolean ASTNode_check_type_kind(ASTNode * node, NodeTypeKind kind)$/;"	f
ASTNode_clean_link	mutation/ASTNode.c	/^void ASTNode_clean_link(ASTNode * node)$/;"	f
ASTNode_clean_replace_ori_links	mutation/ASTNode.c	/^void ASTNode_clean_replace_ori_links(ASTNode * nodeA , ASTNode * nodeB, ASTNode * ori_parent, ASTNode * ori_next, ASTNode * ori_prev)$/;"	f
ASTNode_free	mutation/ASTNode.c	/^void ASTNode_free(ASTNode * node)$/;"	f
ASTNode_free_	mutation/ASTNode.c	/^static void ASTNode_free_(ASTNode *node, gpointer data)$/;"	f	file:
ASTNode_get_children_number	mutation/ASTNodeUtil.c	/^guint ASTNode_get_children_number(const ASTNode * parent)$/;"	f
ASTNode_get_func	mutation/ASTNode.c	/^gchar * ASTNode_get_func(ASTNode * node)$/;"	f
ASTNode_get_linkage	mutation/ASTNode.c	/^NodeLinkageKind ASTNode_get_linkage(ASTNode * node)$/;"	f
ASTNode_get_nth_child	mutation/ASTNodeUtil.c	/^ASTNode * ASTNode_get_nth_child(const ASTNode * parent, guint n)$/;"	f
ASTNode_get_root	mutation/ASTNode.c	/^ASTNode * ASTNode_get_root(ASTNode * node)$/;"	f
ASTNode_init	mutation/ASTNode.c	/^void ASTNode_init()$/;"	f
ASTNode_insert_before	mutation/ASTNode.c	/^void ASTNode_insert_before(ASTNode * curr_node, ASTNode * new_node)$/;"	f
ASTNode_is_const	mutation/ASTNode.c	/^gboolean ASTNode_is_const(ASTNode * node)$/;"	f
ASTNode_is_first_child	mutation/ASTNodeUtil.c	/^gboolean ASTNode_is_first_child(const ASTNode * parent, const ASTNode * node)$/;"	f
ASTNode_is_last_child	mutation/ASTNodeUtil.c	/^gboolean ASTNode_is_last_child(const ASTNode * parent, const ASTNode * node)$/;"	f
ASTNode_is_static	mutation/ASTNode.c	/^gboolean ASTNode_is_static(ASTNode * node)$/;"	f
ASTNode_new	mutation/ASTNode.c	/^ASTNode * ASTNode_new(NodeKind kind, gchar * text, gpointer cx)$/;"	f
ASTNode_new_alloca_substitution_for_calloc	mutation/ASTNodeUtil.c	/^ASTNode * ASTNode_new_alloca_substitution_for_calloc(ASTNode* left, ASTNode* right)$/;"	f
ASTNode_new_bop_node	mutation/ASTNodeUtil.c	/^ASTNode * ASTNode_new_bop_node(gchar * text,  ASTNode * lop, ASTNode * rop)$/;"	f
ASTNode_new_comp_stmt_node	mutation/ASTNodeUtil.c	/^ASTNode * ASTNode_new_comp_stmt_node()$/;"	f
ASTNode_new_empty_function_node	mutation/ASTNodeUtil.c	/^ASTNode * ASTNode_new_empty_function_node(gchar * func_name, ASTNode * params )$/;"	f
ASTNode_new_if_node	mutation/ASTNodeUtil.c	/^ASTNode * ASTNode_new_if_node(ASTNode * expr, ASTNode * comp)$/;"	f
ASTNode_new_integer_literal_node	mutation/ASTNodeUtil.c	/^ASTNode * ASTNode_new_integer_literal_node(gchar * value)$/;"	f
ASTNode_new_malloc_substitution_for_calloc	mutation/ASTNodeUtil.c	/^ASTNode * ASTNode_new_malloc_substitution_for_calloc(ASTNode* left, ASTNode* right)$/;"	f
ASTNode_new_milu_src_node	mutation/ASTNodeUtil.c	/^ASTNode * ASTNode_new_milu_src_node(gchar * text)$/;"	f
ASTNode_new_null_pointer_node	mutation/ASTNodeUtil.c	/^ASTNode * ASTNode_new_null_pointer_node()$/;"	f
ASTNode_new_paren_node	mutation/ASTNodeUtil.c	/^ASTNode * ASTNode_new_paren_node(ASTNode * node)$/;"	f
ASTNode_new_parm_decl_node	mutation/ASTNodeUtil.c	/^ASTNode * ASTNode_new_parm_decl_node(gchar * name, NodeTypeKind * type)$/;"	f
ASTNode_new_uop_node	mutation/ASTNodeUtil.c	/^ASTNode * ASTNode_new_uop_node(gchar * text, ASTNode * sub_node)$/;"	f
ASTNode_new_with_parent	mutation/ASTNode.c	/^ASTNode * ASTNode_new_with_parent(ASTNode * parent, NodeKind kind, gchar * text, gpointer cx)$/;"	f
ASTNode_print_dot	mutation/ASTPrinter.c	/^void ASTNode_print_dot(ASTNode * node, FILE * output)$/;"	f
ASTNode_print_html	mutation/ASTPrinter.c	/^void ASTNode_print_html(ASTNode* parent, FILE * output)$/;"	f
ASTNode_print_source	mutation/ASTPrinter.c	/^void ASTNode_print_source(ASTNode* parent, FILE * output)$/;"	f
ASTNode_replace	mutation/ASTNode.c	/^ void ASTNode_replace(ASTNode * nodeA , ASTNode * nodeB)$/;"	f
ASTNode_replace_with_ori_links	mutation/ASTNode.c	/^void ASTNode_replace_with_ori_links(ASTNode * nodeA , ASTNode * nodeB, ASTNode * ori_parent, ASTNode * ori_next, ASTNode * ori_prev)$/;"	f
ASTNode_restore_free_statement	mutation/ASTNodeUtil.c	/^gboolean ASTNode_restore_free_statement(ASTNode* node, ASTNode* children)$/;"	f
ASTNode_search_children	mutation/ASTNode.c	/^gboolean ASTNode_search_children (ASTNode * node, NodeKind kind)$/;"	f
ASTNode_search_children_type	mutation/ASTNode.c	/^gboolean ASTNode_search_children_type (ASTNode * node, NodeTypeKind kind)$/;"	f
ASTNode_search_for_parent_node_with_parent	mutation/ASTNode.c	/^ASTNode * ASTNode_search_for_parent_node_with_parent(ASTNode * node, NodeKind kind)$/;"	f
ASTNode_search_node_by_cx	mutation/ASTNode.c	/^ASTNode * ASTNode_search_node_by_cx(ASTNode * parent, gpointer cx)$/;"	f
ASTNode_search_parents	mutation/ASTNode.c	/^ASTNode * ASTNode_search_parents(ASTNode * node, NodeKind kind)$/;"	f
ASTNode_sementic_analyse	mutation/ASTSementic.c	/^void ASTNode_sementic_analyse(ASTNode * root)$/;"	f
ASTNode_set_const	mutation/ASTNode.c	/^void ASTNode_set_const(ASTNode * node)$/;"	f
ASTNode_set_ext_3	mutation/ASTNode.c	/^void ASTNode_set_ext_3(ASTNode * node, gint ext)$/;"	f
ASTNode_set_linkage	mutation/ASTNode.c	/^void ASTNode_set_linkage(ASTNode * node, NodeLinkageKind linkage)$/;"	f
ASTNode_set_null_statement	mutation/ASTNodeUtil.c	/^gboolean ASTNode_set_null_statement(ASTNode* node)$/;"	f
ASTNode_set_static	mutation/ASTNode.c	/^void ASTNode_set_static(ASTNode * node)$/;"	f
ASTNode_set_text	mutation/ASTNode.c	/^void ASTNode_set_text(ASTNode * node, gchar * text)$/;"	f
ASTNode_shallow_copy	mutation/ASTNode.c	/^ASTNode * ASTNode_shallow_copy(ASTNode * node, gboolean copy_child)$/;"	f
ASTNode_swap_nodes	mutation/ASTNode.c	/^void ASTNode_swap_nodes(ASTNode * nodeA , ASTNode * nodeB)$/;"	f
ASTNode_unlink	mutation/ASTNode.c	/^void ASTNode_unlink (ASTNode * pnode)$/;"	f
ASTPRINTER_H_	include/ASTPrinter.h	31;"	d
ASTSEMETIC_H_	include/ASTSementic.h	31;"	d
ASTUNIT_H_	include/ASTUnit.h	31;"	d
ASTUnit	include/ASTUnit.h	/^typedef struct MiluASTUnit ASTUnit;$/;"	t	typeref:struct:MiluASTUnit
ASTUnit_free	mutation/ASTUnit.c	/^void ASTUnit_free(ASTUnit * au)$/;"	f
ASTUnit_get_current	mutation/ASTUnit.c	/^ASTUnit * ASTUnit_get_current()$/;"	f
ASTUnit_get_current_func_list	mutation/ASTUnit.c	/^GPtrArray * ASTUnit_get_current_func_list()$/;"	f
ASTUnit_get_file_name	mutation/ASTUnit.c	/^gchar * ASTUnit_get_file_name(ASTUnit * au)$/;"	f
ASTUnit_new	mutation/ASTUnit.c	/^ASTUnit * ASTUnit_new(const gchar * src_path)$/;"	f
ASTUnit_print	mutation/ASTUnit.c	/^void ASTUnit_print(ASTUnit * au, PrintMode mode, FILE * output)$/;"	f
AST_H_	include/AST.h	9;"	d
CINDEX_DEPRECATED	include/clang-c/Index.h	39;"	d
CINDEX_DEPRECATED	include/clang-c/Index.h	42;"	d
CINDEX_DEPRECATED	include/clang-c/Index.h	44;"	d
CINDEX_LINKAGE	include/clang-c/Index.h	30;"	d
CINDEX_LINKAGE	include/clang-c/Index.h	32;"	d
CINDEX_LINKAGE	include/clang-c/Index.h	35;"	d
CLANG_C_INDEX_H	include/clang-c/Index.h	17;"	d
CURR_SAVING_MUT	mutation/MutantSet.c	/^gint CURR_SAVING_MUT = 0;$/;"	v
CXAvailabilityKind	include/clang-c/Index.h	/^enum CXAvailabilityKind {$/;"	g
CXAvailability_Available	include/clang-c/Index.h	/^  CXAvailability_Available,$/;"	e	enum:CXAvailabilityKind
CXAvailability_Deprecated	include/clang-c/Index.h	/^  CXAvailability_Deprecated,$/;"	e	enum:CXAvailabilityKind
CXAvailability_NotAccessible	include/clang-c/Index.h	/^  CXAvailability_NotAccessible$/;"	e	enum:CXAvailabilityKind
CXAvailability_NotAvailable	include/clang-c/Index.h	/^  CXAvailability_NotAvailable,$/;"	e	enum:CXAvailabilityKind
CXCallingConv	include/clang-c/Index.h	/^enum CXCallingConv {$/;"	g
CXCallingConv_AAPCS	include/clang-c/Index.h	/^  CXCallingConv_AAPCS = 6,$/;"	e	enum:CXCallingConv
CXCallingConv_AAPCS_VFP	include/clang-c/Index.h	/^  CXCallingConv_AAPCS_VFP = 7,$/;"	e	enum:CXCallingConv
CXCallingConv_C	include/clang-c/Index.h	/^  CXCallingConv_C = 1,$/;"	e	enum:CXCallingConv
CXCallingConv_Default	include/clang-c/Index.h	/^  CXCallingConv_Default = 0,$/;"	e	enum:CXCallingConv
CXCallingConv_Invalid	include/clang-c/Index.h	/^  CXCallingConv_Invalid = 100,$/;"	e	enum:CXCallingConv
CXCallingConv_Unexposed	include/clang-c/Index.h	/^  CXCallingConv_Unexposed = 200$/;"	e	enum:CXCallingConv
CXCallingConv_X86FastCall	include/clang-c/Index.h	/^  CXCallingConv_X86FastCall = 3,$/;"	e	enum:CXCallingConv
CXCallingConv_X86Pascal	include/clang-c/Index.h	/^  CXCallingConv_X86Pascal = 5,$/;"	e	enum:CXCallingConv
CXCallingConv_X86StdCall	include/clang-c/Index.h	/^  CXCallingConv_X86StdCall = 2,$/;"	e	enum:CXCallingConv
CXCallingConv_X86ThisCall	include/clang-c/Index.h	/^  CXCallingConv_X86ThisCall = 4,$/;"	e	enum:CXCallingConv
CXChildVisitResult	include/clang-c/Index.h	/^enum CXChildVisitResult {$/;"	g
CXChildVisit_Break	include/clang-c/Index.h	/^  CXChildVisit_Break,$/;"	e	enum:CXChildVisitResult
CXChildVisit_Continue	include/clang-c/Index.h	/^  CXChildVisit_Continue,$/;"	e	enum:CXChildVisitResult
CXChildVisit_Recurse	include/clang-c/Index.h	/^  CXChildVisit_Recurse$/;"	e	enum:CXChildVisitResult
CXClientData	include/clang-c/Index.h	/^typedef void *CXClientData;$/;"	t
CXCodeCompleteResults	include/clang-c/Index.h	/^} CXCodeCompleteResults;$/;"	t	typeref:struct:__anon9
CXCodeComplete_Flags	include/clang-c/Index.h	/^enum CXCodeComplete_Flags {$/;"	g
CXCodeComplete_IncludeCodePatterns	include/clang-c/Index.h	/^  CXCodeComplete_IncludeCodePatterns = 0x02$/;"	e	enum:CXCodeComplete_Flags
CXCodeComplete_IncludeMacros	include/clang-c/Index.h	/^  CXCodeComplete_IncludeMacros = 0x01,$/;"	e	enum:CXCodeComplete_Flags
CXCompletionChunkKind	include/clang-c/Index.h	/^enum CXCompletionChunkKind {$/;"	g
CXCompletionChunk_Colon	include/clang-c/Index.h	/^  CXCompletionChunk_Colon,$/;"	e	enum:CXCompletionChunkKind
CXCompletionChunk_Comma	include/clang-c/Index.h	/^  CXCompletionChunk_Comma,$/;"	e	enum:CXCompletionChunkKind
CXCompletionChunk_CurrentParameter	include/clang-c/Index.h	/^  CXCompletionChunk_CurrentParameter,$/;"	e	enum:CXCompletionChunkKind
CXCompletionChunk_Equal	include/clang-c/Index.h	/^  CXCompletionChunk_Equal,$/;"	e	enum:CXCompletionChunkKind
CXCompletionChunk_HorizontalSpace	include/clang-c/Index.h	/^  CXCompletionChunk_HorizontalSpace,$/;"	e	enum:CXCompletionChunkKind
CXCompletionChunk_Informative	include/clang-c/Index.h	/^  CXCompletionChunk_Informative,$/;"	e	enum:CXCompletionChunkKind
CXCompletionChunk_LeftAngle	include/clang-c/Index.h	/^  CXCompletionChunk_LeftAngle,$/;"	e	enum:CXCompletionChunkKind
CXCompletionChunk_LeftBrace	include/clang-c/Index.h	/^  CXCompletionChunk_LeftBrace,$/;"	e	enum:CXCompletionChunkKind
CXCompletionChunk_LeftBracket	include/clang-c/Index.h	/^  CXCompletionChunk_LeftBracket,$/;"	e	enum:CXCompletionChunkKind
CXCompletionChunk_LeftParen	include/clang-c/Index.h	/^  CXCompletionChunk_LeftParen,$/;"	e	enum:CXCompletionChunkKind
CXCompletionChunk_Optional	include/clang-c/Index.h	/^  CXCompletionChunk_Optional,$/;"	e	enum:CXCompletionChunkKind
CXCompletionChunk_Placeholder	include/clang-c/Index.h	/^  CXCompletionChunk_Placeholder,$/;"	e	enum:CXCompletionChunkKind
CXCompletionChunk_ResultType	include/clang-c/Index.h	/^  CXCompletionChunk_ResultType,$/;"	e	enum:CXCompletionChunkKind
CXCompletionChunk_RightAngle	include/clang-c/Index.h	/^  CXCompletionChunk_RightAngle,$/;"	e	enum:CXCompletionChunkKind
CXCompletionChunk_RightBrace	include/clang-c/Index.h	/^  CXCompletionChunk_RightBrace,$/;"	e	enum:CXCompletionChunkKind
CXCompletionChunk_RightBracket	include/clang-c/Index.h	/^  CXCompletionChunk_RightBracket,$/;"	e	enum:CXCompletionChunkKind
CXCompletionChunk_RightParen	include/clang-c/Index.h	/^  CXCompletionChunk_RightParen,$/;"	e	enum:CXCompletionChunkKind
CXCompletionChunk_SemiColon	include/clang-c/Index.h	/^  CXCompletionChunk_SemiColon,$/;"	e	enum:CXCompletionChunkKind
CXCompletionChunk_Text	include/clang-c/Index.h	/^  CXCompletionChunk_Text,$/;"	e	enum:CXCompletionChunkKind
CXCompletionChunk_TypedText	include/clang-c/Index.h	/^  CXCompletionChunk_TypedText,$/;"	e	enum:CXCompletionChunkKind
CXCompletionChunk_VerticalSpace	include/clang-c/Index.h	/^  CXCompletionChunk_VerticalSpace$/;"	e	enum:CXCompletionChunkKind
CXCompletionContext	include/clang-c/Index.h	/^enum CXCompletionContext {$/;"	g
CXCompletionContext_AnyType	include/clang-c/Index.h	/^  CXCompletionContext_AnyType = 1 << 0,$/;"	e	enum:CXCompletionContext
CXCompletionContext_AnyValue	include/clang-c/Index.h	/^  CXCompletionContext_AnyValue = 1 << 1,$/;"	e	enum:CXCompletionContext
CXCompletionContext_ArrowMemberAccess	include/clang-c/Index.h	/^  CXCompletionContext_ArrowMemberAccess = 1 << 6,$/;"	e	enum:CXCompletionContext
CXCompletionContext_CXXClassTypeValue	include/clang-c/Index.h	/^  CXCompletionContext_CXXClassTypeValue = 1 << 4,$/;"	e	enum:CXCompletionContext
CXCompletionContext_ClassTag	include/clang-c/Index.h	/^  CXCompletionContext_ClassTag = 1 << 11,$/;"	e	enum:CXCompletionContext
CXCompletionContext_DotMemberAccess	include/clang-c/Index.h	/^  CXCompletionContext_DotMemberAccess = 1 << 5,$/;"	e	enum:CXCompletionContext
CXCompletionContext_EnumTag	include/clang-c/Index.h	/^  CXCompletionContext_EnumTag = 1 << 8,$/;"	e	enum:CXCompletionContext
CXCompletionContext_MacroName	include/clang-c/Index.h	/^  CXCompletionContext_MacroName = 1 << 20,$/;"	e	enum:CXCompletionContext
CXCompletionContext_Namespace	include/clang-c/Index.h	/^  CXCompletionContext_Namespace = 1 << 12,$/;"	e	enum:CXCompletionContext
CXCompletionContext_NaturalLanguage	include/clang-c/Index.h	/^  CXCompletionContext_NaturalLanguage = 1 << 21,$/;"	e	enum:CXCompletionContext
CXCompletionContext_NestedNameSpecifier	include/clang-c/Index.h	/^  CXCompletionContext_NestedNameSpecifier = 1 << 13,$/;"	e	enum:CXCompletionContext
CXCompletionContext_ObjCCategory	include/clang-c/Index.h	/^  CXCompletionContext_ObjCCategory = 1 << 16,$/;"	e	enum:CXCompletionContext
CXCompletionContext_ObjCClassMessage	include/clang-c/Index.h	/^  CXCompletionContext_ObjCClassMessage = 1 << 18,$/;"	e	enum:CXCompletionContext
CXCompletionContext_ObjCInstanceMessage	include/clang-c/Index.h	/^  CXCompletionContext_ObjCInstanceMessage = 1 << 17,$/;"	e	enum:CXCompletionContext
CXCompletionContext_ObjCInterface	include/clang-c/Index.h	/^  CXCompletionContext_ObjCInterface = 1 << 14,$/;"	e	enum:CXCompletionContext
CXCompletionContext_ObjCObjectValue	include/clang-c/Index.h	/^  CXCompletionContext_ObjCObjectValue = 1 << 2,$/;"	e	enum:CXCompletionContext
CXCompletionContext_ObjCPropertyAccess	include/clang-c/Index.h	/^  CXCompletionContext_ObjCPropertyAccess = 1 << 7,$/;"	e	enum:CXCompletionContext
CXCompletionContext_ObjCProtocol	include/clang-c/Index.h	/^  CXCompletionContext_ObjCProtocol = 1 << 15,$/;"	e	enum:CXCompletionContext
CXCompletionContext_ObjCSelectorName	include/clang-c/Index.h	/^  CXCompletionContext_ObjCSelectorName = 1 << 19,$/;"	e	enum:CXCompletionContext
CXCompletionContext_ObjCSelectorValue	include/clang-c/Index.h	/^  CXCompletionContext_ObjCSelectorValue = 1 << 3,$/;"	e	enum:CXCompletionContext
CXCompletionContext_StructTag	include/clang-c/Index.h	/^  CXCompletionContext_StructTag = 1 << 10,$/;"	e	enum:CXCompletionContext
CXCompletionContext_Unexposed	include/clang-c/Index.h	/^  CXCompletionContext_Unexposed = 0,$/;"	e	enum:CXCompletionContext
CXCompletionContext_UnionTag	include/clang-c/Index.h	/^  CXCompletionContext_UnionTag = 1 << 9,$/;"	e	enum:CXCompletionContext
CXCompletionContext_Unknown	include/clang-c/Index.h	/^  CXCompletionContext_Unknown = ((1 << 22) - 1)$/;"	e	enum:CXCompletionContext
CXCompletionResult	include/clang-c/Index.h	/^} CXCompletionResult;$/;"	t	typeref:struct:__anon8
CXCompletionString	include/clang-c/Index.h	/^typedef void *CXCompletionString;$/;"	t
CXCursor	include/clang-c/Index.h	/^} CXCursor;$/;"	t	typeref:struct:__anon5
CXCursorAndRangeVisitor	include/clang-c/Index.h	/^} CXCursorAndRangeVisitor;$/;"	t	typeref:struct:__anon10
CXCursorKind	include/clang-c/Index.h	/^enum CXCursorKind {$/;"	g
CXCursorSet	include/clang-c/Index.h	/^typedef struct CXCursorSetImpl *CXCursorSet;$/;"	t	typeref:struct:CXCursorSetImpl
CXCursorVisitor	include/clang-c/Index.h	/^typedef enum CXChildVisitResult (*CXCursorVisitor)(CXCursor cursor,$/;"	t	typeref:enum:CXCursorVisitor
CXCursor_AddrLabelExpr	include/clang-c/Index.h	/^  CXCursor_AddrLabelExpr                 = 120,$/;"	e	enum:CXCursorKind
CXCursor_AnnotateAttr	include/clang-c/Index.h	/^  CXCursor_AnnotateAttr                  = 406,$/;"	e	enum:CXCursorKind
CXCursor_ArraySubscriptExpr	include/clang-c/Index.h	/^  CXCursor_ArraySubscriptExpr            = 113,$/;"	e	enum:CXCursorKind
CXCursor_AsmLabelAttr	include/clang-c/Index.h	/^  CXCursor_AsmLabelAttr                  = 407,$/;"	e	enum:CXCursorKind
CXCursor_AsmStmt	include/clang-c/Index.h	/^  CXCursor_AsmStmt                       = 215,$/;"	e	enum:CXCursorKind
CXCursor_BinaryOperator	include/clang-c/Index.h	/^  CXCursor_BinaryOperator                = 114,$/;"	e	enum:CXCursorKind
CXCursor_BlockExpr	include/clang-c/Index.h	/^  CXCursor_BlockExpr                     = 105,$/;"	e	enum:CXCursorKind
CXCursor_BreakStmt	include/clang-c/Index.h	/^  CXCursor_BreakStmt                     = 213,$/;"	e	enum:CXCursorKind
CXCursor_CStyleCastExpr	include/clang-c/Index.h	/^  CXCursor_CStyleCastExpr                = 117,$/;"	e	enum:CXCursorKind
CXCursor_CXXAccessSpecifier	include/clang-c/Index.h	/^  CXCursor_CXXAccessSpecifier            = 39,$/;"	e	enum:CXCursorKind
CXCursor_CXXBaseSpecifier	include/clang-c/Index.h	/^  CXCursor_CXXBaseSpecifier              = 44,$/;"	e	enum:CXCursorKind
CXCursor_CXXBoolLiteralExpr	include/clang-c/Index.h	/^  CXCursor_CXXBoolLiteralExpr            = 130,$/;"	e	enum:CXCursorKind
CXCursor_CXXCatchStmt	include/clang-c/Index.h	/^  CXCursor_CXXCatchStmt                  = 223,$/;"	e	enum:CXCursorKind
CXCursor_CXXConstCastExpr	include/clang-c/Index.h	/^  CXCursor_CXXConstCastExpr              = 127,$/;"	e	enum:CXCursorKind
CXCursor_CXXDeleteExpr	include/clang-c/Index.h	/^  CXCursor_CXXDeleteExpr                 = 135,$/;"	e	enum:CXCursorKind
CXCursor_CXXDynamicCastExpr	include/clang-c/Index.h	/^  CXCursor_CXXDynamicCastExpr            = 125,$/;"	e	enum:CXCursorKind
CXCursor_CXXFinalAttr	include/clang-c/Index.h	/^  CXCursor_CXXFinalAttr                  = 404,$/;"	e	enum:CXCursorKind
CXCursor_CXXForRangeStmt	include/clang-c/Index.h	/^  CXCursor_CXXForRangeStmt               = 225,$/;"	e	enum:CXCursorKind
CXCursor_CXXFunctionalCastExpr	include/clang-c/Index.h	/^  CXCursor_CXXFunctionalCastExpr         = 128,$/;"	e	enum:CXCursorKind
CXCursor_CXXMethod	include/clang-c/Index.h	/^  CXCursor_CXXMethod                     = 21,$/;"	e	enum:CXCursorKind
CXCursor_CXXNewExpr	include/clang-c/Index.h	/^  CXCursor_CXXNewExpr                    = 134,$/;"	e	enum:CXCursorKind
CXCursor_CXXNullPtrLiteralExpr	include/clang-c/Index.h	/^  CXCursor_CXXNullPtrLiteralExpr         = 131,$/;"	e	enum:CXCursorKind
CXCursor_CXXOverrideAttr	include/clang-c/Index.h	/^  CXCursor_CXXOverrideAttr               = 405,$/;"	e	enum:CXCursorKind
CXCursor_CXXReinterpretCastExpr	include/clang-c/Index.h	/^  CXCursor_CXXReinterpretCastExpr        = 126,$/;"	e	enum:CXCursorKind
CXCursor_CXXStaticCastExpr	include/clang-c/Index.h	/^  CXCursor_CXXStaticCastExpr             = 124,$/;"	e	enum:CXCursorKind
CXCursor_CXXThisExpr	include/clang-c/Index.h	/^  CXCursor_CXXThisExpr                   = 132,$/;"	e	enum:CXCursorKind
CXCursor_CXXThrowExpr	include/clang-c/Index.h	/^  CXCursor_CXXThrowExpr                  = 133,$/;"	e	enum:CXCursorKind
CXCursor_CXXTryStmt	include/clang-c/Index.h	/^  CXCursor_CXXTryStmt                    = 224,$/;"	e	enum:CXCursorKind
CXCursor_CXXTypeidExpr	include/clang-c/Index.h	/^  CXCursor_CXXTypeidExpr                 = 129,$/;"	e	enum:CXCursorKind
CXCursor_CallExpr	include/clang-c/Index.h	/^  CXCursor_CallExpr                      = 103,$/;"	e	enum:CXCursorKind
CXCursor_CaseStmt	include/clang-c/Index.h	/^  CXCursor_CaseStmt                      = 203,$/;"	e	enum:CXCursorKind
CXCursor_CharacterLiteral	include/clang-c/Index.h	/^  CXCursor_CharacterLiteral              = 110,$/;"	e	enum:CXCursorKind
CXCursor_ClassDecl	include/clang-c/Index.h	/^  CXCursor_ClassDecl                     = 4,$/;"	e	enum:CXCursorKind
CXCursor_ClassTemplate	include/clang-c/Index.h	/^  CXCursor_ClassTemplate                 = 31,$/;"	e	enum:CXCursorKind
CXCursor_ClassTemplatePartialSpecialization	include/clang-c/Index.h	/^  CXCursor_ClassTemplatePartialSpecialization = 32,$/;"	e	enum:CXCursorKind
CXCursor_CompoundAssignOperator	include/clang-c/Index.h	/^  CXCursor_CompoundAssignOperator        = 115,$/;"	e	enum:CXCursorKind
CXCursor_CompoundLiteralExpr	include/clang-c/Index.h	/^  CXCursor_CompoundLiteralExpr           = 118,$/;"	e	enum:CXCursorKind
CXCursor_CompoundStmt	include/clang-c/Index.h	/^  CXCursor_CompoundStmt                  = 202,$/;"	e	enum:CXCursorKind
CXCursor_ConditionalOperator	include/clang-c/Index.h	/^  CXCursor_ConditionalOperator           = 116,$/;"	e	enum:CXCursorKind
CXCursor_Constructor	include/clang-c/Index.h	/^  CXCursor_Constructor                   = 24,$/;"	e	enum:CXCursorKind
CXCursor_ContinueStmt	include/clang-c/Index.h	/^  CXCursor_ContinueStmt                  = 212,$/;"	e	enum:CXCursorKind
CXCursor_ConversionFunction	include/clang-c/Index.h	/^  CXCursor_ConversionFunction            = 26,$/;"	e	enum:CXCursorKind
CXCursor_DeclRefExpr	include/clang-c/Index.h	/^  CXCursor_DeclRefExpr                   = 101,$/;"	e	enum:CXCursorKind
CXCursor_DeclStmt	include/clang-c/Index.h	/^  CXCursor_DeclStmt                      = 231,$/;"	e	enum:CXCursorKind
CXCursor_DefaultStmt	include/clang-c/Index.h	/^  CXCursor_DefaultStmt                   = 204,$/;"	e	enum:CXCursorKind
CXCursor_Destructor	include/clang-c/Index.h	/^  CXCursor_Destructor                    = 25,$/;"	e	enum:CXCursorKind
CXCursor_DoStmt	include/clang-c/Index.h	/^  CXCursor_DoStmt                        = 208,$/;"	e	enum:CXCursorKind
CXCursor_EnumConstantDecl	include/clang-c/Index.h	/^  CXCursor_EnumConstantDecl              = 7,$/;"	e	enum:CXCursorKind
CXCursor_EnumDecl	include/clang-c/Index.h	/^  CXCursor_EnumDecl                      = 5,$/;"	e	enum:CXCursorKind
CXCursor_FieldDecl	include/clang-c/Index.h	/^  CXCursor_FieldDecl                     = 6,$/;"	e	enum:CXCursorKind
CXCursor_FirstAttr	include/clang-c/Index.h	/^  CXCursor_FirstAttr                     = 400,$/;"	e	enum:CXCursorKind
CXCursor_FirstDecl	include/clang-c/Index.h	/^  CXCursor_FirstDecl                     = CXCursor_UnexposedDecl,$/;"	e	enum:CXCursorKind
CXCursor_FirstExpr	include/clang-c/Index.h	/^  CXCursor_FirstExpr                     = 100,$/;"	e	enum:CXCursorKind
CXCursor_FirstInvalid	include/clang-c/Index.h	/^  CXCursor_FirstInvalid                  = 70,$/;"	e	enum:CXCursorKind
CXCursor_FirstPreprocessing	include/clang-c/Index.h	/^  CXCursor_FirstPreprocessing            = CXCursor_PreprocessingDirective,$/;"	e	enum:CXCursorKind
CXCursor_FirstRef	include/clang-c/Index.h	/^  CXCursor_FirstRef                      = 40, \/* Decl references *\/$/;"	e	enum:CXCursorKind
CXCursor_FirstStmt	include/clang-c/Index.h	/^  CXCursor_FirstStmt                     = 200,$/;"	e	enum:CXCursorKind
CXCursor_FloatingLiteral	include/clang-c/Index.h	/^  CXCursor_FloatingLiteral               = 107,$/;"	e	enum:CXCursorKind
CXCursor_ForStmt	include/clang-c/Index.h	/^  CXCursor_ForStmt                       = 209,$/;"	e	enum:CXCursorKind
CXCursor_FunctionDecl	include/clang-c/Index.h	/^  CXCursor_FunctionDecl                  = 8,$/;"	e	enum:CXCursorKind
CXCursor_FunctionTemplate	include/clang-c/Index.h	/^  CXCursor_FunctionTemplate              = 30,$/;"	e	enum:CXCursorKind
CXCursor_GNUNullExpr	include/clang-c/Index.h	/^  CXCursor_GNUNullExpr                   = 123,$/;"	e	enum:CXCursorKind
CXCursor_GenericSelectionExpr	include/clang-c/Index.h	/^  CXCursor_GenericSelectionExpr          = 122,$/;"	e	enum:CXCursorKind
CXCursor_GotoStmt	include/clang-c/Index.h	/^  CXCursor_GotoStmt                      = 210,$/;"	e	enum:CXCursorKind
CXCursor_IBActionAttr	include/clang-c/Index.h	/^  CXCursor_IBActionAttr                  = 401,$/;"	e	enum:CXCursorKind
CXCursor_IBOutletAttr	include/clang-c/Index.h	/^  CXCursor_IBOutletAttr                  = 402,$/;"	e	enum:CXCursorKind
CXCursor_IBOutletCollectionAttr	include/clang-c/Index.h	/^  CXCursor_IBOutletCollectionAttr        = 403,$/;"	e	enum:CXCursorKind
CXCursor_IfStmt	include/clang-c/Index.h	/^  CXCursor_IfStmt                        = 205,$/;"	e	enum:CXCursorKind
CXCursor_ImaginaryLiteral	include/clang-c/Index.h	/^  CXCursor_ImaginaryLiteral              = 108,$/;"	e	enum:CXCursorKind
CXCursor_InclusionDirective	include/clang-c/Index.h	/^  CXCursor_InclusionDirective            = 503,$/;"	e	enum:CXCursorKind
CXCursor_IndirectGotoStmt	include/clang-c/Index.h	/^  CXCursor_IndirectGotoStmt              = 211,$/;"	e	enum:CXCursorKind
CXCursor_InitListExpr	include/clang-c/Index.h	/^  CXCursor_InitListExpr                  = 119,$/;"	e	enum:CXCursorKind
CXCursor_IntegerLiteral	include/clang-c/Index.h	/^  CXCursor_IntegerLiteral                = 106,$/;"	e	enum:CXCursorKind
CXCursor_InvalidCode	include/clang-c/Index.h	/^  CXCursor_InvalidCode                   = 73,$/;"	e	enum:CXCursorKind
CXCursor_InvalidFile	include/clang-c/Index.h	/^  CXCursor_InvalidFile                   = 70,$/;"	e	enum:CXCursorKind
CXCursor_LabelRef	include/clang-c/Index.h	/^  CXCursor_LabelRef                      = 48,$/;"	e	enum:CXCursorKind
CXCursor_LabelStmt	include/clang-c/Index.h	/^  CXCursor_LabelStmt                     = 201,$/;"	e	enum:CXCursorKind
CXCursor_LambdaExpr	include/clang-c/Index.h	/^  CXCursor_LambdaExpr                    = 144,$/;"	e	enum:CXCursorKind
CXCursor_LastAttr	include/clang-c/Index.h	/^  CXCursor_LastAttr                      = CXCursor_AsmLabelAttr,$/;"	e	enum:CXCursorKind
CXCursor_LastDecl	include/clang-c/Index.h	/^  CXCursor_LastDecl                      = CXCursor_CXXAccessSpecifier,$/;"	e	enum:CXCursorKind
CXCursor_LastExpr	include/clang-c/Index.h	/^  CXCursor_LastExpr                      = CXCursor_ObjCBoolLiteralExpr,$/;"	e	enum:CXCursorKind
CXCursor_LastInvalid	include/clang-c/Index.h	/^  CXCursor_LastInvalid                   = CXCursor_InvalidCode,$/;"	e	enum:CXCursorKind
CXCursor_LastPreprocessing	include/clang-c/Index.h	/^  CXCursor_LastPreprocessing             = CXCursor_InclusionDirective$/;"	e	enum:CXCursorKind
CXCursor_LastRef	include/clang-c/Index.h	/^  CXCursor_LastRef                       = CXCursor_VariableRef,$/;"	e	enum:CXCursorKind
CXCursor_LastStmt	include/clang-c/Index.h	/^  CXCursor_LastStmt                      = CXCursor_DeclStmt,$/;"	e	enum:CXCursorKind
CXCursor_LinkageSpec	include/clang-c/Index.h	/^  CXCursor_LinkageSpec                   = 23,$/;"	e	enum:CXCursorKind
CXCursor_MacroDefinition	include/clang-c/Index.h	/^  CXCursor_MacroDefinition               = 501,$/;"	e	enum:CXCursorKind
CXCursor_MacroExpansion	include/clang-c/Index.h	/^  CXCursor_MacroExpansion                = 502,$/;"	e	enum:CXCursorKind
CXCursor_MacroInstantiation	include/clang-c/Index.h	/^  CXCursor_MacroInstantiation            = CXCursor_MacroExpansion,$/;"	e	enum:CXCursorKind
CXCursor_MemberRef	include/clang-c/Index.h	/^  CXCursor_MemberRef                     = 47,$/;"	e	enum:CXCursorKind
CXCursor_MemberRefExpr	include/clang-c/Index.h	/^  CXCursor_MemberRefExpr                 = 102,$/;"	e	enum:CXCursorKind
CXCursor_Namespace	include/clang-c/Index.h	/^  CXCursor_Namespace                     = 22,$/;"	e	enum:CXCursorKind
CXCursor_NamespaceAlias	include/clang-c/Index.h	/^  CXCursor_NamespaceAlias                = 33,$/;"	e	enum:CXCursorKind
CXCursor_NamespaceRef	include/clang-c/Index.h	/^  CXCursor_NamespaceRef                  = 46,$/;"	e	enum:CXCursorKind
CXCursor_NoDeclFound	include/clang-c/Index.h	/^  CXCursor_NoDeclFound                   = 71,$/;"	e	enum:CXCursorKind
CXCursor_NonTypeTemplateParameter	include/clang-c/Index.h	/^  CXCursor_NonTypeTemplateParameter      = 28,$/;"	e	enum:CXCursorKind
CXCursor_NotImplemented	include/clang-c/Index.h	/^  CXCursor_NotImplemented                = 72,$/;"	e	enum:CXCursorKind
CXCursor_NullStmt	include/clang-c/Index.h	/^  CXCursor_NullStmt                      = 230,$/;"	e	enum:CXCursorKind
CXCursor_ObjCAtCatchStmt	include/clang-c/Index.h	/^  CXCursor_ObjCAtCatchStmt               = 217,$/;"	e	enum:CXCursorKind
CXCursor_ObjCAtFinallyStmt	include/clang-c/Index.h	/^  CXCursor_ObjCAtFinallyStmt             = 218,$/;"	e	enum:CXCursorKind
CXCursor_ObjCAtSynchronizedStmt	include/clang-c/Index.h	/^  CXCursor_ObjCAtSynchronizedStmt        = 220,$/;"	e	enum:CXCursorKind
CXCursor_ObjCAtThrowStmt	include/clang-c/Index.h	/^  CXCursor_ObjCAtThrowStmt               = 219,$/;"	e	enum:CXCursorKind
CXCursor_ObjCAtTryStmt	include/clang-c/Index.h	/^  CXCursor_ObjCAtTryStmt                 = 216,$/;"	e	enum:CXCursorKind
CXCursor_ObjCAutoreleasePoolStmt	include/clang-c/Index.h	/^  CXCursor_ObjCAutoreleasePoolStmt       = 221,$/;"	e	enum:CXCursorKind
CXCursor_ObjCBoolLiteralExpr	include/clang-c/Index.h	/^  CXCursor_ObjCBoolLiteralExpr           = 145,$/;"	e	enum:CXCursorKind
CXCursor_ObjCBridgedCastExpr	include/clang-c/Index.h	/^  CXCursor_ObjCBridgedCastExpr           = 141,$/;"	e	enum:CXCursorKind
CXCursor_ObjCCategoryDecl	include/clang-c/Index.h	/^  CXCursor_ObjCCategoryDecl              = 12,$/;"	e	enum:CXCursorKind
CXCursor_ObjCCategoryImplDecl	include/clang-c/Index.h	/^  CXCursor_ObjCCategoryImplDecl          = 19,$/;"	e	enum:CXCursorKind
CXCursor_ObjCClassMethodDecl	include/clang-c/Index.h	/^  CXCursor_ObjCClassMethodDecl           = 17,$/;"	e	enum:CXCursorKind
CXCursor_ObjCClassRef	include/clang-c/Index.h	/^  CXCursor_ObjCClassRef                  = 42,$/;"	e	enum:CXCursorKind
CXCursor_ObjCDynamicDecl	include/clang-c/Index.h	/^  CXCursor_ObjCDynamicDecl               = 38,$/;"	e	enum:CXCursorKind
CXCursor_ObjCEncodeExpr	include/clang-c/Index.h	/^  CXCursor_ObjCEncodeExpr                = 138,$/;"	e	enum:CXCursorKind
CXCursor_ObjCForCollectionStmt	include/clang-c/Index.h	/^  CXCursor_ObjCForCollectionStmt         = 222,$/;"	e	enum:CXCursorKind
CXCursor_ObjCImplementationDecl	include/clang-c/Index.h	/^  CXCursor_ObjCImplementationDecl        = 18,$/;"	e	enum:CXCursorKind
CXCursor_ObjCInstanceMethodDecl	include/clang-c/Index.h	/^  CXCursor_ObjCInstanceMethodDecl        = 16,$/;"	e	enum:CXCursorKind
CXCursor_ObjCInterfaceDecl	include/clang-c/Index.h	/^  CXCursor_ObjCInterfaceDecl             = 11,$/;"	e	enum:CXCursorKind
CXCursor_ObjCIvarDecl	include/clang-c/Index.h	/^  CXCursor_ObjCIvarDecl                  = 15,$/;"	e	enum:CXCursorKind
CXCursor_ObjCMessageExpr	include/clang-c/Index.h	/^  CXCursor_ObjCMessageExpr               = 104,$/;"	e	enum:CXCursorKind
CXCursor_ObjCPropertyDecl	include/clang-c/Index.h	/^  CXCursor_ObjCPropertyDecl              = 14,$/;"	e	enum:CXCursorKind
CXCursor_ObjCProtocolDecl	include/clang-c/Index.h	/^  CXCursor_ObjCProtocolDecl              = 13,$/;"	e	enum:CXCursorKind
CXCursor_ObjCProtocolExpr	include/clang-c/Index.h	/^  CXCursor_ObjCProtocolExpr              = 140,$/;"	e	enum:CXCursorKind
CXCursor_ObjCProtocolRef	include/clang-c/Index.h	/^  CXCursor_ObjCProtocolRef               = 41,$/;"	e	enum:CXCursorKind
CXCursor_ObjCSelectorExpr	include/clang-c/Index.h	/^  CXCursor_ObjCSelectorExpr              = 139,$/;"	e	enum:CXCursorKind
CXCursor_ObjCStringLiteral	include/clang-c/Index.h	/^  CXCursor_ObjCStringLiteral             = 137,$/;"	e	enum:CXCursorKind
CXCursor_ObjCSuperClassRef	include/clang-c/Index.h	/^  CXCursor_ObjCSuperClassRef             = 40,$/;"	e	enum:CXCursorKind
CXCursor_ObjCSynthesizeDecl	include/clang-c/Index.h	/^  CXCursor_ObjCSynthesizeDecl            = 37,$/;"	e	enum:CXCursorKind
CXCursor_OverloadedDeclRef	include/clang-c/Index.h	/^  CXCursor_OverloadedDeclRef             = 49,$/;"	e	enum:CXCursorKind
CXCursor_PackExpansionExpr	include/clang-c/Index.h	/^  CXCursor_PackExpansionExpr             = 142,$/;"	e	enum:CXCursorKind
CXCursor_ParenExpr	include/clang-c/Index.h	/^  CXCursor_ParenExpr                     = 111,$/;"	e	enum:CXCursorKind
CXCursor_ParmDecl	include/clang-c/Index.h	/^  CXCursor_ParmDecl                      = 10,$/;"	e	enum:CXCursorKind
CXCursor_PreprocessingDirective	include/clang-c/Index.h	/^  CXCursor_PreprocessingDirective        = 500,$/;"	e	enum:CXCursorKind
CXCursor_ReturnStmt	include/clang-c/Index.h	/^  CXCursor_ReturnStmt                    = 214,$/;"	e	enum:CXCursorKind
CXCursor_SEHExceptStmt	include/clang-c/Index.h	/^  CXCursor_SEHExceptStmt                 = 227,$/;"	e	enum:CXCursorKind
CXCursor_SEHFinallyStmt	include/clang-c/Index.h	/^  CXCursor_SEHFinallyStmt                = 228,$/;"	e	enum:CXCursorKind
CXCursor_SEHTryStmt	include/clang-c/Index.h	/^  CXCursor_SEHTryStmt                    = 226,$/;"	e	enum:CXCursorKind
CXCursor_SizeOfPackExpr	include/clang-c/Index.h	/^  CXCursor_SizeOfPackExpr                = 143,$/;"	e	enum:CXCursorKind
CXCursor_StmtExpr	include/clang-c/Index.h	/^  CXCursor_StmtExpr                      = 121,$/;"	e	enum:CXCursorKind
CXCursor_StringLiteral	include/clang-c/Index.h	/^  CXCursor_StringLiteral                 = 109,$/;"	e	enum:CXCursorKind
CXCursor_StructDecl	include/clang-c/Index.h	/^  CXCursor_StructDecl                    = 2,$/;"	e	enum:CXCursorKind
CXCursor_SwitchStmt	include/clang-c/Index.h	/^  CXCursor_SwitchStmt                    = 206,$/;"	e	enum:CXCursorKind
CXCursor_TemplateRef	include/clang-c/Index.h	/^  CXCursor_TemplateRef                   = 45,$/;"	e	enum:CXCursorKind
CXCursor_TemplateTemplateParameter	include/clang-c/Index.h	/^  CXCursor_TemplateTemplateParameter     = 29,$/;"	e	enum:CXCursorKind
CXCursor_TemplateTypeParameter	include/clang-c/Index.h	/^  CXCursor_TemplateTypeParameter         = 27,$/;"	e	enum:CXCursorKind
CXCursor_TranslationUnit	include/clang-c/Index.h	/^  CXCursor_TranslationUnit               = 300,$/;"	e	enum:CXCursorKind
CXCursor_TypeAliasDecl	include/clang-c/Index.h	/^  CXCursor_TypeAliasDecl                 = 36,$/;"	e	enum:CXCursorKind
CXCursor_TypeRef	include/clang-c/Index.h	/^  CXCursor_TypeRef                       = 43,$/;"	e	enum:CXCursorKind
CXCursor_TypedefDecl	include/clang-c/Index.h	/^  CXCursor_TypedefDecl                   = 20,$/;"	e	enum:CXCursorKind
CXCursor_UnaryExpr	include/clang-c/Index.h	/^  CXCursor_UnaryExpr                     = 136,$/;"	e	enum:CXCursorKind
CXCursor_UnaryOperator	include/clang-c/Index.h	/^  CXCursor_UnaryOperator                 = 112,$/;"	e	enum:CXCursorKind
CXCursor_UnexposedAttr	include/clang-c/Index.h	/^  CXCursor_UnexposedAttr                 = 400,$/;"	e	enum:CXCursorKind
CXCursor_UnexposedDecl	include/clang-c/Index.h	/^  CXCursor_UnexposedDecl                 = 1,$/;"	e	enum:CXCursorKind
CXCursor_UnexposedExpr	include/clang-c/Index.h	/^  CXCursor_UnexposedExpr                 = 100,$/;"	e	enum:CXCursorKind
CXCursor_UnexposedStmt	include/clang-c/Index.h	/^  CXCursor_UnexposedStmt                 = 200,$/;"	e	enum:CXCursorKind
CXCursor_UnionDecl	include/clang-c/Index.h	/^  CXCursor_UnionDecl                     = 3,$/;"	e	enum:CXCursorKind
CXCursor_UsingDeclaration	include/clang-c/Index.h	/^  CXCursor_UsingDeclaration              = 35,$/;"	e	enum:CXCursorKind
CXCursor_UsingDirective	include/clang-c/Index.h	/^  CXCursor_UsingDirective                = 34,$/;"	e	enum:CXCursorKind
CXCursor_VarDecl	include/clang-c/Index.h	/^  CXCursor_VarDecl                       = 9,$/;"	e	enum:CXCursorKind
CXCursor_VariableRef	include/clang-c/Index.h	/^  CXCursor_VariableRef                   = 50,$/;"	e	enum:CXCursorKind
CXCursor_WhileStmt	include/clang-c/Index.h	/^  CXCursor_WhileStmt                     = 207,$/;"	e	enum:CXCursorKind
CXDiagnostic	include/clang-c/Index.h	/^typedef void *CXDiagnostic;$/;"	t
CXDiagnosticDisplayOptions	include/clang-c/Index.h	/^enum CXDiagnosticDisplayOptions {$/;"	g
CXDiagnosticSet	include/clang-c/Index.h	/^typedef void *CXDiagnosticSet;$/;"	t
CXDiagnosticSeverity	include/clang-c/Index.h	/^enum CXDiagnosticSeverity {$/;"	g
CXDiagnostic_DisplayCategoryId	include/clang-c/Index.h	/^  CXDiagnostic_DisplayCategoryId = 0x10,$/;"	e	enum:CXDiagnosticDisplayOptions
CXDiagnostic_DisplayCategoryName	include/clang-c/Index.h	/^  CXDiagnostic_DisplayCategoryName = 0x20$/;"	e	enum:CXDiagnosticDisplayOptions
CXDiagnostic_DisplayColumn	include/clang-c/Index.h	/^  CXDiagnostic_DisplayColumn = 0x02,$/;"	e	enum:CXDiagnosticDisplayOptions
CXDiagnostic_DisplayOption	include/clang-c/Index.h	/^  CXDiagnostic_DisplayOption = 0x08,$/;"	e	enum:CXDiagnosticDisplayOptions
CXDiagnostic_DisplaySourceLocation	include/clang-c/Index.h	/^  CXDiagnostic_DisplaySourceLocation = 0x01,$/;"	e	enum:CXDiagnosticDisplayOptions
CXDiagnostic_DisplaySourceRanges	include/clang-c/Index.h	/^  CXDiagnostic_DisplaySourceRanges = 0x04,$/;"	e	enum:CXDiagnosticDisplayOptions
CXDiagnostic_Error	include/clang-c/Index.h	/^  CXDiagnostic_Error   = 3,$/;"	e	enum:CXDiagnosticSeverity
CXDiagnostic_Fatal	include/clang-c/Index.h	/^  CXDiagnostic_Fatal   = 4$/;"	e	enum:CXDiagnosticSeverity
CXDiagnostic_Ignored	include/clang-c/Index.h	/^  CXDiagnostic_Ignored = 0,$/;"	e	enum:CXDiagnosticSeverity
CXDiagnostic_Note	include/clang-c/Index.h	/^  CXDiagnostic_Note    = 1,$/;"	e	enum:CXDiagnosticSeverity
CXDiagnostic_Warning	include/clang-c/Index.h	/^  CXDiagnostic_Warning = 2,$/;"	e	enum:CXDiagnosticSeverity
CXFile	include/clang-c/Index.h	/^typedef void *CXFile;$/;"	t
CXGlobalOptFlags	include/clang-c/Index.h	/^} CXGlobalOptFlags;$/;"	t	typeref:enum:__anon2
CXGlobalOpt_None	include/clang-c/Index.h	/^  CXGlobalOpt_None = 0x0,$/;"	e	enum:__anon2
CXGlobalOpt_ThreadBackgroundPriorityForAll	include/clang-c/Index.h	/^  CXGlobalOpt_ThreadBackgroundPriorityForAll =$/;"	e	enum:__anon2
CXGlobalOpt_ThreadBackgroundPriorityForEditing	include/clang-c/Index.h	/^  CXGlobalOpt_ThreadBackgroundPriorityForEditing = 0x2,$/;"	e	enum:__anon2
CXGlobalOpt_ThreadBackgroundPriorityForIndexing	include/clang-c/Index.h	/^  CXGlobalOpt_ThreadBackgroundPriorityForIndexing = 0x1,$/;"	e	enum:__anon2
CXIdxAttrInfo	include/clang-c/Index.h	/^} CXIdxAttrInfo;$/;"	t	typeref:struct:__anon18
CXIdxAttrKind	include/clang-c/Index.h	/^} CXIdxAttrKind;$/;"	t	typeref:enum:__anon17
CXIdxAttr_IBAction	include/clang-c/Index.h	/^  CXIdxAttr_IBAction      = 1,$/;"	e	enum:__anon17
CXIdxAttr_IBOutlet	include/clang-c/Index.h	/^  CXIdxAttr_IBOutlet      = 2,$/;"	e	enum:__anon17
CXIdxAttr_IBOutletCollection	include/clang-c/Index.h	/^  CXIdxAttr_IBOutletCollection = 3$/;"	e	enum:__anon17
CXIdxAttr_Unexposed	include/clang-c/Index.h	/^  CXIdxAttr_Unexposed     = 0,$/;"	e	enum:__anon17
CXIdxBaseClassInfo	include/clang-c/Index.h	/^} CXIdxBaseClassInfo;$/;"	t	typeref:struct:__anon25
CXIdxCXXClassDeclInfo	include/clang-c/Index.h	/^} CXIdxCXXClassDeclInfo;$/;"	t	typeref:struct:__anon31
CXIdxClientASTFile	include/clang-c/Index.h	/^typedef void *CXIdxClientASTFile;$/;"	t
CXIdxClientContainer	include/clang-c/Index.h	/^typedef void *CXIdxClientContainer;$/;"	t
CXIdxClientEntity	include/clang-c/Index.h	/^typedef void *CXIdxClientEntity;$/;"	t
CXIdxClientFile	include/clang-c/Index.h	/^typedef void *CXIdxClientFile;$/;"	t
CXIdxContainerInfo	include/clang-c/Index.h	/^} CXIdxContainerInfo;$/;"	t	typeref:struct:__anon20
CXIdxDeclInfo	include/clang-c/Index.h	/^} CXIdxDeclInfo;$/;"	t	typeref:struct:__anon22
CXIdxEntityCXXTemplateKind	include/clang-c/Index.h	/^} CXIdxEntityCXXTemplateKind;$/;"	t	typeref:enum:__anon16
CXIdxEntityInfo	include/clang-c/Index.h	/^} CXIdxEntityInfo;$/;"	t	typeref:struct:__anon19
CXIdxEntityKind	include/clang-c/Index.h	/^} CXIdxEntityKind;$/;"	t	typeref:enum:__anon14
CXIdxEntityLang_C	include/clang-c/Index.h	/^  CXIdxEntityLang_C    = 1,$/;"	e	enum:__anon15
CXIdxEntityLang_CXX	include/clang-c/Index.h	/^  CXIdxEntityLang_CXX  = 3$/;"	e	enum:__anon15
CXIdxEntityLang_None	include/clang-c/Index.h	/^  CXIdxEntityLang_None = 0,$/;"	e	enum:__anon15
CXIdxEntityLang_ObjC	include/clang-c/Index.h	/^  CXIdxEntityLang_ObjC = 2,$/;"	e	enum:__anon15
CXIdxEntityLanguage	include/clang-c/Index.h	/^} CXIdxEntityLanguage;$/;"	t	typeref:enum:__anon15
CXIdxEntityRefInfo	include/clang-c/Index.h	/^} CXIdxEntityRefInfo;$/;"	t	typeref:struct:__anon33
CXIdxEntityRefKind	include/clang-c/Index.h	/^} CXIdxEntityRefKind;$/;"	t	typeref:enum:__anon32
CXIdxEntityRef_Direct	include/clang-c/Index.h	/^  CXIdxEntityRef_Direct = 1,$/;"	e	enum:__anon32
CXIdxEntityRef_Implicit	include/clang-c/Index.h	/^  CXIdxEntityRef_Implicit = 2$/;"	e	enum:__anon32
CXIdxEntity_CXXClass	include/clang-c/Index.h	/^  CXIdxEntity_CXXClass              = 16,$/;"	e	enum:__anon14
CXIdxEntity_CXXConstructor	include/clang-c/Index.h	/^  CXIdxEntity_CXXConstructor        = 22,$/;"	e	enum:__anon14
CXIdxEntity_CXXConversionFunction	include/clang-c/Index.h	/^  CXIdxEntity_CXXConversionFunction = 24,$/;"	e	enum:__anon14
CXIdxEntity_CXXDestructor	include/clang-c/Index.h	/^  CXIdxEntity_CXXDestructor         = 23,$/;"	e	enum:__anon14
CXIdxEntity_CXXInstanceMethod	include/clang-c/Index.h	/^  CXIdxEntity_CXXInstanceMethod     = 21,$/;"	e	enum:__anon14
CXIdxEntity_CXXNamespace	include/clang-c/Index.h	/^  CXIdxEntity_CXXNamespace          = 17,$/;"	e	enum:__anon14
CXIdxEntity_CXXNamespaceAlias	include/clang-c/Index.h	/^  CXIdxEntity_CXXNamespaceAlias     = 18,$/;"	e	enum:__anon14
CXIdxEntity_CXXStaticMethod	include/clang-c/Index.h	/^  CXIdxEntity_CXXStaticMethod       = 20,$/;"	e	enum:__anon14
CXIdxEntity_CXXStaticVariable	include/clang-c/Index.h	/^  CXIdxEntity_CXXStaticVariable     = 19,$/;"	e	enum:__anon14
CXIdxEntity_CXXTypeAlias	include/clang-c/Index.h	/^  CXIdxEntity_CXXTypeAlias          = 25$/;"	e	enum:__anon14
CXIdxEntity_Enum	include/clang-c/Index.h	/^  CXIdxEntity_Enum          = 13,$/;"	e	enum:__anon14
CXIdxEntity_EnumConstant	include/clang-c/Index.h	/^  CXIdxEntity_EnumConstant  = 5,$/;"	e	enum:__anon14
CXIdxEntity_Field	include/clang-c/Index.h	/^  CXIdxEntity_Field         = 4,$/;"	e	enum:__anon14
CXIdxEntity_Function	include/clang-c/Index.h	/^  CXIdxEntity_Function      = 2,$/;"	e	enum:__anon14
CXIdxEntity_NonTemplate	include/clang-c/Index.h	/^  CXIdxEntity_NonTemplate   = 0,$/;"	e	enum:__anon16
CXIdxEntity_ObjCCategory	include/clang-c/Index.h	/^  CXIdxEntity_ObjCCategory  = 8,$/;"	e	enum:__anon14
CXIdxEntity_ObjCClass	include/clang-c/Index.h	/^  CXIdxEntity_ObjCClass     = 6,$/;"	e	enum:__anon14
CXIdxEntity_ObjCClassMethod	include/clang-c/Index.h	/^  CXIdxEntity_ObjCClassMethod    = 10,$/;"	e	enum:__anon14
CXIdxEntity_ObjCInstanceMethod	include/clang-c/Index.h	/^  CXIdxEntity_ObjCInstanceMethod = 9,$/;"	e	enum:__anon14
CXIdxEntity_ObjCIvar	include/clang-c/Index.h	/^  CXIdxEntity_ObjCIvar      = 12,$/;"	e	enum:__anon14
CXIdxEntity_ObjCProperty	include/clang-c/Index.h	/^  CXIdxEntity_ObjCProperty  = 11,$/;"	e	enum:__anon14
CXIdxEntity_ObjCProtocol	include/clang-c/Index.h	/^  CXIdxEntity_ObjCProtocol  = 7,$/;"	e	enum:__anon14
CXIdxEntity_Struct	include/clang-c/Index.h	/^  CXIdxEntity_Struct        = 14,$/;"	e	enum:__anon14
CXIdxEntity_Template	include/clang-c/Index.h	/^  CXIdxEntity_Template      = 1,$/;"	e	enum:__anon16
CXIdxEntity_TemplatePartialSpecialization	include/clang-c/Index.h	/^  CXIdxEntity_TemplatePartialSpecialization = 2,$/;"	e	enum:__anon16
CXIdxEntity_TemplateSpecialization	include/clang-c/Index.h	/^  CXIdxEntity_TemplateSpecialization = 3$/;"	e	enum:__anon16
CXIdxEntity_Typedef	include/clang-c/Index.h	/^  CXIdxEntity_Typedef       = 1,$/;"	e	enum:__anon14
CXIdxEntity_Unexposed	include/clang-c/Index.h	/^  CXIdxEntity_Unexposed     = 0,$/;"	e	enum:__anon14
CXIdxEntity_Union	include/clang-c/Index.h	/^  CXIdxEntity_Union         = 15,$/;"	e	enum:__anon14
CXIdxEntity_Variable	include/clang-c/Index.h	/^  CXIdxEntity_Variable      = 3,$/;"	e	enum:__anon14
CXIdxIBOutletCollectionAttrInfo	include/clang-c/Index.h	/^} CXIdxIBOutletCollectionAttrInfo;$/;"	t	typeref:struct:__anon21
CXIdxImportedASTFileInfo	include/clang-c/Index.h	/^} CXIdxImportedASTFileInfo;$/;"	t	typeref:struct:__anon13
CXIdxIncludedFileInfo	include/clang-c/Index.h	/^} CXIdxIncludedFileInfo;$/;"	t	typeref:struct:__anon12
CXIdxLoc	include/clang-c/Index.h	/^} CXIdxLoc;$/;"	t	typeref:struct:__anon11
CXIdxObjCCategoryDeclInfo	include/clang-c/Index.h	/^} CXIdxObjCCategoryDeclInfo;$/;"	t	typeref:struct:__anon29
CXIdxObjCContainerDeclInfo	include/clang-c/Index.h	/^} CXIdxObjCContainerDeclInfo;$/;"	t	typeref:struct:__anon24
CXIdxObjCContainerKind	include/clang-c/Index.h	/^} CXIdxObjCContainerKind;$/;"	t	typeref:enum:__anon23
CXIdxObjCContainer_ForwardRef	include/clang-c/Index.h	/^  CXIdxObjCContainer_ForwardRef = 0,$/;"	e	enum:__anon23
CXIdxObjCContainer_Implementation	include/clang-c/Index.h	/^  CXIdxObjCContainer_Implementation = 2$/;"	e	enum:__anon23
CXIdxObjCContainer_Interface	include/clang-c/Index.h	/^  CXIdxObjCContainer_Interface = 1,$/;"	e	enum:__anon23
CXIdxObjCInterfaceDeclInfo	include/clang-c/Index.h	/^} CXIdxObjCInterfaceDeclInfo;$/;"	t	typeref:struct:__anon28
CXIdxObjCPropertyDeclInfo	include/clang-c/Index.h	/^} CXIdxObjCPropertyDeclInfo;$/;"	t	typeref:struct:__anon30
CXIdxObjCProtocolRefInfo	include/clang-c/Index.h	/^} CXIdxObjCProtocolRefInfo;$/;"	t	typeref:struct:__anon26
CXIdxObjCProtocolRefListInfo	include/clang-c/Index.h	/^} CXIdxObjCProtocolRefListInfo;$/;"	t	typeref:struct:__anon27
CXInclusionVisitor	include/clang-c/Index.h	/^typedef void (*CXInclusionVisitor)(CXFile included_file,$/;"	t
CXIndex	include/clang-c/Index.h	/^typedef void *CXIndex;$/;"	t
CXIndexAction	include/clang-c/Index.h	/^typedef void *CXIndexAction;$/;"	t
CXIndexOptFlags	include/clang-c/Index.h	/^} CXIndexOptFlags;$/;"	t	typeref:enum:__anon35
CXIndexOpt_IndexFunctionLocalSymbols	include/clang-c/Index.h	/^  CXIndexOpt_IndexFunctionLocalSymbols = 0x2,$/;"	e	enum:__anon35
CXIndexOpt_IndexImplicitTemplateInstantiations	include/clang-c/Index.h	/^  CXIndexOpt_IndexImplicitTemplateInstantiations = 0x4,$/;"	e	enum:__anon35
CXIndexOpt_None	include/clang-c/Index.h	/^  CXIndexOpt_None = 0x0,$/;"	e	enum:__anon35
CXIndexOpt_SuppressRedundantRefs	include/clang-c/Index.h	/^  CXIndexOpt_SuppressRedundantRefs = 0x1,$/;"	e	enum:__anon35
CXIndexOpt_SuppressWarnings	include/clang-c/Index.h	/^  CXIndexOpt_SuppressWarnings = 0x8$/;"	e	enum:__anon35
CXLanguageKind	include/clang-c/Index.h	/^CINDEX_LINKAGE enum CXLanguageKind {$/;"	g
CXLanguage_C	include/clang-c/Index.h	/^  CXLanguage_C,$/;"	e	enum:CXLanguageKind
CXLanguage_CPlusPlus	include/clang-c/Index.h	/^  CXLanguage_CPlusPlus$/;"	e	enum:CXLanguageKind
CXLanguage_Invalid	include/clang-c/Index.h	/^  CXLanguage_Invalid = 0,$/;"	e	enum:CXLanguageKind
CXLanguage_ObjC	include/clang-c/Index.h	/^  CXLanguage_ObjC,$/;"	e	enum:CXLanguageKind
CXLinkageKind	include/clang-c/Index.h	/^enum CXLinkageKind {$/;"	g
CXLinkage_External	include/clang-c/Index.h	/^  CXLinkage_External$/;"	e	enum:CXLinkageKind
CXLinkage_Internal	include/clang-c/Index.h	/^  CXLinkage_Internal,$/;"	e	enum:CXLinkageKind
CXLinkage_Invalid	include/clang-c/Index.h	/^  CXLinkage_Invalid,$/;"	e	enum:CXLinkageKind
CXLinkage_NoLinkage	include/clang-c/Index.h	/^  CXLinkage_NoLinkage,$/;"	e	enum:CXLinkageKind
CXLinkage_UniqueExternal	include/clang-c/Index.h	/^  CXLinkage_UniqueExternal,$/;"	e	enum:CXLinkageKind
CXLoadDiag_CannotLoad	include/clang-c/Index.h	/^  CXLoadDiag_CannotLoad = 2,$/;"	e	enum:CXLoadDiag_Error
CXLoadDiag_Error	include/clang-c/Index.h	/^enum CXLoadDiag_Error {$/;"	g
CXLoadDiag_InvalidFile	include/clang-c/Index.h	/^  CXLoadDiag_InvalidFile = 3$/;"	e	enum:CXLoadDiag_Error
CXLoadDiag_None	include/clang-c/Index.h	/^  CXLoadDiag_None = 0,$/;"	e	enum:CXLoadDiag_Error
CXLoadDiag_Unknown	include/clang-c/Index.h	/^  CXLoadDiag_Unknown = 1,$/;"	e	enum:CXLoadDiag_Error
CXNameRange_WantQualifier	include/clang-c/Index.h	/^  CXNameRange_WantQualifier = 0x1,$/;"	e	enum:CXNameRefFlags
CXNameRange_WantSinglePiece	include/clang-c/Index.h	/^  CXNameRange_WantSinglePiece = 0x4$/;"	e	enum:CXNameRefFlags
CXNameRange_WantTemplateArgs	include/clang-c/Index.h	/^  CXNameRange_WantTemplateArgs = 0x2,$/;"	e	enum:CXNameRefFlags
CXNameRefFlags	include/clang-c/Index.h	/^enum CXNameRefFlags {$/;"	g
CXRemapping	include/clang-c/Index.h	/^typedef void *CXRemapping;$/;"	t
CXReparse_Flags	include/clang-c/Index.h	/^enum CXReparse_Flags {$/;"	g
CXReparse_None	include/clang-c/Index.h	/^  CXReparse_None = 0x0$/;"	e	enum:CXReparse_Flags
CXSaveError	include/clang-c/Index.h	/^enum CXSaveError {$/;"	g
CXSaveError_InvalidTU	include/clang-c/Index.h	/^  CXSaveError_InvalidTU = 3$/;"	e	enum:CXSaveError
CXSaveError_None	include/clang-c/Index.h	/^  CXSaveError_None = 0,$/;"	e	enum:CXSaveError
CXSaveError_TranslationErrors	include/clang-c/Index.h	/^  CXSaveError_TranslationErrors = 2,$/;"	e	enum:CXSaveError
CXSaveError_Unknown	include/clang-c/Index.h	/^  CXSaveError_Unknown = 1,$/;"	e	enum:CXSaveError
CXSaveTranslationUnit_Flags	include/clang-c/Index.h	/^enum CXSaveTranslationUnit_Flags {$/;"	g
CXSaveTranslationUnit_None	include/clang-c/Index.h	/^  CXSaveTranslationUnit_None = 0x0$/;"	e	enum:CXSaveTranslationUnit_Flags
CXSourceLocation	include/clang-c/Index.h	/^} CXSourceLocation;$/;"	t	typeref:struct:__anon3
CXSourceRange	include/clang-c/Index.h	/^} CXSourceRange;$/;"	t	typeref:struct:__anon4
CXString	include/clang-c/Index.h	/^} CXString;$/;"	t	typeref:struct:__anon1
CXTUResourceUsage	include/clang-c/Index.h	/^typedef struct CXTUResourceUsage {$/;"	s
CXTUResourceUsage	include/clang-c/Index.h	/^} CXTUResourceUsage;$/;"	t	typeref:struct:CXTUResourceUsage
CXTUResourceUsageEntry	include/clang-c/Index.h	/^typedef struct CXTUResourceUsageEntry {$/;"	s
CXTUResourceUsageEntry	include/clang-c/Index.h	/^} CXTUResourceUsageEntry;$/;"	t	typeref:struct:CXTUResourceUsageEntry
CXTUResourceUsageKind	include/clang-c/Index.h	/^enum CXTUResourceUsageKind {$/;"	g
CXTUResourceUsage_AST	include/clang-c/Index.h	/^  CXTUResourceUsage_AST = 1,$/;"	e	enum:CXTUResourceUsageKind
CXTUResourceUsage_AST_SideTables	include/clang-c/Index.h	/^  CXTUResourceUsage_AST_SideTables = 6,$/;"	e	enum:CXTUResourceUsageKind
CXTUResourceUsage_ExternalASTSource_Membuffer_MMap	include/clang-c/Index.h	/^  CXTUResourceUsage_ExternalASTSource_Membuffer_MMap = 10, $/;"	e	enum:CXTUResourceUsageKind
CXTUResourceUsage_ExternalASTSource_Membuffer_Malloc	include/clang-c/Index.h	/^  CXTUResourceUsage_ExternalASTSource_Membuffer_Malloc = 9, $/;"	e	enum:CXTUResourceUsageKind
CXTUResourceUsage_First	include/clang-c/Index.h	/^  CXTUResourceUsage_First = CXTUResourceUsage_AST,$/;"	e	enum:CXTUResourceUsageKind
CXTUResourceUsage_GlobalCompletionResults	include/clang-c/Index.h	/^  CXTUResourceUsage_GlobalCompletionResults = 4,$/;"	e	enum:CXTUResourceUsageKind
CXTUResourceUsage_Identifiers	include/clang-c/Index.h	/^  CXTUResourceUsage_Identifiers = 2,$/;"	e	enum:CXTUResourceUsageKind
CXTUResourceUsage_Last	include/clang-c/Index.h	/^  CXTUResourceUsage_Last = CXTUResourceUsage_Preprocessor_HeaderSearch$/;"	e	enum:CXTUResourceUsageKind
CXTUResourceUsage_MEMORY_IN_BYTES_BEGIN	include/clang-c/Index.h	/^  CXTUResourceUsage_MEMORY_IN_BYTES_BEGIN = CXTUResourceUsage_AST,$/;"	e	enum:CXTUResourceUsageKind
CXTUResourceUsage_MEMORY_IN_BYTES_END	include/clang-c/Index.h	/^  CXTUResourceUsage_MEMORY_IN_BYTES_END =$/;"	e	enum:CXTUResourceUsageKind
CXTUResourceUsage_PreprocessingRecord	include/clang-c/Index.h	/^  CXTUResourceUsage_PreprocessingRecord = 12,$/;"	e	enum:CXTUResourceUsageKind
CXTUResourceUsage_Preprocessor	include/clang-c/Index.h	/^  CXTUResourceUsage_Preprocessor = 11,$/;"	e	enum:CXTUResourceUsageKind
CXTUResourceUsage_Preprocessor_HeaderSearch	include/clang-c/Index.h	/^  CXTUResourceUsage_Preprocessor_HeaderSearch = 14,$/;"	e	enum:CXTUResourceUsageKind
CXTUResourceUsage_Selectors	include/clang-c/Index.h	/^  CXTUResourceUsage_Selectors = 3,$/;"	e	enum:CXTUResourceUsageKind
CXTUResourceUsage_SourceManagerContentCache	include/clang-c/Index.h	/^  CXTUResourceUsage_SourceManagerContentCache = 5,$/;"	e	enum:CXTUResourceUsageKind
CXTUResourceUsage_SourceManager_DataStructures	include/clang-c/Index.h	/^  CXTUResourceUsage_SourceManager_DataStructures = 13,$/;"	e	enum:CXTUResourceUsageKind
CXTUResourceUsage_SourceManager_Membuffer_MMap	include/clang-c/Index.h	/^  CXTUResourceUsage_SourceManager_Membuffer_MMap = 8,$/;"	e	enum:CXTUResourceUsageKind
CXTUResourceUsage_SourceManager_Membuffer_Malloc	include/clang-c/Index.h	/^  CXTUResourceUsage_SourceManager_Membuffer_Malloc = 7,$/;"	e	enum:CXTUResourceUsageKind
CXToken	include/clang-c/Index.h	/^} CXToken;$/;"	t	typeref:struct:__anon7
CXTokenKind	include/clang-c/Index.h	/^typedef enum CXTokenKind {$/;"	g
CXTokenKind	include/clang-c/Index.h	/^} CXTokenKind;$/;"	t	typeref:enum:CXTokenKind
CXToken_Comment	include/clang-c/Index.h	/^  CXToken_Comment$/;"	e	enum:CXTokenKind
CXToken_Identifier	include/clang-c/Index.h	/^  CXToken_Identifier,$/;"	e	enum:CXTokenKind
CXToken_Keyword	include/clang-c/Index.h	/^  CXToken_Keyword,$/;"	e	enum:CXTokenKind
CXToken_Literal	include/clang-c/Index.h	/^  CXToken_Literal,$/;"	e	enum:CXTokenKind
CXToken_Punctuation	include/clang-c/Index.h	/^  CXToken_Punctuation,$/;"	e	enum:CXTokenKind
CXTranslationUnit	include/clang-c/Index.h	/^typedef struct CXTranslationUnitImpl *CXTranslationUnit;$/;"	t	typeref:struct:CXTranslationUnitImpl
CXTranslationUnit_CXXChainedPCH	include/clang-c/Index.h	/^  CXTranslationUnit_CXXChainedPCH = 0x20,$/;"	e	enum:CXTranslationUnit_Flags
CXTranslationUnit_CXXPrecompiledPreamble	include/clang-c/Index.h	/^  CXTranslationUnit_CXXPrecompiledPreamble = 0x10,$/;"	e	enum:CXTranslationUnit_Flags
CXTranslationUnit_CacheCompletionResults	include/clang-c/Index.h	/^  CXTranslationUnit_CacheCompletionResults = 0x08,$/;"	e	enum:CXTranslationUnit_Flags
CXTranslationUnit_DetailedPreprocessingRecord	include/clang-c/Index.h	/^  CXTranslationUnit_DetailedPreprocessingRecord = 0x01,$/;"	e	enum:CXTranslationUnit_Flags
CXTranslationUnit_Flags	include/clang-c/Index.h	/^enum CXTranslationUnit_Flags {$/;"	g
CXTranslationUnit_Incomplete	include/clang-c/Index.h	/^  CXTranslationUnit_Incomplete = 0x02,$/;"	e	enum:CXTranslationUnit_Flags
CXTranslationUnit_None	include/clang-c/Index.h	/^  CXTranslationUnit_None = 0x0,$/;"	e	enum:CXTranslationUnit_Flags
CXTranslationUnit_PrecompiledPreamble	include/clang-c/Index.h	/^  CXTranslationUnit_PrecompiledPreamble = 0x04,$/;"	e	enum:CXTranslationUnit_Flags
CXTranslationUnit_SkipFunctionBodies	include/clang-c/Index.h	/^  CXTranslationUnit_SkipFunctionBodies = 0x40$/;"	e	enum:CXTranslationUnit_Flags
CXType	include/clang-c/Index.h	/^} CXType;$/;"	t	typeref:struct:__anon6
CXTypeKind	include/clang-c/Index.h	/^enum CXTypeKind {$/;"	g
CXType_BlockPointer	include/clang-c/Index.h	/^  CXType_BlockPointer = 102,$/;"	e	enum:CXTypeKind
CXType_Bool	include/clang-c/Index.h	/^  CXType_Bool = 3,$/;"	e	enum:CXTypeKind
CXType_Char16	include/clang-c/Index.h	/^  CXType_Char16 = 6,$/;"	e	enum:CXTypeKind
CXType_Char32	include/clang-c/Index.h	/^  CXType_Char32 = 7,$/;"	e	enum:CXTypeKind
CXType_Char_S	include/clang-c/Index.h	/^  CXType_Char_S = 13,$/;"	e	enum:CXTypeKind
CXType_Char_U	include/clang-c/Index.h	/^  CXType_Char_U = 4,$/;"	e	enum:CXTypeKind
CXType_Complex	include/clang-c/Index.h	/^  CXType_Complex = 100,$/;"	e	enum:CXTypeKind
CXType_ConstantArray	include/clang-c/Index.h	/^  CXType_ConstantArray = 112,$/;"	e	enum:CXTypeKind
CXType_Dependent	include/clang-c/Index.h	/^  CXType_Dependent = 26,$/;"	e	enum:CXTypeKind
CXType_Double	include/clang-c/Index.h	/^  CXType_Double = 22,$/;"	e	enum:CXTypeKind
CXType_Enum	include/clang-c/Index.h	/^  CXType_Enum = 106,$/;"	e	enum:CXTypeKind
CXType_FirstBuiltin	include/clang-c/Index.h	/^  CXType_FirstBuiltin = CXType_Void,$/;"	e	enum:CXTypeKind
CXType_Float	include/clang-c/Index.h	/^  CXType_Float = 21,$/;"	e	enum:CXTypeKind
CXType_FunctionNoProto	include/clang-c/Index.h	/^  CXType_FunctionNoProto = 110,$/;"	e	enum:CXTypeKind
CXType_FunctionProto	include/clang-c/Index.h	/^  CXType_FunctionProto = 111,$/;"	e	enum:CXTypeKind
CXType_Int	include/clang-c/Index.h	/^  CXType_Int = 17,$/;"	e	enum:CXTypeKind
CXType_Int128	include/clang-c/Index.h	/^  CXType_Int128 = 20,$/;"	e	enum:CXTypeKind
CXType_Invalid	include/clang-c/Index.h	/^  CXType_Invalid = 0,$/;"	e	enum:CXTypeKind
CXType_LValueReference	include/clang-c/Index.h	/^  CXType_LValueReference = 103,$/;"	e	enum:CXTypeKind
CXType_LastBuiltin	include/clang-c/Index.h	/^  CXType_LastBuiltin  = CXType_ObjCSel,$/;"	e	enum:CXTypeKind
CXType_Long	include/clang-c/Index.h	/^  CXType_Long = 18,$/;"	e	enum:CXTypeKind
CXType_LongDouble	include/clang-c/Index.h	/^  CXType_LongDouble = 23,$/;"	e	enum:CXTypeKind
CXType_LongLong	include/clang-c/Index.h	/^  CXType_LongLong = 19,$/;"	e	enum:CXTypeKind
CXType_NullPtr	include/clang-c/Index.h	/^  CXType_NullPtr = 24,$/;"	e	enum:CXTypeKind
CXType_ObjCClass	include/clang-c/Index.h	/^  CXType_ObjCClass = 28,$/;"	e	enum:CXTypeKind
CXType_ObjCId	include/clang-c/Index.h	/^  CXType_ObjCId = 27,$/;"	e	enum:CXTypeKind
CXType_ObjCInterface	include/clang-c/Index.h	/^  CXType_ObjCInterface = 108,$/;"	e	enum:CXTypeKind
CXType_ObjCObjectPointer	include/clang-c/Index.h	/^  CXType_ObjCObjectPointer = 109,$/;"	e	enum:CXTypeKind
CXType_ObjCSel	include/clang-c/Index.h	/^  CXType_ObjCSel = 29,$/;"	e	enum:CXTypeKind
CXType_Overload	include/clang-c/Index.h	/^  CXType_Overload = 25,$/;"	e	enum:CXTypeKind
CXType_Pointer	include/clang-c/Index.h	/^  CXType_Pointer = 101,$/;"	e	enum:CXTypeKind
CXType_RValueReference	include/clang-c/Index.h	/^  CXType_RValueReference = 104,$/;"	e	enum:CXTypeKind
CXType_Record	include/clang-c/Index.h	/^  CXType_Record = 105,$/;"	e	enum:CXTypeKind
CXType_SChar	include/clang-c/Index.h	/^  CXType_SChar = 14,$/;"	e	enum:CXTypeKind
CXType_Short	include/clang-c/Index.h	/^  CXType_Short = 16,$/;"	e	enum:CXTypeKind
CXType_Typedef	include/clang-c/Index.h	/^  CXType_Typedef = 107,$/;"	e	enum:CXTypeKind
CXType_UChar	include/clang-c/Index.h	/^  CXType_UChar = 5,$/;"	e	enum:CXTypeKind
CXType_UInt	include/clang-c/Index.h	/^  CXType_UInt = 9,$/;"	e	enum:CXTypeKind
CXType_UInt128	include/clang-c/Index.h	/^  CXType_UInt128 = 12,$/;"	e	enum:CXTypeKind
CXType_ULong	include/clang-c/Index.h	/^  CXType_ULong = 10,$/;"	e	enum:CXTypeKind
CXType_ULongLong	include/clang-c/Index.h	/^  CXType_ULongLong = 11,$/;"	e	enum:CXTypeKind
CXType_UShort	include/clang-c/Index.h	/^  CXType_UShort = 8,$/;"	e	enum:CXTypeKind
CXType_Unexposed	include/clang-c/Index.h	/^  CXType_Unexposed = 1,$/;"	e	enum:CXTypeKind
CXType_Vector	include/clang-c/Index.h	/^  CXType_Vector = 113$/;"	e	enum:CXTypeKind
CXType_Void	include/clang-c/Index.h	/^  CXType_Void = 2,$/;"	e	enum:CXTypeKind
CXType_WChar	include/clang-c/Index.h	/^  CXType_WChar = 15,$/;"	e	enum:CXTypeKind
CXUnsavedFile	include/clang-c/Index.h	/^struct CXUnsavedFile {$/;"	s
CXVisit_Break	include/clang-c/Index.h	/^  CXVisit_Break,$/;"	e	enum:CXVisitorResult
CXVisit_Continue	include/clang-c/Index.h	/^  CXVisit_Continue$/;"	e	enum:CXVisitorResult
CXVisitorResult	include/clang-c/Index.h	/^enum CXVisitorResult {$/;"	g
CX_CXXAccessSpecifier	include/clang-c/Index.h	/^enum CX_CXXAccessSpecifier {$/;"	g
CX_CXXInvalidAccessSpecifier	include/clang-c/Index.h	/^  CX_CXXInvalidAccessSpecifier,$/;"	e	enum:CX_CXXAccessSpecifier
CX_CXXPrivate	include/clang-c/Index.h	/^  CX_CXXPrivate$/;"	e	enum:CX_CXXAccessSpecifier
CX_CXXProtected	include/clang-c/Index.h	/^  CX_CXXProtected,$/;"	e	enum:CX_CXXAccessSpecifier
CX_CXXPublic	include/clang-c/Index.h	/^  CX_CXXPublic,$/;"	e	enum:CX_CXXAccessSpecifier
CompletionString	include/clang-c/Index.h	/^  CXCompletionString CompletionString;$/;"	m	struct:__anon8
Contents	include/clang-c/Index.h	/^  const char *Contents;$/;"	m	struct:CXUnsavedFile
CurrASTUnit	mutation/ASTUnit.c	/^static ASTUnit * CurrASTUnit = NULL;$/;"	v	file:
CurrFunc	mutation/ASTUnit.c	/^static CXCursor * CurrFunc = NULL;$/;"	v	file:
CurrNode	mutation/ASTUnit.c	/^static CXCursor * CurrNode = NULL;$/;"	v	file:
CurrTU	mutation/ASTUnit.c	/^static CXTranslationUnit * CurrTU  = NULL;$/;"	v	file:
CursorKind	include/clang-c/Index.h	/^  enum CXCursorKind CursorKind;$/;"	m	struct:__anon8	typeref:enum:__anon8::CXCursorKind
DataTypes	mutation/ASTUnit.c	/^static GPtrArray * DataTypes = NULL;$/;"	v	file:
Filename	include/clang-c/Index.h	/^  const char *Filename;$/;"	m	struct:CXUnsavedFile
FuncLists	mutation/ASTUnit.c	/^static GPtrArray * FuncLists = NULL;$/;"	v	file:
IndexerCallbacks	include/clang-c/Index.h	/^} IndexerCallbacks;$/;"	t	typeref:struct:__anon34
Length	include/clang-c/Index.h	/^  unsigned long Length;$/;"	m	struct:CXUnsavedFile
MENU_H_	include/Options.h	31;"	d
MILU3_H_	include/Milu3.h	31;"	d
MILU_AUSTIN_TRANSFORM	mutation/Options.c	/^gboolean MILU_AUSTIN_TRANSFORM = FALSE;$/;"	v
MILU_COMPILE_CMD	mutation/Options.c	/^static gchar * MILU_COMPILE_CMD=NULL;$/;"	v	file:
MILU_DEBUG	mutation/Options.c	/^static gchar * MILU_DEBUG = NULL;$/;"	v	file:
MILU_EXEC_STRATEGY	mutation/Options.c	/^static gchar * MILU_EXEC_STRATEGY = NULL;$/;"	v	file:
MILU_FUNC_LIST_PATH	mutation/Options.c	/^static gchar * MILU_FUNC_LIST_PATH = NULL;$/;"	v	file:
MILU_FUNC_NAME	mutation/Options.c	/^static gchar * MILU_FUNC_NAME= NULL;$/;"	v	file:
MILU_GLOBAL_VERBOSE	mutation/Options.c	/^gboolean MILU_GLOBAL_VERBOSE = FALSE;$/;"	v
MILU_HTML_SAVE_ALL_MUT	mutation/Options.c	/^static gboolean MILU_HTML_SAVE_ALL_MUT = FALSE;$/;"	v	file:
MILU_HTML_VIEW	mutation/Options.c	/^static gboolean MILU_HTML_VIEW = FALSE;$/;"	v	file:
MILU_KILLING_RESULT	mutation/Options.c	/^gboolean MILU_KILLING_RESULT= FALSE;$/;"	v
MILU_MID_PATH	mutation/Options.c	/^static gchar * MILU_MID_PATH = NULL;$/;"	v	file:
MILU_MUTANT_ORDER	mutation/Options.c	/^static gint MILU_MUTANT_ORDER = 1;$/;"	v	file:
MILU_MUTANT_ORDER_BEGIN	mutation/Options.c	/^static gint MILU_MUTANT_ORDER_BEGIN = -1;$/;"	v	file:
MILU_MUTANT_ORDER_END	mutation/Options.c	/^static gint MILU_MUTANT_ORDER_END = -1;$/;"	v	file:
MILU_MUTANT_RAND_LIMIT	mutation/Options.c	/^static gint MILU_MUTANT_RAND_LIMIT = 1000;$/;"	v	file:
MILU_MUTANT_STRATEGY	mutation/Options.c	/^static gchar * MILU_MUTANT_STRATEGY = NULL;$/;"	v	file:
MILU_MUT_OPERATORS_PATH	mutation/Options.c	/^static gchar * MILU_MUT_OPERATORS_PATH=NULL;$/;"	v	file:
MILU_NOT_SAVE_MUT	mutation/Options.c	/^gboolean MILU_NOT_SAVE_MUT = FALSE;$/;"	v
MILU_OUPUT_PATH	mutation/Options.c	/^static gchar * MILU_OUPUT_PATH=NULL;$/;"	v	file:
MILU_PRINT_MUT_TYPE	mutation/Options.c	/^gboolean MILU_PRINT_MUT_TYPE= FALSE;$/;"	v
MILU_SAVE_KILLING_RESULT	mutation/Options.c	/^gboolean MILU_SAVE_KILLING_RESULT = FALSE;$/;"	v
MILU_SAVE_MID	mutation/Options.c	/^static gboolean MILU_SAVE_MID = FALSE;$/;"	v	file:
MILU_SEARCH_STRATEGY	mutation/Options.c	/^static gchar * MILU_SEARCH_STRATEGY = NULL;$/;"	v	file:
MILU_SRC_PATH	mutation/Options.c	/^static gchar * MILU_SRC_PATH = NULL;$/;"	v	file:
MILU_STRING_POOL_SIZE	include/Utility.h	48;"	d
MILU_TAG_LIST_PATH	mutation/Options.c	/^static gchar * MILU_TAG_LIST_PATH = NULL;$/;"	v	file:
MILU_TCE_OPTIMISATION	mutation/Options.c	/^gboolean MILU_TCE_OPTIMISATION= FALSE;$/;"	v
MILU_TEST_DRIVER_PATH	mutation/Options.c	/^static gchar * MILU_TEST_DRIVER_PATH=NULL;$/;"	v	file:
MILU_TEST_INPUT_PATH	mutation/Options.c	/^static gchar * MILU_TEST_INPUT_PATH=NULL;$/;"	v	file:
MILU_UNIT_TEST	mutation/Options.c	/^gboolean MILU_UNIT_TEST = FALSE;$/;"	v
MP_NUM	mutation/Options.c	/^static gint MP_NUM = -1;$/;"	v	file:
MULTIPROCESSING_H_	include/MultiProcessing.h	31;"	d
MUTANTEXECUTION_H_	include/MutantExecutor.h	31;"	d
MUTANT_H_	include/Mutant.h	31;"	d
MUTANT_RESULT_KILL	mutation/Mutant.c	/^guint8 MUTANT_RESULT_KILL= 1;$/;"	v
MUTANT_RESULT_NOT_KILL	mutation/Mutant.c	/^guint8 MUTANT_RESULT_NOT_KILL= 0;$/;"	v
MUTATIONOPERATORS_H_	include/MutationOperator.h	30;"	d
MUTATIONTEMPLATEID_H_	include/MutationId.h	35;"	d
MUTATIONTEMPLATE_H_	include/MutationTemplate.h	35;"	d
MUTATOR_H_	include/Mutator.h	31;"	d
MiluASTUnit	include/ASTUnit.h	/^struct MiluASTUnit$/;"	s
MiluGRand	mutation/Utility.c	/^GRand * MiluGRand;$/;"	v
MiluMultiProcess	include/MultiProcessing.h	/^enum MiluMultiProcess$/;"	g
MiluMutant	include/Mutant.h	/^struct MiluMutant$/;"	s
MiluMutationOperator	include/MutationOperator.h	/^struct MiluMutationOperator$/;"	s
MiluMutator	include/Mutator.h	/^struct MiluMutator$/;"	s
MiluPrintMode	include/Utility.h	/^enum MiluPrintMode$/;"	g
MiluProject	include/Project.h	/^struct MiluProject$/;"	s
MiluRandomMutantsTrialTimes	mutation/Utility.c	/^gint MiluRandomMutantsTrialTimes = 1000000;$/;"	v
MiluStringPool	mutation/Utility.c	/^GStringChunk *   MiluStringPool;$/;"	v
Milu_MuliProcess	mutation/MultiProcessing.c	/^static MultiProcess Milu_MuliProcess = MultiProcessNo;$/;"	v	file:
MultiProcess	include/MultiProcessing.h	/^typedef enum MiluMultiProcess MultiProcess;$/;"	t	typeref:enum:MiluMultiProcess
MultiProcessEight	include/MultiProcessing.h	/^    MultiProcessEight = 8, \/**< Run mutants using eight additional processes in parallel. *\/$/;"	e	enum:MiluMultiProcess
MultiProcessFour	include/MultiProcessing.h	/^    MultiProcessFour = 4, \/**< Run mutants using sour additional processes in parallel. *\/$/;"	e	enum:MiluMultiProcess
MultiProcessNo	include/MultiProcessing.h	/^    MultiProcessNo = 0, \/**< Run mutants using the same process as Milu.  *\/$/;"	e	enum:MiluMultiProcess
MultiProcessOne	include/MultiProcessing.h	/^    MultiProcessOne = 1, \/**< Run mutants using one additional process in parallel. *\/$/;"	e	enum:MiluMultiProcess
MultiProcessResearchEight	include/MultiProcessing.h	/^    MultiProcessResearchEight = 80$/;"	e	enum:MiluMultiProcess
MultiProcessSix	include/MultiProcessing.h	/^    MultiProcessSix = 6, \/**< Run mutants using six additional processes in parallel. *\/$/;"	e	enum:MiluMultiProcess
MultiProcessTwo	include/MultiProcessing.h	/^    MultiProcessTwo = 2, \/**< Run mutants using two additional processes in parallel. *\/$/;"	e	enum:MiluMultiProcess
MultiProcessingMutantsFunc	include/MultiProcessing.h	/^typedef void (*MultiProcessingMutantsFunc)(GPtrArray *) ;$/;"	t
Mutant	include/Mutant.h	/^typedef struct MiluMutant Mutant;$/;"	t	typeref:struct:MiluMutant
MutantExecutionStrategy	include/MutantExecutor.h	/^typedef void (*MutantExecutionStrategy)(GPtrArray * mutants , Mutant *std, GPtrArray * tests) ;$/;"	t
MutationCompactId	include/MutationId.h	/^typedef GArray MutationCompactId;$/;"	t
MutationExecutionStrategyType	include/MutantExecutor.h	/^enum MutationExecutionStrategyType$/;"	g
MutationId	include/MutationId.h	/^typedef GArray MutationId;$/;"	t
MutationNumTemplate	include/MutationTemplate.h	/^typedef GArray MutationNumTemplate;$/;"	t
MutationTemplate	include/MutationTemplate.h	/^typedef GPtrArray MutationTemplate;$/;"	t
Mutator	include/Mutator.h	/^typedef struct MiluMutator Mutator;$/;"	t	typeref:struct:MiluMutator
MutatorClean	include/Mutator.h	/^typedef gboolean (*MutatorClean)(ASTNode * , gint) ;$/;"	t
MutatorMutate	include/Mutator.h	/^typedef gboolean (*MutatorMutate)(ASTNode * , gint) ;$/;"	t
MutatorNodeChecking	include/Mutator.h	/^typedef gboolean (*MutatorNodeChecking)(ASTNode * ) ;$/;"	t
NODE_H_	include/ASTNode.h	31;"	d
NodeKind	include/ASTNode.h	/^typedef enum ASTNodeKind NodeKind;$/;"	t	typeref:enum:ASTNodeKind
NodeKind_AddrLabelExpr	include/ASTNode.h	/^  NodeKind_AddrLabelExpr                 = 120,$/;"	e	enum:ASTNodeKind
NodeKind_AnnotateAttr	include/ASTNode.h	/^  NodeKind_AnnotateAttr                  = 406,$/;"	e	enum:ASTNodeKind
NodeKind_ArraySubscriptExpr	include/ASTNode.h	/^  NodeKind_ArraySubscriptExpr            = 113,$/;"	e	enum:ASTNodeKind
NodeKind_AsmLabelAttr	include/ASTNode.h	/^  NodeKind_AsmLabelAttr						= 407,$/;"	e	enum:ASTNodeKind
NodeKind_AsmStmt	include/ASTNode.h	/^  NodeKind_AsmStmt                       = 215,$/;"	e	enum:ASTNodeKind
NodeKind_BinaryOperator	include/ASTNode.h	/^  NodeKind_BinaryOperator                = 114,$/;"	e	enum:ASTNodeKind
NodeKind_BlockExpr	include/ASTNode.h	/^  NodeKind_BlockExpr                     = 105,$/;"	e	enum:ASTNodeKind
NodeKind_BreakStmt	include/ASTNode.h	/^  NodeKind_BreakStmt                     = 213,$/;"	e	enum:ASTNodeKind
NodeKind_CStyleCastExpr	include/ASTNode.h	/^  NodeKind_CStyleCastExpr                = 117,$/;"	e	enum:ASTNodeKind
NodeKind_CXXAccessSpecifier	include/ASTNode.h	/^  NodeKind_CXXAccessSpecifier            = 39,$/;"	e	enum:ASTNodeKind
NodeKind_CXXBaseSpecifier	include/ASTNode.h	/^  NodeKind_CXXBaseSpecifier              = 44,$/;"	e	enum:ASTNodeKind
NodeKind_CXXBoolLiteralExpr	include/ASTNode.h	/^  NodeKind_CXXBoolLiteralExpr            = 130,$/;"	e	enum:ASTNodeKind
NodeKind_CXXCatchStmt	include/ASTNode.h	/^  NodeKind_CXXCatchStmt                  = 223,$/;"	e	enum:ASTNodeKind
NodeKind_CXXConstCastExpr	include/ASTNode.h	/^  NodeKind_CXXConstCastExpr              = 127,$/;"	e	enum:ASTNodeKind
NodeKind_CXXDeleteExpr	include/ASTNode.h	/^  NodeKind_CXXDeleteExpr                 = 135,$/;"	e	enum:ASTNodeKind
NodeKind_CXXDynamicCastExpr	include/ASTNode.h	/^  NodeKind_CXXDynamicCastExpr            = 125,$/;"	e	enum:ASTNodeKind
NodeKind_CXXFinalAttr	include/ASTNode.h	/^  NodeKind_CXXFinalAttr                  = 404,$/;"	e	enum:ASTNodeKind
NodeKind_CXXForRangeStmt	include/ASTNode.h	/^  NodeKind_CXXForRangeStmt               = 225,$/;"	e	enum:ASTNodeKind
NodeKind_CXXFunctionalCastExpr	include/ASTNode.h	/^  NodeKind_CXXFunctionalCastExpr         = 128,$/;"	e	enum:ASTNodeKind
NodeKind_CXXMethod	include/ASTNode.h	/^  NodeKind_CXXMethod                     = 21,$/;"	e	enum:ASTNodeKind
NodeKind_CXXNewExpr	include/ASTNode.h	/^  NodeKind_CXXNewExpr                    = 134,$/;"	e	enum:ASTNodeKind
NodeKind_CXXNullPtrLiteralExpr	include/ASTNode.h	/^  NodeKind_CXXNullPtrLiteralExpr         = 131,$/;"	e	enum:ASTNodeKind
NodeKind_CXXOverrideAttr	include/ASTNode.h	/^  NodeKind_CXXOverrideAttr               = 405,$/;"	e	enum:ASTNodeKind
NodeKind_CXXReinterpretCastExpr	include/ASTNode.h	/^  NodeKind_CXXReinterpretCastExpr        = 126,$/;"	e	enum:ASTNodeKind
NodeKind_CXXStaticCastExpr	include/ASTNode.h	/^  NodeKind_CXXStaticCastExpr             = 124,$/;"	e	enum:ASTNodeKind
NodeKind_CXXThisExpr	include/ASTNode.h	/^  NodeKind_CXXThisExpr                   = 132,$/;"	e	enum:ASTNodeKind
NodeKind_CXXThrowExpr	include/ASTNode.h	/^  NodeKind_CXXThrowExpr                  = 133,$/;"	e	enum:ASTNodeKind
NodeKind_CXXTryStmt	include/ASTNode.h	/^  NodeKind_CXXTryStmt                    = 224,$/;"	e	enum:ASTNodeKind
NodeKind_CXXTypeidExpr	include/ASTNode.h	/^  NodeKind_CXXTypeidExpr                 = 129,$/;"	e	enum:ASTNodeKind
NodeKind_CallExpr	include/ASTNode.h	/^  NodeKind_CallExpr                      = 103,$/;"	e	enum:ASTNodeKind
NodeKind_CaseStmt	include/ASTNode.h	/^  NodeKind_CaseStmt                      = 203,$/;"	e	enum:ASTNodeKind
NodeKind_CharacterLiteral	include/ASTNode.h	/^  NodeKind_CharacterLiteral              = 110,$/;"	e	enum:ASTNodeKind
NodeKind_ClassDecl	include/ASTNode.h	/^  NodeKind_ClassDecl                     = 4,$/;"	e	enum:ASTNodeKind
NodeKind_ClassTemplate	include/ASTNode.h	/^  NodeKind_ClassTemplate                 = 31,$/;"	e	enum:ASTNodeKind
NodeKind_ClassTemplatePartialSpecialization	include/ASTNode.h	/^  NodeKind_ClassTemplatePartialSpecialization = 32,$/;"	e	enum:ASTNodeKind
NodeKind_CompoundAssignOperator	include/ASTNode.h	/^  NodeKind_CompoundAssignOperator        = 115,$/;"	e	enum:ASTNodeKind
NodeKind_CompoundLiteralExpr	include/ASTNode.h	/^  NodeKind_CompoundLiteralExpr           = 118,$/;"	e	enum:ASTNodeKind
NodeKind_CompoundStmt	include/ASTNode.h	/^  NodeKind_CompoundStmt                  = 202,$/;"	e	enum:ASTNodeKind
NodeKind_ConditionalOperator	include/ASTNode.h	/^  NodeKind_ConditionalOperator           = 116,$/;"	e	enum:ASTNodeKind
NodeKind_Constructor	include/ASTNode.h	/^  NodeKind_Constructor                   = 24,$/;"	e	enum:ASTNodeKind
NodeKind_ContinueStmt	include/ASTNode.h	/^  NodeKind_ContinueStmt                  = 212,$/;"	e	enum:ASTNodeKind
NodeKind_ConversionFunction	include/ASTNode.h	/^  NodeKind_ConversionFunction            = 26,$/;"	e	enum:ASTNodeKind
NodeKind_DeclRefExpr	include/ASTNode.h	/^  NodeKind_DeclRefExpr                   = 101,$/;"	e	enum:ASTNodeKind
NodeKind_DeclStmt	include/ASTNode.h	/^  NodeKind_DeclStmt                      = 231,$/;"	e	enum:ASTNodeKind
NodeKind_DefaultStmt	include/ASTNode.h	/^  NodeKind_DefaultStmt                   = 204,$/;"	e	enum:ASTNodeKind
NodeKind_Destructor	include/ASTNode.h	/^  NodeKind_Destructor                    = 25,$/;"	e	enum:ASTNodeKind
NodeKind_DoStmt	include/ASTNode.h	/^  NodeKind_DoStmt                        = 208,$/;"	e	enum:ASTNodeKind
NodeKind_EnumConstantDecl	include/ASTNode.h	/^  NodeKind_EnumConstantDecl              = 7,$/;"	e	enum:ASTNodeKind
NodeKind_EnumDecl	include/ASTNode.h	/^  NodeKind_EnumDecl                      = 5,$/;"	e	enum:ASTNodeKind
NodeKind_FieldDecl	include/ASTNode.h	/^  NodeKind_FieldDecl                     = 6,$/;"	e	enum:ASTNodeKind
NodeKind_FirstAttr	include/ASTNode.h	/^  NodeKind_FirstAttr                     = 400,$/;"	e	enum:ASTNodeKind
NodeKind_FirstDecl	include/ASTNode.h	/^  NodeKind_FirstDecl                     = NodeKind_UnexposedDecl,$/;"	e	enum:ASTNodeKind
NodeKind_FirstExpr	include/ASTNode.h	/^  NodeKind_FirstExpr                     = 100,$/;"	e	enum:ASTNodeKind
NodeKind_FirstInvalid	include/ASTNode.h	/^  NodeKind_FirstInvalid                  = 70,$/;"	e	enum:ASTNodeKind
NodeKind_FirstPreprocessing	include/ASTNode.h	/^  NodeKind_FirstPreprocessing            = NodeKind_PreprocessingDirective,$/;"	e	enum:ASTNodeKind
NodeKind_FirstRef	include/ASTNode.h	/^  NodeKind_FirstRef                      = 40, \/* Decl references *\/$/;"	e	enum:ASTNodeKind
NodeKind_FirstStmt	include/ASTNode.h	/^  NodeKind_FirstStmt                     = 200,$/;"	e	enum:ASTNodeKind
NodeKind_FloatingLiteral	include/ASTNode.h	/^  NodeKind_FloatingLiteral               = 107,$/;"	e	enum:ASTNodeKind
NodeKind_ForStmt	include/ASTNode.h	/^  NodeKind_ForStmt                       = 209,$/;"	e	enum:ASTNodeKind
NodeKind_FunctionDecl	include/ASTNode.h	/^  NodeKind_FunctionDecl                  = 8,$/;"	e	enum:ASTNodeKind
NodeKind_FunctionTemplate	include/ASTNode.h	/^  NodeKind_FunctionTemplate              = 30,$/;"	e	enum:ASTNodeKind
NodeKind_GNUNullExpr	include/ASTNode.h	/^  NodeKind_GNUNullExpr                   = 123,$/;"	e	enum:ASTNodeKind
NodeKind_GenericSelectionExpr	include/ASTNode.h	/^  NodeKind_GenericSelectionExpr          = 122,$/;"	e	enum:ASTNodeKind
NodeKind_GotoStmt	include/ASTNode.h	/^  NodeKind_GotoStmt                      = 210,$/;"	e	enum:ASTNodeKind
NodeKind_IBActionAttr	include/ASTNode.h	/^  NodeKind_IBActionAttr                  = 401,$/;"	e	enum:ASTNodeKind
NodeKind_IBOutletAttr	include/ASTNode.h	/^  NodeKind_IBOutletAttr                  = 402,$/;"	e	enum:ASTNodeKind
NodeKind_IBOutletCollectionAttr	include/ASTNode.h	/^  NodeKind_IBOutletCollectionAttr        = 403,$/;"	e	enum:ASTNodeKind
NodeKind_IfStmt	include/ASTNode.h	/^  NodeKind_IfStmt                        = 205,$/;"	e	enum:ASTNodeKind
NodeKind_ImaginaryLiteral	include/ASTNode.h	/^  NodeKind_ImaginaryLiteral              = 108,$/;"	e	enum:ASTNodeKind
NodeKind_InclusionDirective	include/ASTNode.h	/^  NodeKind_InclusionDirective            = 503,$/;"	e	enum:ASTNodeKind
NodeKind_IndirectGotoStmt	include/ASTNode.h	/^  NodeKind_IndirectGotoStmt              = 211,$/;"	e	enum:ASTNodeKind
NodeKind_InitListExpr	include/ASTNode.h	/^  NodeKind_InitListExpr                  = 119,$/;"	e	enum:ASTNodeKind
NodeKind_IntegerLiteral	include/ASTNode.h	/^  NodeKind_IntegerLiteral                = 106,$/;"	e	enum:ASTNodeKind
NodeKind_InvalidCode	include/ASTNode.h	/^  NodeKind_InvalidCode                   = 73,$/;"	e	enum:ASTNodeKind
NodeKind_InvalidFile	include/ASTNode.h	/^  NodeKind_InvalidFile                   = 70,$/;"	e	enum:ASTNodeKind
NodeKind_LabelRef	include/ASTNode.h	/^  NodeKind_LabelRef                      = 48,$/;"	e	enum:ASTNodeKind
NodeKind_LabelStmt	include/ASTNode.h	/^  NodeKind_LabelStmt                     = 201,$/;"	e	enum:ASTNodeKind
NodeKind_LastAttr	include/ASTNode.h	/^  NodeKind_LastAttr                      = NodeKind_AnnotateAttr,$/;"	e	enum:ASTNodeKind
NodeKind_LastDecl	include/ASTNode.h	/^  NodeKind_LastDecl                      = NodeKind_CXXAccessSpecifier,$/;"	e	enum:ASTNodeKind
NodeKind_LastExpr	include/ASTNode.h	/^  NodeKind_LastExpr                      = NodeKind_SizeOfPackExpr,$/;"	e	enum:ASTNodeKind
NodeKind_LastInvalid	include/ASTNode.h	/^  NodeKind_LastInvalid                   = NodeKind_InvalidCode,$/;"	e	enum:ASTNodeKind
NodeKind_LastPreprocessing	include/ASTNode.h	/^  NodeKind_LastPreprocessing             = NodeKind_InclusionDirective,$/;"	e	enum:ASTNodeKind
NodeKind_LastRef	include/ASTNode.h	/^  NodeKind_LastRef                       = NodeKind_OverloadedDeclRef,$/;"	e	enum:ASTNodeKind
NodeKind_LastStmt	include/ASTNode.h	/^  NodeKind_LastStmt                      = NodeKind_DeclStmt,$/;"	e	enum:ASTNodeKind
NodeKind_LinkageSpec	include/ASTNode.h	/^  NodeKind_LinkageSpec                   = 23,$/;"	e	enum:ASTNodeKind
NodeKind_MacroDefinition	include/ASTNode.h	/^  NodeKind_MacroDefinition               = 501,$/;"	e	enum:ASTNodeKind
NodeKind_MacroExpansion	include/ASTNode.h	/^  NodeKind_MacroExpansion                = 502,$/;"	e	enum:ASTNodeKind
NodeKind_MacroInstantiation	include/ASTNode.h	/^  NodeKind_MacroInstantiation            = NodeKind_MacroExpansion,$/;"	e	enum:ASTNodeKind
NodeKind_MemberRef	include/ASTNode.h	/^  NodeKind_MemberRef                     = 47,$/;"	e	enum:ASTNodeKind
NodeKind_MemberRefExpr	include/ASTNode.h	/^  NodeKind_MemberRefExpr                 = 102,$/;"	e	enum:ASTNodeKind
NodeKind_MiluSource	include/ASTNode.h	/^  NodeKind_MiluSource = 700,$/;"	e	enum:ASTNodeKind
NodeKind_MiluSourceFloat	include/ASTNode.h	/^  NodeKind_MiluSourceFloat= 703$/;"	e	enum:ASTNodeKind
NodeKind_MiluSourceInteger	include/ASTNode.h	/^  NodeKind_MiluSourceInteger = 701,$/;"	e	enum:ASTNodeKind
NodeKind_Namespace	include/ASTNode.h	/^  NodeKind_Namespace                     = 22,$/;"	e	enum:ASTNodeKind
NodeKind_NamespaceAlias	include/ASTNode.h	/^  NodeKind_NamespaceAlias                = 33,$/;"	e	enum:ASTNodeKind
NodeKind_NamespaceRef	include/ASTNode.h	/^  NodeKind_NamespaceRef                  = 46,$/;"	e	enum:ASTNodeKind
NodeKind_NoDeclFound	include/ASTNode.h	/^  NodeKind_NoDeclFound                   = 71,$/;"	e	enum:ASTNodeKind
NodeKind_NonTypeTemplateParameter	include/ASTNode.h	/^  NodeKind_NonTypeTemplateParameter      = 28,$/;"	e	enum:ASTNodeKind
NodeKind_NotImplemented	include/ASTNode.h	/^  NodeKind_NotImplemented                = 72,$/;"	e	enum:ASTNodeKind
NodeKind_NullStmt	include/ASTNode.h	/^  NodeKind_NullStmt                      = 230,$/;"	e	enum:ASTNodeKind
NodeKind_ObjCAtCatchStmt	include/ASTNode.h	/^  NodeKind_ObjCAtCatchStmt               = 217,$/;"	e	enum:ASTNodeKind
NodeKind_ObjCAtFinallyStmt	include/ASTNode.h	/^  NodeKind_ObjCAtFinallyStmt             = 218,$/;"	e	enum:ASTNodeKind
NodeKind_ObjCAtSynchronizedStmt	include/ASTNode.h	/^  NodeKind_ObjCAtSynchronizedStmt        = 220,$/;"	e	enum:ASTNodeKind
NodeKind_ObjCAtThrowStmt	include/ASTNode.h	/^  NodeKind_ObjCAtThrowStmt               = 219,$/;"	e	enum:ASTNodeKind
NodeKind_ObjCAtTryStmt	include/ASTNode.h	/^  NodeKind_ObjCAtTryStmt                 = 216,$/;"	e	enum:ASTNodeKind
NodeKind_ObjCAutoreleasePoolStmt	include/ASTNode.h	/^  NodeKind_ObjCAutoreleasePoolStmt       = 221,$/;"	e	enum:ASTNodeKind
NodeKind_ObjCBridgedCastExpr	include/ASTNode.h	/^  NodeKind_ObjCBridgedCastExpr           = 141,$/;"	e	enum:ASTNodeKind
NodeKind_ObjCCategoryDecl	include/ASTNode.h	/^  NodeKind_ObjCCategoryDecl              = 12,$/;"	e	enum:ASTNodeKind
NodeKind_ObjCCategoryImplDecl	include/ASTNode.h	/^  NodeKind_ObjCCategoryImplDecl          = 19,$/;"	e	enum:ASTNodeKind
NodeKind_ObjCClassMethodDecl	include/ASTNode.h	/^  NodeKind_ObjCClassMethodDecl           = 17,$/;"	e	enum:ASTNodeKind
NodeKind_ObjCClassRef	include/ASTNode.h	/^  NodeKind_ObjCClassRef                  = 42,$/;"	e	enum:ASTNodeKind
NodeKind_ObjCDynamicDecl	include/ASTNode.h	/^  NodeKind_ObjCDynamicDecl               = 38,$/;"	e	enum:ASTNodeKind
NodeKind_ObjCEncodeExpr	include/ASTNode.h	/^  NodeKind_ObjCEncodeExpr                = 138,$/;"	e	enum:ASTNodeKind
NodeKind_ObjCForCollectionStmt	include/ASTNode.h	/^  NodeKind_ObjCForCollectionStmt         = 222,$/;"	e	enum:ASTNodeKind
NodeKind_ObjCImplementationDecl	include/ASTNode.h	/^  NodeKind_ObjCImplementationDecl        = 18,$/;"	e	enum:ASTNodeKind
NodeKind_ObjCInstanceMethodDecl	include/ASTNode.h	/^  NodeKind_ObjCInstanceMethodDecl        = 16,$/;"	e	enum:ASTNodeKind
NodeKind_ObjCInterfaceDecl	include/ASTNode.h	/^  NodeKind_ObjCInterfaceDecl             = 11,$/;"	e	enum:ASTNodeKind
NodeKind_ObjCIvarDecl	include/ASTNode.h	/^  NodeKind_ObjCIvarDecl                  = 15,$/;"	e	enum:ASTNodeKind
NodeKind_ObjCMessageExpr	include/ASTNode.h	/^  NodeKind_ObjCMessageExpr               = 104,$/;"	e	enum:ASTNodeKind
NodeKind_ObjCPropertyDecl	include/ASTNode.h	/^  NodeKind_ObjCPropertyDecl              = 14,$/;"	e	enum:ASTNodeKind
NodeKind_ObjCProtocolDecl	include/ASTNode.h	/^  NodeKind_ObjCProtocolDecl              = 13,$/;"	e	enum:ASTNodeKind
NodeKind_ObjCProtocolExpr	include/ASTNode.h	/^  NodeKind_ObjCProtocolExpr              = 140,$/;"	e	enum:ASTNodeKind
NodeKind_ObjCProtocolRef	include/ASTNode.h	/^  NodeKind_ObjCProtocolRef               = 41,$/;"	e	enum:ASTNodeKind
NodeKind_ObjCSelectorExpr	include/ASTNode.h	/^  NodeKind_ObjCSelectorExpr              = 139,$/;"	e	enum:ASTNodeKind
NodeKind_ObjCStringLiteral	include/ASTNode.h	/^  NodeKind_ObjCStringLiteral             = 137,$/;"	e	enum:ASTNodeKind
NodeKind_ObjCSuperClassRef	include/ASTNode.h	/^  NodeKind_ObjCSuperClassRef             = 40,$/;"	e	enum:ASTNodeKind
NodeKind_ObjCSynthesizeDecl	include/ASTNode.h	/^  NodeKind_ObjCSynthesizeDecl            = 37,$/;"	e	enum:ASTNodeKind
NodeKind_OverloadedDeclRef	include/ASTNode.h	/^  NodeKind_OverloadedDeclRef             = 49,$/;"	e	enum:ASTNodeKind
NodeKind_PackExpansionExpr	include/ASTNode.h	/^  NodeKind_PackExpansionExpr             = 142,$/;"	e	enum:ASTNodeKind
NodeKind_ParenExpr	include/ASTNode.h	/^  NodeKind_ParenExpr                     = 111,$/;"	e	enum:ASTNodeKind
NodeKind_ParmDecl	include/ASTNode.h	/^  NodeKind_ParmDecl                      = 10,$/;"	e	enum:ASTNodeKind
NodeKind_PreprocessingDirective	include/ASTNode.h	/^  NodeKind_PreprocessingDirective        = 500,$/;"	e	enum:ASTNodeKind
NodeKind_ReturnStmt	include/ASTNode.h	/^  NodeKind_ReturnStmt                    = 214,$/;"	e	enum:ASTNodeKind
NodeKind_SEHExceptStmt	include/ASTNode.h	/^  NodeKind_SEHExceptStmt                 = 227,$/;"	e	enum:ASTNodeKind
NodeKind_SEHFinallyStmt	include/ASTNode.h	/^  NodeKind_SEHFinallyStmt                = 228,$/;"	e	enum:ASTNodeKind
NodeKind_SEHTryStmt	include/ASTNode.h	/^  NodeKind_SEHTryStmt                    = 226,$/;"	e	enum:ASTNodeKind
NodeKind_SizeOfPackExpr	include/ASTNode.h	/^  NodeKind_SizeOfPackExpr                = 143,$/;"	e	enum:ASTNodeKind
NodeKind_StmtExpr	include/ASTNode.h	/^  NodeKind_StmtExpr                      = 121,$/;"	e	enum:ASTNodeKind
NodeKind_StringLiteral	include/ASTNode.h	/^  NodeKind_StringLiteral                 = 109,$/;"	e	enum:ASTNodeKind
NodeKind_StructDecl	include/ASTNode.h	/^  NodeKind_StructDecl                    = 2,$/;"	e	enum:ASTNodeKind
NodeKind_SwitchStmt	include/ASTNode.h	/^  NodeKind_SwitchStmt                    = 206,$/;"	e	enum:ASTNodeKind
NodeKind_TemplateRef	include/ASTNode.h	/^  NodeKind_TemplateRef                   = 45,$/;"	e	enum:ASTNodeKind
NodeKind_TemplateTemplateParameter	include/ASTNode.h	/^  NodeKind_TemplateTemplateParameter     = 29,$/;"	e	enum:ASTNodeKind
NodeKind_TemplateTypeParameter	include/ASTNode.h	/^  NodeKind_TemplateTypeParameter         = 27,$/;"	e	enum:ASTNodeKind
NodeKind_TranslationUnit	include/ASTNode.h	/^  NodeKind_TranslationUnit               = 300,$/;"	e	enum:ASTNodeKind
NodeKind_TypeAliasDecl	include/ASTNode.h	/^  NodeKind_TypeAliasDecl                 = 36,$/;"	e	enum:ASTNodeKind
NodeKind_TypeRef	include/ASTNode.h	/^  NodeKind_TypeRef                       = 43,$/;"	e	enum:ASTNodeKind
NodeKind_TypedefDecl	include/ASTNode.h	/^  NodeKind_TypedefDecl                   = 20,$/;"	e	enum:ASTNodeKind
NodeKind_UnaryExpr	include/ASTNode.h	/^  NodeKind_UnaryExpr                     = 136,$/;"	e	enum:ASTNodeKind
NodeKind_UnaryOperator	include/ASTNode.h	/^  NodeKind_UnaryOperator                 = 112,$/;"	e	enum:ASTNodeKind
NodeKind_UnaryOperator_Append	include/ASTNode.h	/^  NodeKind_UnaryOperator_Append = 702,$/;"	e	enum:ASTNodeKind
NodeKind_UnexposedAttr	include/ASTNode.h	/^  NodeKind_UnexposedAttr                 = 400,$/;"	e	enum:ASTNodeKind
NodeKind_UnexposedDecl	include/ASTNode.h	/^  NodeKind_UnexposedDecl                 = 1,$/;"	e	enum:ASTNodeKind
NodeKind_UnexposedExpr	include/ASTNode.h	/^  NodeKind_UnexposedExpr                 = 100,$/;"	e	enum:ASTNodeKind
NodeKind_UnexposedStmt	include/ASTNode.h	/^  NodeKind_UnexposedStmt                 = 200,$/;"	e	enum:ASTNodeKind
NodeKind_UnionDecl	include/ASTNode.h	/^  NodeKind_UnionDecl                     = 3,$/;"	e	enum:ASTNodeKind
NodeKind_UsingDeclaration	include/ASTNode.h	/^  NodeKind_UsingDeclaration              = 35,$/;"	e	enum:ASTNodeKind
NodeKind_UsingDirective	include/ASTNode.h	/^  NodeKind_UsingDirective                = 34,$/;"	e	enum:ASTNodeKind
NodeKind_VarDecl	include/ASTNode.h	/^  NodeKind_VarDecl                       = 9,$/;"	e	enum:ASTNodeKind
NodeKind_WhileStmt	include/ASTNode.h	/^  NodeKind_WhileStmt                     = 207,$/;"	e	enum:ASTNodeKind
NodeLinkageKind	include/ASTNode.h	/^enum NodeLinkageKind {$/;"	g
NodeLinkageKind	include/ASTNode.h	/^typedef enum NodeLinkageKind NodeLinkageKind;$/;"	t	typeref:enum:NodeLinkageKind
NodeLinkage_External	include/ASTNode.h	/^NodeLinkage_External \/**< This is the linkage for entities with true, external linkage. *\/$/;"	e	enum:NodeLinkageKind
NodeLinkage_Internal	include/ASTNode.h	/^NodeLinkage_Internal,   \/**< This is the linkage for entities with external linkage that live in C++ anonymous namespaces.*\/$/;"	e	enum:NodeLinkageKind
NodeLinkage_Invalid	include/ASTNode.h	/^NodeLinkage_Invalid, \/** < This is the linkage for variables, parameters, and so on that  have automatic storage.  This covers normal (non-extern) local variables.$/;"	e	enum:NodeLinkageKind
NodeLinkage_NoLinkage	include/ASTNode.h	/^NodeLinkage_NoLinkage,  \/**< This is the linkage for static variables and static functions. *\/$/;"	e	enum:NodeLinkageKind
NodeLinkage_UniqueExternal	include/ASTNode.h	/^NodeLinkage_UniqueExternal, \/**< This is the linkage for entities with true, external linkage. *\/$/;"	e	enum:NodeLinkageKind
NodeTypeKind	include/ASTNode.h	/^typedef enum ASTNodeTypeKind NodeTypeKind;$/;"	t	typeref:enum:ASTNodeTypeKind
NodeTypeKind_BlockPointer	include/ASTNode.h	/^	NodeTypeKind_BlockPointer = 102,$/;"	e	enum:ASTNodeTypeKind
NodeTypeKind_Bool	include/ASTNode.h	/^	NodeTypeKind_Bool = 3,$/;"	e	enum:ASTNodeTypeKind
NodeTypeKind_Char16	include/ASTNode.h	/^	NodeTypeKind_Char16 = 6,$/;"	e	enum:ASTNodeTypeKind
NodeTypeKind_Char32	include/ASTNode.h	/^	NodeTypeKind_Char32 = 7,$/;"	e	enum:ASTNodeTypeKind
NodeTypeKind_Char_S	include/ASTNode.h	/^	NodeTypeKind_Char_S = 13,$/;"	e	enum:ASTNodeTypeKind
NodeTypeKind_Char_U	include/ASTNode.h	/^	NodeTypeKind_Char_U = 4,$/;"	e	enum:ASTNodeTypeKind
NodeTypeKind_Complex	include/ASTNode.h	/^	NodeTypeKind_Complex = 100,$/;"	e	enum:ASTNodeTypeKind
NodeTypeKind_ConstantArray	include/ASTNode.h	/^	NodeTypeKind_ConstantArray = 112$/;"	e	enum:ASTNodeTypeKind
NodeTypeKind_Dependent	include/ASTNode.h	/^	NodeTypeKind_Dependent = 26,$/;"	e	enum:ASTNodeTypeKind
NodeTypeKind_Double	include/ASTNode.h	/^	NodeTypeKind_Double = 22,$/;"	e	enum:ASTNodeTypeKind
NodeTypeKind_Enum	include/ASTNode.h	/^	NodeTypeKind_Enum = 106,$/;"	e	enum:ASTNodeTypeKind
NodeTypeKind_FirstBuiltin	include/ASTNode.h	/^	NodeTypeKind_FirstBuiltin = NodeTypeKind_Void,$/;"	e	enum:ASTNodeTypeKind
NodeTypeKind_Float	include/ASTNode.h	/^	NodeTypeKind_Float = 21,$/;"	e	enum:ASTNodeTypeKind
NodeTypeKind_FunctionNoProto	include/ASTNode.h	/^	NodeTypeKind_FunctionNoProto = 110,$/;"	e	enum:ASTNodeTypeKind
NodeTypeKind_FunctionProto	include/ASTNode.h	/^	NodeTypeKind_FunctionProto = 111,$/;"	e	enum:ASTNodeTypeKind
NodeTypeKind_Int	include/ASTNode.h	/^	NodeTypeKind_Int = 17,$/;"	e	enum:ASTNodeTypeKind
NodeTypeKind_Int128	include/ASTNode.h	/^	NodeTypeKind_Int128 = 20,$/;"	e	enum:ASTNodeTypeKind
NodeTypeKind_Invalid	include/ASTNode.h	/^	NodeTypeKind_Invalid = 0,$/;"	e	enum:ASTNodeTypeKind
NodeTypeKind_LValueReference	include/ASTNode.h	/^	NodeTypeKind_LValueReference = 103,$/;"	e	enum:ASTNodeTypeKind
NodeTypeKind_LastBuiltin	include/ASTNode.h	/^	NodeTypeKind_LastBuiltin  = NodeTypeKind_ObjCSel,$/;"	e	enum:ASTNodeTypeKind
NodeTypeKind_Long	include/ASTNode.h	/^	NodeTypeKind_Long = 18,$/;"	e	enum:ASTNodeTypeKind
NodeTypeKind_LongDouble	include/ASTNode.h	/^	NodeTypeKind_LongDouble = 23,$/;"	e	enum:ASTNodeTypeKind
NodeTypeKind_LongLong	include/ASTNode.h	/^	NodeTypeKind_LongLong = 19,$/;"	e	enum:ASTNodeTypeKind
NodeTypeKind_NullPtr	include/ASTNode.h	/^	NodeTypeKind_NullPtr = 24,$/;"	e	enum:ASTNodeTypeKind
NodeTypeKind_ObjCClass	include/ASTNode.h	/^	NodeTypeKind_ObjCClass = 28,$/;"	e	enum:ASTNodeTypeKind
NodeTypeKind_ObjCId	include/ASTNode.h	/^	NodeTypeKind_ObjCId = 27,$/;"	e	enum:ASTNodeTypeKind
NodeTypeKind_ObjCInterface	include/ASTNode.h	/^	NodeTypeKind_ObjCInterface = 108,$/;"	e	enum:ASTNodeTypeKind
NodeTypeKind_ObjCObjectPointer	include/ASTNode.h	/^	NodeTypeKind_ObjCObjectPointer = 109,$/;"	e	enum:ASTNodeTypeKind
NodeTypeKind_ObjCSel	include/ASTNode.h	/^	NodeTypeKind_ObjCSel = 29,$/;"	e	enum:ASTNodeTypeKind
NodeTypeKind_Overload	include/ASTNode.h	/^	NodeTypeKind_Overload = 25,$/;"	e	enum:ASTNodeTypeKind
NodeTypeKind_Pointer	include/ASTNode.h	/^	NodeTypeKind_Pointer = 101,$/;"	e	enum:ASTNodeTypeKind
NodeTypeKind_RValueReference	include/ASTNode.h	/^	NodeTypeKind_RValueReference = 104,$/;"	e	enum:ASTNodeTypeKind
NodeTypeKind_Record	include/ASTNode.h	/^	NodeTypeKind_Record = 105,$/;"	e	enum:ASTNodeTypeKind
NodeTypeKind_SChar	include/ASTNode.h	/^	NodeTypeKind_SChar = 14,$/;"	e	enum:ASTNodeTypeKind
NodeTypeKind_Short	include/ASTNode.h	/^	NodeTypeKind_Short = 16,$/;"	e	enum:ASTNodeTypeKind
NodeTypeKind_Typedef	include/ASTNode.h	/^	NodeTypeKind_Typedef = 107,$/;"	e	enum:ASTNodeTypeKind
NodeTypeKind_UChar	include/ASTNode.h	/^	NodeTypeKind_UChar = 5,$/;"	e	enum:ASTNodeTypeKind
NodeTypeKind_UInt	include/ASTNode.h	/^	NodeTypeKind_UInt = 9,$/;"	e	enum:ASTNodeTypeKind
NodeTypeKind_UInt128	include/ASTNode.h	/^	NodeTypeKind_UInt128 = 12,$/;"	e	enum:ASTNodeTypeKind
NodeTypeKind_ULong	include/ASTNode.h	/^	NodeTypeKind_ULong = 10,$/;"	e	enum:ASTNodeTypeKind
NodeTypeKind_ULongLong	include/ASTNode.h	/^	NodeTypeKind_ULongLong = 11,$/;"	e	enum:ASTNodeTypeKind
NodeTypeKind_UShort	include/ASTNode.h	/^	NodeTypeKind_UShort = 8,$/;"	e	enum:ASTNodeTypeKind
NodeTypeKind_Unexposed	include/ASTNode.h	/^	NodeTypeKind_Unexposed = 1,$/;"	e	enum:ASTNodeTypeKind
NodeTypeKind_Void	include/ASTNode.h	/^	NodeTypeKind_Void = 2,$/;"	e	enum:ASTNodeTypeKind
NodeTypeKind_WChar	include/ASTNode.h	/^	NodeTypeKind_WChar = 15,$/;"	e	enum:ASTNodeTypeKind
NumResults	include/clang-c/Index.h	/^  unsigned NumResults;$/;"	m	struct:__anon9
Operator	include/MutationOperator.h	/^typedef struct MiluMutationOperator Operator;$/;"	t	typeref:struct:MiluMutationOperator
PARSING_UNITTESTS	mutation/TestInput.c	/^gboolean	PARSING_UNITTESTS = FALSE;$/;"	v
PROJECT_H_	include/Project.h	31;"	d
PrintDefault	include/Utility.h	/^    PrintDefault,   \/**< Print the default mode. *\/$/;"	e	enum:MiluPrintMode
PrintDot	include/Utility.h	/^    PrintDot,       \/**< Print out in dot format. *\/$/;"	e	enum:MiluPrintMode
PrintHtml	include/Utility.h	/^    PrintHtml,      \/**< Print out in html format. *\/$/;"	e	enum:MiluPrintMode
PrintMode	include/Utility.h	/^typedef enum MiluPrintMode PrintMode;$/;"	t	typeref:enum:MiluPrintMode
PrintSource	include/Utility.h	/^    PrintSource,     \/**< Print out in the source code format. *\/$/;"	e	enum:MiluPrintMode
Project	include/Project.h	/^typedef struct MiluProject Project;$/;"	t	typeref:struct:MiluProject
Results	include/clang-c/Index.h	/^  CXCompletionResult *Results;$/;"	m	struct:__anon9
StrategyMutantFirst	include/MutantExecutor.h	/^    StrategyMutantFirst = 1,     \/**< For each mutant, run all tests until the mutant is killed. *\/$/;"	e	enum:MutationExecutionStrategyType
StrategyMutantFirstFull	include/MutantExecutor.h	/^    StrategyMutantFirstFull = 3, \/**< For each mutant, run all tests. *\/$/;"	e	enum:MutationExecutionStrategyType
StrategyTestFirst	include/MutantExecutor.h	/^    StrategyTestFirst = 2,       \/**< For each test input, run all alive mutants. *\/$/;"	e	enum:MutationExecutionStrategyType
StrategyTestFirstFull	include/MutantExecutor.h	/^    StrategyTestFirstFull = 4    \/**< For each test input, run all mutants. *\/$/;"	e	enum:MutationExecutionStrategyType
StrategyType	include/MutantExecutor.h	/^typedef enum MutationExecutionStrategyType StrategyType;$/;"	t	typeref:enum:MutationExecutionStrategyType
TESTINPUT_H_	include/TestInput.h	31;"	d
USR	include/clang-c/Index.h	/^  const char *USR;$/;"	m	struct:__anon19
UTILITY_H_	include/Utility.h	31;"	d
abortQuery	include/clang-c/Index.h	/^  int (*abortQuery)(CXClientData client_data, void *reserved);$/;"	m	struct:__anon34
add_original_non_mutation	mutation/ASTUnit.c	/^static void add_original_non_mutation(ASTNode * ast)$/;"	f	file:
amount	include/clang-c/Index.h	/^  unsigned long amount;$/;"	m	struct:CXTUResourceUsageEntry
apply_mutation	mutation/Mutant.c	/^static void apply_mutation(Mutant * mut)$/;"	f	file:
ast	include/ASTUnit.h	/^	ASTNode * ast; \/**< Root node of the AST. *\/$/;"	m	struct:MiluASTUnit
ast_unit	include/Project.h	/^    ASTUnit * ast_unit; \/**< The ASTUnit of the input source file. *\/$/;"	m	struct:MiluProject
attrInfo	include/clang-c/Index.h	/^  const CXIdxAttrInfo *attrInfo;$/;"	m	struct:__anon21
attributes	include/clang-c/Index.h	/^  const CXIdxAttrInfo *const *attributes;$/;"	m	struct:__anon19
attributes	include/clang-c/Index.h	/^  const CXIdxAttrInfo *const *attributes;$/;"	m	struct:__anon22
base	include/clang-c/Index.h	/^  const CXIdxEntityInfo *base;$/;"	m	struct:__anon25
base_path	include/Mutant.h	/^	gchar * base_path;  \/**< The file id. *\/$/;"	m	struct:MiluMutant
bases	include/clang-c/Index.h	/^  const CXIdxBaseClassInfo *const *bases;$/;"	m	struct:__anon31
begin_int_data	include/clang-c/Index.h	/^  unsigned begin_int_data;$/;"	m	struct:__anon4
bin_path	include/Mutant.h	/^	gchar * bin_path;   \/**< The binary path. *\/$/;"	m	struct:MiluMutant
check_binary_op	mutation/ASTUnit.c	/^static gint check_binary_op(const char * op)$/;"	f	file:
check_milu_source_node_lines	mutation/ASTPrinter.c	/^static int check_milu_source_node_lines(ASTNode * node)$/;"	f	file:
children	include/ASTNode.h	/^	ASTNode * children;           \/**< The children of node *\/$/;"	m	struct:ASTNode
classCursor	include/clang-c/Index.h	/^  CXCursor classCursor;$/;"	m	struct:__anon21
classCursor	include/clang-c/Index.h	/^  CXCursor classCursor;$/;"	m	struct:__anon29
classLoc	include/clang-c/Index.h	/^  CXIdxLoc classLoc;$/;"	m	struct:__anon21
classLoc	include/clang-c/Index.h	/^  CXIdxLoc classLoc;$/;"	m	struct:__anon29
clean	include/Mutator.h	/^	MutatorClean clean;               \/**<  The method to clean mutate the node. *\/$/;"	m	struct:MiluMutator
clean_ast	mutation/ASTUnit.c	/^static void clean_ast(ASTNode * root)$/;"	f	file:
clean_mutation	mutation/Mutant.c	/^static void clean_mutation(Mutant * mut)$/;"	f	file:
compilable	include/Mutant.h	/^	gboolean compilable; \/**< Is Mutant compilable. *\/$/;"	m	struct:MiluMutant
compilation_cmd	include/Project.h	/^    gchar * compilation_cmd; \/**< The command to compile mutants. *\/$/;"	m	struct:MiluProject
container	include/clang-c/Index.h	/^  const CXIdxContainerInfo *container;$/;"	m	struct:__anon33
containerInfo	include/clang-c/Index.h	/^  const CXIdxObjCContainerDeclInfo *containerInfo;$/;"	m	struct:__anon28
containerInfo	include/clang-c/Index.h	/^  const CXIdxObjCContainerDeclInfo *containerInfo;$/;"	m	struct:__anon29
context	include/clang-c/Index.h	/^  void *context;$/;"	m	struct:__anon10
create_multi_process_mutants	mutation/MultiProcessing.c	/^static void create_multi_process_mutants(GPtrArray * mutants, MultiProcessingMutantsFunc mfunc)$/;"	f	file:
curr_mutation_locations	mutation/MutationTemplate.c	/^static GPtrArray * curr_mutation_locations =  NULL;$/;"	v	file:
curr_mutation_num_template	mutation/MutationTemplate.c	/^static MutationNumTemplate * curr_mutation_num_template  = NULL;$/;"	v	file:
curr_mutation_operators	mutation/MutationTemplate.c	/^static GPtrArray * curr_mutation_operators  = NULL;$/;"	v	file:
curr_mutation_template	mutation/MutationTemplate.c	/^static GPtrArray * curr_mutation_template  = NULL;$/;"	v	file:
curr_src	mutation/ASTUnit.c	/^static gchar * curr_src = NULL;$/;"	v	file:
cursor	include/clang-c/Index.h	/^     (^CXCursorVisitorBlock)(CXCursor cursor, CXCursor parent);$/;"	v
cursor	include/clang-c/Index.h	/^  CXCursor cursor;$/;"	m	struct:__anon18
cursor	include/clang-c/Index.h	/^  CXCursor cursor;$/;"	m	struct:__anon19
cursor	include/clang-c/Index.h	/^  CXCursor cursor;$/;"	m	struct:__anon20
cursor	include/clang-c/Index.h	/^  CXCursor cursor;$/;"	m	struct:__anon22
cursor	include/clang-c/Index.h	/^  CXCursor cursor;$/;"	m	struct:__anon25
cursor	include/clang-c/Index.h	/^  CXCursor cursor;$/;"	m	struct:__anon26
cursor	include/clang-c/Index.h	/^  CXCursor cursor;$/;"	m	struct:__anon33
cx	include/ASTNode.h	/^	gpointer cx;                  \/**< A Pointer to libclang Node *\/$/;"	m	struct:ASTNode
data	include/clang-c/Index.h	/^  void *data;$/;"	m	struct:CXTUResourceUsage
data	include/clang-c/Index.h	/^  void *data;$/;"	m	struct:__anon1
data	include/clang-c/Index.h	/^  void *data[2];$/;"	m	struct:__anon6
data	include/clang-c/Index.h	/^  void *data[3];$/;"	m	struct:__anon5
declAsContainer	include/clang-c/Index.h	/^  const CXIdxContainerInfo *declAsContainer;$/;"	m	struct:__anon22
declInfo	include/clang-c/Index.h	/^  const CXIdxDeclInfo *declInfo;$/;"	m	struct:__anon24
declInfo	include/clang-c/Index.h	/^  const CXIdxDeclInfo *declInfo;$/;"	m	struct:__anon30
declInfo	include/clang-c/Index.h	/^  const CXIdxDeclInfo *declInfo;$/;"	m	struct:__anon31
diagnostic	include/clang-c/Index.h	/^  void (*diagnostic)(CXClientData client_data,$/;"	m	struct:__anon34
end_int_data	include/clang-c/Index.h	/^  unsigned end_int_data;$/;"	m	struct:__anon4
enteredMainFile	include/clang-c/Index.h	/^  CXIdxClientFile (*enteredMainFile)(CXClientData client_data,$/;"	m	struct:__anon34
entityInfo	include/clang-c/Index.h	/^  const CXIdxEntityInfo *entityInfo;$/;"	m	struct:__anon22
entries	include/clang-c/Index.h	/^  CXTUResourceUsageEntry *entries;$/;"	m	struct:CXTUResourceUsage
entries	mutation/Options.c	/^static  GOptionEntry entries[] =$/;"	v	file:
execution_strategy_mutant_first	mutation/MutantExecutor.c	/^static void execution_strategy_mutant_first (GPtrArray * mutants, Mutant * original, GPtrArray * tests)$/;"	f	file:
execution_strategy_mutant_first_full	mutation/MutantExecutor.c	/^static void execution_strategy_mutant_first_full (GPtrArray * mutants, Mutant * original, GPtrArray * tests)$/;"	f	file:
execution_strategy_test_first	mutation/MutantExecutor.c	/^static void execution_strategy_test_first (GPtrArray * mutants, Mutant * original, GPtrArray * tests)$/;"	f	file:
execution_strategy_test_first_full	mutation/MutantExecutor.c	/^static void execution_strategy_test_first_full (GPtrArray * mutants, Mutant * original, GPtrArray * tests)$/;"	f	file:
exist_loc_id_mid	mutation/MutationId.c	/^static gboolean exist_loc_id_mid(GArray * mid, gint loc, gint id)$/;"	f	file:
exist_loc_mid	mutation/MutationId.c	/^static gboolean exist_loc_mid(GArray * mid, gint loc)$/;"	f	file:
exist_mid_mids	mutation/MutationId.c	/^static gboolean exist_mid_mids(MutationId * mid, GPtrArray * mids)$/;"	f	file:
exist_ordered_mid_mids	mutation/MutationId.c	/^static gboolean exist_ordered_mid_mids(MutationId * mid, GPtrArray * mids)$/;"	f	file:
ext	include/ASTNode.h	/^    gint ext[4] ; \/** < The extending infomration e.g. linkage, const. *\/$/;"	m	struct:ASTNode
file	include/clang-c/Index.h	/^  CXFile file;$/;"	m	struct:__anon12
file	include/clang-c/Index.h	/^  CXFile file;$/;"	m	struct:__anon13
file_id	include/Mutant.h	/^	gint file_id;  \/**< The file id. *\/$/;"	m	struct:MiluMutant
file_name	include/ASTUnit.h	/^    gchar * file_name; \/**< The name of the parsing file. *\/$/;"	m	struct:MiluASTUnit
file_path	include/ASTUnit.h	/^	gchar * file_path; \/**< The path of the parsing file. *\/$/;"	m	struct:MiluASTUnit
filename	include/clang-c/Index.h	/^  const char *filename;$/;"	m	struct:__anon12
fitness	include/Mutant.h	/^        gdouble fitness; \/** < Fitness value *\/$/;"	m	struct:MiluMutant
fix_binary_op	mutation/ASTUnit.c	/^static gchar * fix_binary_op(CXToken * tokens ,unsigned tokens_size)$/;"	f	file:
fix_data_types_duplication	mutation/ASTUnit.c	/^static void fix_data_types_duplication()$/;"	f	file:
fix_decl_static	mutation/ASTUnit.c	/^static gboolean fix_decl_static()$/;"	f	file:
fix_decl_type	mutation/ASTUnit.c	/^static gchar * fix_decl_type(gchar * var)$/;"	f	file:
fix_function_attribute	mutation/ASTUnit.c	/^static void fix_function_attribute()$/;"	f	file:
fix_function_ellipsis	mutation/ASTUnit.c	/^static gboolean fix_function_ellipsis()$/;"	f	file:
fix_function_pointer	mutation/ASTUnit.c	/^static gboolean fix_function_pointer(ASTNode * func)$/;"	f	file:
fix_function_static	mutation/ASTUnit.c	/^static gboolean fix_function_static()$/;"	f	file:
foms	include/Mutant.h	/^        GPtrArray * foms;  \/**< The foms constructing HOMs *\/$/;"	m	struct:MiluMutant
func_nodes	include/Project.h	/^    GPtrArray * func_nodes; \/**< The set of selected funciton nodes. *\/$/;"	m	struct:MiluProject
get_ABS_operator	operators/ABS.c	/^Operator * get_ABS_operator()$/;"	f
get_Austin_CRCR_operator	operators/Austin_CRCR.c	/^Operator * get_Austin_CRCR_operator()$/;"	f
get_Austin_OAAN_operator	operators/Austin_OAAN.c	/^Operator * get_Austin_OAAN_operator()$/;"	f
get_Austin_OLLN_operator	operators/Austin_OLLN.c	/^Operator * get_Austin_OLLN_operator()$/;"	f
get_Austin_OLNG_operator	operators/Austin_OLNG.c	/^Operator * get_Austin_OLNG_operator()$/;"	f
get_Austin_ORRN_operator	operators/Austin_ORRN.c	/^Operator * get_Austin_ORRN_operator()$/;"	f
get_CRCR_operator	operators/CRCR.c	/^Operator * get_CRCR_operator()$/;"	f
get_OAAA_operator	operators/OAAA.c	/^Operator * get_OAAA_operator()$/;"	f
get_OAAN_operator	operators/OAAN.c	/^Operator * get_OAAN_operator()$/;"	f
get_OBBA_operator	operators/OBBA.c	/^Operator * get_OBBA_operator()$/;"	f
get_OBBN_operator	operators/OBBN.c	/^Operator * get_OBBN_operator()$/;"	f
get_OCNG_operator	operators/OCNG.c	/^Operator * get_OCNG_operator()$/;"	f
get_OIDO_operator	operators/OIDO.c	/^Operator * get_OIDO_operator()$/;"	f
get_OLLN_operator	operators/OLLN.c	/^Operator * get_OLLN_operator()$/;"	f
get_OLNG_operator	operators/OLNG.c	/^Operator * get_OLNG_operator()$/;"	f
get_ORRN_operator	operators/ORRN.c	/^Operator * get_ORRN_operator()$/;"	f
get_REC2A_operator	operators/REC2A.c	/^Operator * get_REC2A_operator()$/;"	f
get_REC2M_operator	operators/REC2M.c	/^Operator * get_REC2M_operator()$/;"	f
get_REDAWN_operator	operators/REDAWN.c	/^Operator * get_REDAWN_operator()$/;"	f
get_REDAWZ_operator	operators/REDAWZ.c	/^Operator * get_REDAWZ_operator()$/;"	f
get_REM2A_operator	operators/REM2A.c	/^Operator * get_REM2A_operator()$/;"	f
get_REMSOTP_operator	operators/REMSOTP.c	/^Operator * get_REMSOTP_operator()$/;"	f
get_RESOTPE_operator	operators/RESOTPE.c	/^Operator * get_RESOTPE_operator()$/;"	f
get_RMFS_operator	operators/RMFS.c	/^Operator * get_RMFS_operator()$/;"	f
get_RMNA_operator	operators/RMNA.c	/^Operator * get_RMNA_operator()$/;"	f
get_SBRC_operator	operators/SBRC.c	/^Operator * get_SBRC_operator()$/;"	f
get_SSDL_operator	operators/SSDL.c	/^Operator * get_SSDL_operator()$/;"	f
get_UOI_operator	operators/UOI.c	/^Operator * get_UOI_operator()$/;"	f
get_id_by_loc	mutation/MutationId.c	/^static gint get_id_by_loc(GArray * mid, gint loc) \/\/ Depreciated$/;"	f	file:
get_multi_process	mutation/MutantExecutor.c	/^static void get_multi_process(GPtrArray * mutants, Mutant * original, GPtrArray * tests, MutantExecutionStrategy strategy, gchar * tmp_results_path)$/;"	f	file:
get_multi_process_mut	mutation/MutantExecutor.c	/^static void get_multi_process_mut(Mutant * curr_mut, Mutant * original, GPtrArray * tests, gchar * tmp_results_path)$/;"	f	file:
get_tmp_dir	mutation/MutantExecutor.c	/^static gchar * get_tmp_dir()$/;"	f	file:
get_unary_operator_id	mutation/ASTUnit.c	/^static gint get_unary_operator_id(CXToken * tokens ,unsigned tokens_size)$/;"	f	file:
getter	include/clang-c/Index.h	/^  const CXIdxEntityInfo *getter;$/;"	m	struct:__anon30
has_ASTNode_calloc_call	mutation/ASTNodeUtil.c	/^gboolean has_ASTNode_calloc_call(const ASTNode * node)$/;"	f
has_ASTNode_malloc_call	mutation/ASTNodeUtil.c	/^gboolean has_ASTNode_malloc_call(const ASTNode * node)$/;"	f
hashLoc	include/clang-c/Index.h	/^  CXIdxLoc hashLoc;$/;"	m	struct:__anon12
html_check_mutantion_lines	mutation/ASTPrinter.c	/^static gboolean html_check_mutantion_lines(int line)$/;"	f	file:
html_check_mutantion_node	mutation/ASTPrinter.c	/^static void html_check_mutantion_node(ASTNode * node)$/;"	f	file:
html_lines	mutation/ASTPrinter.c	/^static gint html_lines;$/;"	v	file:
html_mutation_lines	mutation/ASTPrinter.c	/^static GArray * html_mutation_lines;$/;"	v	file:
html_path	include/Mutant.h	/^	gchar * html_path;  \/**< The html path. *\/$/;"	m	struct:MiluMutant
id	include/ASTNode.h	/^	gsize id;                     \/**< The id of the node. *\/$/;"	m	struct:ASTNode
id	include/Mutant.h	/^	MutationId * id; \/**< The Mutation Id. *\/$/;"	m	struct:MiluMutant
importedASTFile	include/clang-c/Index.h	/^  CXIdxClientASTFile (*importedASTFile)(CXClientData client_data,$/;"	m	struct:__anon34
indexDeclaration	include/clang-c/Index.h	/^  void (*indexDeclaration)(CXClientData client_data,$/;"	m	struct:__anon34
indexEntityReference	include/clang-c/Index.h	/^  void (*indexEntityReference)(CXClientData client_data,$/;"	m	struct:__anon34
info	include/MutationOperator.h	/^	gchar * info; \/**< The information of the mutation operator. *\/$/;"	m	struct:MiluMutationOperator
info	include/Mutator.h	/^	gchar * info;                     \/**<  The detail information of the mutation. *\/$/;"	m	struct:MiluMutator
int_data	include/clang-c/Index.h	/^  unsigned int_data;$/;"	m	struct:__anon11
int_data	include/clang-c/Index.h	/^  unsigned int_data;$/;"	m	struct:__anon3
int_data	include/clang-c/Index.h	/^  unsigned int_data[4];$/;"	m	struct:__anon7
isAngled	include/clang-c/Index.h	/^  int isAngled;$/;"	m	struct:__anon12
isContainer	include/clang-c/Index.h	/^  int isContainer;$/;"	m	struct:__anon22
isDefinition	include/clang-c/Index.h	/^  int isDefinition;$/;"	m	struct:__anon22
isImplicit	include/clang-c/Index.h	/^  int isImplicit;$/;"	m	struct:__anon22
isImport	include/clang-c/Index.h	/^  int isImport;$/;"	m	struct:__anon12
isModule	include/clang-c/Index.h	/^  int isModule;$/;"	m	struct:__anon13
isRedeclaration	include/clang-c/Index.h	/^  int isRedeclaration;$/;"	m	struct:__anon22
is_ASTNode_add_assign_op	mutation/ASTNodeUtil.c	/^gboolean is_ASTNode_add_assign_op(const ASTNode * node)$/;"	f
is_ASTNode_add_op	mutation/ASTNodeUtil.c	/^gboolean is_ASTNode_add_op(const ASTNode * node)$/;"	f
is_ASTNode_and_op	mutation/ASTNodeUtil.c	/^gboolean is_ASTNode_and_op(const ASTNode * node)$/;"	f
is_ASTNode_assign_op	mutation/ASTNodeUtil.c	/^gboolean is_ASTNode_assign_op(const ASTNode * node)$/;"	f
is_ASTNode_bitwise_and_assignment_op	mutation/ASTNodeUtil.c	/^gboolean is_ASTNode_bitwise_and_assignment_op(const ASTNode * node)$/;"	f
is_ASTNode_bitwise_and_op	mutation/ASTNodeUtil.c	/^gboolean is_ASTNode_bitwise_and_op(const ASTNode * node)$/;"	f
is_ASTNode_bitwise_or_assignment_op	mutation/ASTNodeUtil.c	/^gboolean is_ASTNode_bitwise_or_assignment_op(const ASTNode * node)$/;"	f
is_ASTNode_bitwise_or_op	mutation/ASTNodeUtil.c	/^gboolean is_ASTNode_bitwise_or_op(const ASTNode * node)$/;"	f
is_ASTNode_calloc_call	mutation/ASTNodeUtil.c	/^gboolean is_ASTNode_calloc_call(const ASTNode * node)$/;"	f
is_ASTNode_cast_calloc_call	mutation/ASTNodeUtil.c	/^gboolean is_ASTNode_cast_calloc_call(const ASTNode * node)$/;"	f
is_ASTNode_cast_malloc_call	mutation/ASTNodeUtil.c	/^gboolean is_ASTNode_cast_malloc_call(const ASTNode * node)$/;"	f
is_ASTNode_divide_assign_op	mutation/ASTNodeUtil.c	/^gboolean is_ASTNode_divide_assign_op(const ASTNode * node)$/;"	f
is_ASTNode_divide_op	mutation/ASTNodeUtil.c	/^gboolean is_ASTNode_divide_op(const ASTNode * node)$/;"	f
is_ASTNode_equal_op	mutation/ASTNodeUtil.c	/^gboolean is_ASTNode_equal_op(const ASTNode * node)$/;"	f
is_ASTNode_float_var	mutation/ASTNodeUtil.c	/^gboolean is_ASTNode_float_var(const ASTNode * node)$/;"	f
is_ASTNode_free_statement	mutation/ASTNodeUtil.c	/^gboolean is_ASTNode_free_statement(const ASTNode * node)$/;"	f
is_ASTNode_func_decl_with_body	mutation/ASTNodeUtil.c	/^gboolean is_ASTNode_func_decl_with_body(const ASTNode * node)$/;"	f
is_ASTNode_greater_equal_op	mutation/ASTNodeUtil.c	/^gboolean is_ASTNode_greater_equal_op(const ASTNode * node)$/;"	f
is_ASTNode_greater_op	mutation/ASTNodeUtil.c	/^gboolean is_ASTNode_greater_op(const ASTNode * node)$/;"	f
is_ASTNode_has_kind	mutation/ASTNodeUtil.c	/^static gboolean is_ASTNode_has_kind(const ASTNode * node, NodeKind kind)$/;"	f	file:
is_ASTNode_has_text	mutation/ASTNodeUtil.c	/^static gboolean is_ASTNode_has_text(const ASTNode * node, const gchar * text )$/;"	f	file:
is_ASTNode_if_expression	mutation/ASTNodeUtil.c	/^gboolean is_ASTNode_if_expression(const ASTNode * node)$/;"	f
is_ASTNode_int_var	mutation/ASTNodeUtil.c	/^gboolean is_ASTNode_int_var(const ASTNode * node)$/;"	f
is_ASTNode_kind_binary_operator	mutation/ASTNodeUtil.c	/^gboolean is_ASTNode_kind_binary_operator(const ASTNode * node)$/;"	f
is_ASTNode_kind_compound_assign_operator	mutation/ASTNodeUtil.c	/^gboolean is_ASTNode_kind_compound_assign_operator(const ASTNode * node)$/;"	f
is_ASTNode_kind_decl_ref_expr	mutation/ASTNodeUtil.c	/^gboolean is_ASTNode_kind_decl_ref_expr(const ASTNode * node)$/;"	f
is_ASTNode_kind_float_literal	mutation/ASTNodeUtil.c	/^gboolean is_ASTNode_kind_float_literal(const ASTNode * node)$/;"	f
is_ASTNode_kind_integer_literal	mutation/ASTNodeUtil.c	/^gboolean is_ASTNode_kind_integer_literal(const ASTNode * node)$/;"	f
is_ASTNode_less_equal_op	mutation/ASTNodeUtil.c	/^gboolean is_ASTNode_less_equal_op(const ASTNode * node)$/;"	f
is_ASTNode_less_op	mutation/ASTNodeUtil.c	/^gboolean is_ASTNode_less_op(const ASTNode * node)$/;"	f
is_ASTNode_malloc_call	mutation/ASTNodeUtil.c	/^gboolean is_ASTNode_malloc_call(const ASTNode * node)$/;"	f
is_ASTNode_miluSource_sizeof	mutation/ASTNodeUtil.c	/^gboolean is_ASTNode_miluSource_sizeof(const ASTNode * node)$/;"	f
is_ASTNode_modulus_assign_op	mutation/ASTNodeUtil.c	/^gboolean is_ASTNode_modulus_assign_op(const ASTNode * node)$/;"	f
is_ASTNode_modulus_op	mutation/ASTNodeUtil.c	/^gboolean is_ASTNode_modulus_op(const ASTNode * node)$/;"	f
is_ASTNode_multiply_assign_op	mutation/ASTNodeUtil.c	/^gboolean is_ASTNode_multiply_assign_op(const ASTNode * node)$/;"	f
is_ASTNode_multiply_op	mutation/ASTNodeUtil.c	/^gboolean is_ASTNode_multiply_op(const ASTNode * node)$/;"	f
is_ASTNode_not_equal_op	mutation/ASTNodeUtil.c	/^gboolean is_ASTNode_not_equal_op(const ASTNode * node)$/;"	f
is_ASTNode_null_assignment	mutation/ASTNodeUtil.c	/^gboolean is_ASTNode_null_assignment(const ASTNode * node)$/;"	f
is_ASTNode_or_op	mutation/ASTNodeUtil.c	/^gboolean is_ASTNode_or_op(const ASTNode * node)$/;"	f
is_ASTNode_postfix_decrement_op	mutation/ASTNodeUtil.c	/^gboolean is_ASTNode_postfix_decrement_op(const ASTNode * node)$/;"	f
is_ASTNode_postfix_increment_op	mutation/ASTNodeUtil.c	/^gboolean is_ASTNode_postfix_increment_op(const ASTNode * node)$/;"	f
is_ASTNode_prefix_decrement_op	mutation/ASTNodeUtil.c	/^gboolean is_ASTNode_prefix_decrement_op(const ASTNode * node)$/;"	f
is_ASTNode_prefix_increment_op	mutation/ASTNodeUtil.c	/^gboolean is_ASTNode_prefix_increment_op(const ASTNode * node)$/;"	f
is_ASTNode_right_hand_var	mutation/ASTNodeUtil.c	/^gboolean is_ASTNode_right_hand_var(const ASTNode * node)$/;"	f
is_ASTNode_sizeof_nonpointer	mutation/ASTNodeUtil.c	/^gboolean is_ASTNode_sizeof_nonpointer(const ASTNode * node)$/;"	f
is_ASTNode_sizeof_pointer	mutation/ASTNodeUtil.c	/^gboolean is_ASTNode_sizeof_pointer(const ASTNode * node)$/;"	f
is_ASTNode_subtract_assign_op	mutation/ASTNodeUtil.c	/^gboolean is_ASTNode_subtract_assign_op(const ASTNode * node)$/;"	f
is_ASTNode_subtract_op	mutation/ASTNodeUtil.c	/^gboolean is_ASTNode_subtract_op(const ASTNode * node)$/;"	f
is_ASTNode_while_expression	mutation/ASTNodeUtil.c	/^gboolean is_ASTNode_while_expression(const ASTNode * node)$/;"	f
is_current_functions_to_mutate	mutation/ASTUnit.c	/^static gboolean is_current_functions_to_mutate(gchar * func_name)$/;"	f	file:
is_equal_2_ordered_mids	mutation/MutationId.c	/^static gboolean is_equal_2_ordered_mids(GArray * mid1, GArray * mid2)$/;"	f	file:
is_equal_2mids	mutation/MutationId.c	/^static gboolean is_equal_2mids(GArray * mid1, GArray * mid2)$/;"	f	file:
is_mutant	include/ASTNode.h	/^    gboolean is_mutant;           \/**< If the ASTNode is mutated *\/$/;"	m	struct:ASTNode
is_unary_token	mutation/ASTUnit.c	/^static gboolean is_unary_token(const gchar * token)$/;"	f	file:
isduplicated	include/Mutant.h	/^        gboolean isduplicated;  \/**< Is Mutant is duplicated. *\/$/;"	m	struct:MiluMutant
isequivalent	include/Mutant.h	/^        gboolean isequivalent;  \/**< Is Mutant is equivalent. *\/$/;"	m	struct:MiluMutant
iskilled	include/Mutant.h	/^	gboolean iskilled; \/**< Is Mutant is killed. *\/$/;"	m	struct:MiluMutant
kind	include/ASTNode.h	/^	NodeKind kind;                \/**<  The kind of the node. *\/$/;"	m	struct:ASTNode
kind	include/ASTNode.h	/^	NodeTypeKind kind;$/;"	m	struct:ASTNodeType
kind	include/clang-c/Index.h	/^  CXIdxAttrKind kind;$/;"	m	struct:__anon18
kind	include/clang-c/Index.h	/^  CXIdxEntityKind kind;$/;"	m	struct:__anon19
kind	include/clang-c/Index.h	/^  CXIdxEntityRefKind kind;$/;"	m	struct:__anon33
kind	include/clang-c/Index.h	/^  CXIdxObjCContainerKind kind;$/;"	m	struct:__anon24
kind	include/clang-c/Index.h	/^  enum CXCursorKind kind;$/;"	m	struct:__anon5	typeref:enum:__anon5::CXCursorKind
kind	include/clang-c/Index.h	/^  enum CXTUResourceUsageKind kind;  $/;"	m	struct:CXTUResourceUsageEntry	typeref:enum:CXTUResourceUsageEntry::CXTUResourceUsageKind
kind	include/clang-c/Index.h	/^  enum CXTypeKind kind;$/;"	m	struct:__anon6	typeref:enum:__anon6::CXTypeKind
lang	include/clang-c/Index.h	/^  CXIdxEntityLanguage lang;$/;"	m	struct:__anon19
lexicalContainer	include/clang-c/Index.h	/^  const CXIdxContainerInfo *lexicalContainer;$/;"	m	struct:__anon22
libclang_parse_file	mutation/ASTUnit.c	/^static void libclang_parse_file(ASTUnit* au, int argc, char *argv[ ] )$/;"	f	file:
line_end	include/ASTNode.h	/^	gint line_end;					\/**< Record the end line number in the original file.*\/$/;"	m	struct:ASTNode
line_start	include/ASTNode.h	/^	gint line_start; 				\/**< Record the start line number in the original file. *\/$/;"	m	struct:ASTNode
load_c_source_file	mutation/ASTUnit.c	/^static void load_c_source_file(const gchar * path)$/;"	f	file:
loc	include/clang-c/Index.h	/^  CXIdxLoc loc;$/;"	m	struct:__anon13
loc	include/clang-c/Index.h	/^  CXIdxLoc loc;$/;"	m	struct:__anon18
loc	include/clang-c/Index.h	/^  CXIdxLoc loc;$/;"	m	struct:__anon22
loc	include/clang-c/Index.h	/^  CXIdxLoc loc;$/;"	m	struct:__anon25
loc	include/clang-c/Index.h	/^  CXIdxLoc loc;$/;"	m	struct:__anon26
loc	include/clang-c/Index.h	/^  CXIdxLoc loc;$/;"	m	struct:__anon33
localSymTable	mutation/ASTUnit.c	/^static GHashTable* localSymTable = NULL;$/;"	v	file:
main	App.c	/^int main(int argc, char *argv[ ] ) {$/;"	f
merge_2mids	mutation/MutationId.c	/^static GArray * merge_2mids(GArray * mid1, GArray * mid2)$/;"	f	file:
milu_check_duplicated_mutants	mutation/Milu3.c	/^void milu_check_duplicated_mutants(GPtrArray * mutants)$/;"	f
milu_check_equivalent_mutants	mutation/Milu3.c	/^void milu_check_equivalent_mutants(GPtrArray * mutants, Mutant * std)$/;"	f
milu_compile_mutants	mutation/Milu3.c	/^void milu_compile_mutants(GPtrArray * mutants)$/;"	f
milu_explore_mutants_by_random	mutation/Milu3.c	/^GPtrArray * milu_explore_mutants_by_random(const Project * project, gint mutants_num, gint order_begin, gint order_end)$/;"	f
milu_explore_mutants_by_random_cover_fom	mutation/Milu3.c	/^GPtrArray * milu_explore_mutants_by_random_cover_fom(const Project * project, gint mutants_num, gint order_begin, gint order_end)$/;"	f
milu_free	mutation/Milu3.c	/^void milu_free()$/;"	f
milu_generate_mutants_by_order	mutation/Milu3.c	/^GPtrArray * milu_generate_mutants_by_order(const Project * project, gint order_begin, gint order_end)$/;"	f
milu_generate_mutants_by_order_range	mutation/Milu3.c	/^GPtrArray * milu_generate_mutants_by_order_range(Project * project, gint order_begin, gint order_end)$/;"	f
milu_get_multi_process	mutation/MultiProcessing.c	/^MultiProcess milu_get_multi_process()$/;"	f
milu_init	mutation/Milu3.c	/^void milu_init()$/;"	f
milu_multi_process_mutants	mutation/MultiProcessing.c	/^void milu_multi_process_mutants(GPtrArray * mutants, MultiProcessingMutantsFunc mfunc)$/;"	f
milu_mutation_analyse	mutation/MutationTemplate.c	/^void milu_mutation_analyse(GPtrArray * functions, GPtrArray * mut_operators, GPtrArray **  mut_locations, GPtrArray ** mut_template)$/;"	f
milu_options_free	mutation/Options.c	/^void milu_options_free()$/;"	f
milu_options_get_compilation_cmd	mutation/Options.c	/^gchar * milu_options_get_compilation_cmd()$/;"	f
milu_options_get_debug_info	mutation/Options.c	/^gchar * milu_options_get_debug_info()$/;"	f
milu_options_get_exec_strategy	mutation/Options.c	/^gint milu_options_get_exec_strategy()$/;"	f
milu_options_get_func_list_path	mutation/Options.c	/^gchar * milu_options_get_func_list_path()$/;"	f
milu_options_get_func_name	mutation/Options.c	/^gchar * milu_options_get_func_name()$/;"	f
milu_options_get_html_save_all	mutation/Options.c	/^gboolean milu_options_get_html_save_all()$/;"	f
milu_options_get_html_view	mutation/Options.c	/^gboolean milu_options_get_html_view()$/;"	f
milu_options_get_mid_file_path	mutation/Options.c	/^gchar * milu_options_get_mid_file_path()$/;"	f
milu_options_get_mut_operators_path	mutation/Options.c	/^gchar * milu_options_get_mut_operators_path()$/;"	f
milu_options_get_mut_order	mutation/Options.c	/^gint  milu_options_get_mut_order()$/;"	f
milu_options_get_mut_strategy	mutation/Options.c	/^gchar * milu_options_get_mut_strategy()$/;"	f
milu_options_get_order_end	mutation/Options.c	/^gint milu_options_get_order_end()$/;"	f
milu_options_get_order_start	mutation/Options.c	/^gint milu_options_get_order_start()$/;"	f
milu_options_get_output_path	mutation/Options.c	/^gchar * milu_options_get_output_path()$/;"	f
milu_options_get_rand_limit_number	mutation/Options.c	/^gint  milu_options_get_rand_limit_number()$/;"	f
milu_options_get_save_mid	mutation/Options.c	/^gboolean milu_options_get_save_mid()$/;"	f
milu_options_get_search_strategy	mutation/Options.c	/^gchar * milu_options_get_search_strategy()$/;"	f
milu_options_get_src_path	mutation/Options.c	/^gchar * milu_options_get_src_path()$/;"	f
milu_options_get_tag_list_path	mutation/Options.c	/^gchar * milu_options_get_tag_list_path()$/;"	f
milu_options_get_test_driver_path	mutation/Options.c	/^gchar * milu_options_get_test_driver_path()$/;"	f
milu_options_get_test_input_path	mutation/Options.c	/^gchar * milu_options_get_test_input_path()$/;"	f
milu_options_get_unit_test	mutation/Options.c	/^gboolean milu_options_get_unit_test()$/;"	f
milu_options_not_save_mutants	mutation/Options.c	/^gboolean milu_options_not_save_mutants()$/;"	f
milu_options_parse	mutation/Options.c	/^void milu_options_parse(int argc, char *argv[ ])$/;"	f
milu_options_print_killing_result	mutation/Options.c	/^gboolean milu_options_print_killing_result()$/;"	f
milu_options_save_killing_result	mutation/Options.c	/^gboolean milu_options_save_killing_result()$/;"	f
milu_options_set_html_save_all	mutation/Options.c	/^void milu_options_set_html_save_all()$/;"	f
milu_options_set_src_path	mutation/Options.c	/^void milu_options_set_src_path(gchar * path)$/;"	f
milu_options_set_test_driver_path	mutation/Options.c	/^void milu_options_set_test_driver_path(gchar * driver)$/;"	f
milu_print_killing_results	mutation/Milu3.c	/^void milu_print_killing_results(const Project * project, GPtrArray * mutants, FILE * output)$/;"	f
milu_print_results	mutation/Milu3.c	/^void milu_print_results(const Project * project, GPtrArray * mutants, FILE * output)$/;"	f
milu_project_analyse_template	mutation/Project.c	/^void milu_project_analyse_template(Project * project)$/;"	f
milu_project_free	mutation/Project.c	/^void milu_project_free(Project * project)$/;"	f
milu_project_is_executable	mutation/Project.c	/^gboolean milu_project_is_executable(const Project * project)$/;"	f
milu_project_load_function_settings	mutation/Project.c	/^void milu_project_load_function_settings(Project * project, const gchar * func_path)$/;"	f
milu_project_load_mut_operators_settings	mutation/Project.c	/^void milu_project_load_mut_operators_settings (Project * project, const gchar * mut_op_path)$/;"	f
milu_project_new	mutation/Project.c	/^Project * milu_project_new(const gchar * source_path, const gchar * output_path, const gchar * test_driver_path, const gchar * tests_path, const gchar * compilation_cmd)$/;"	f
milu_project_prepare_original_program	mutation/Project.c	/^void milu_project_prepare_original_program(Project * project)$/;"	f
milu_project_print	mutation/Project.c	/^void milu_project_print(const Project * project, PrintMode mode, FILE * output)$/;"	f
milu_project_save_html_output	mutation/Project.c	/^void milu_project_save_html_output(Project * project, GPtrArray * mutants)$/;"	f
milu_project_save_mid	mutation/Project.c	/^void milu_project_save_mid(Project * project, GPtrArray * mutants)$/;"	f
milu_restore_mutants_from_mid_file	mutation/Milu3.c	/^GPtrArray * milu_restore_mutants_from_mid_file(Project * project, gchar * mid_file)$/;"	f
milu_run_mutation_testing	mutation/Milu3.c	/^void milu_run_mutation_testing(Project * project, GPtrArray * mutants, StrategyType strategy_type)$/;"	f
milu_save_mutants	mutation/Milu3.c	/^void milu_save_mutants(GPtrArray * mutants)$/;"	f
milu_search_hom	mutation/Milu3.c	/^GPtrArray * milu_search_hom(const Project * project, gint mutants_num , gint strategy, gint order_begin, gint order_end)$/;"	f
milu_set_multi_process	mutation/MultiProcessing.c	/^void milu_set_multi_process(MultiProcess mp)$/;"	f
milu_utility_append_gptrarray	mutation/Utility.c	/^void  milu_utility_append_gptrarray(GPtrArray * gp_a, GPtrArray * gp_b )$/;"	f
milu_utility_check_dir	mutation/Utility.c	/^void milu_utility_check_dir(gchar * path)$/;"	f
milu_utility_load_text_file_to_gptrarray	mutation/Utility.c	/^GPtrArray * milu_utility_load_text_file_to_gptrarray(const gchar * path)$/;"	f
milu_utility_source_to_html	mutation/Utility.c	/^GString * milu_utility_source_to_html(GString * src)$/;"	f
milu_utility_split_gptrarray	mutation/Utility.c	/^GPtrArray * milu_utility_split_gptrarray(GPtrArray * gp, gint num)$/;"	f
mutant_check_compiled	mutation/Mutant.c	/^gboolean mutant_check_compiled(Mutant * mut)$/;"	f
mutant_check_dir	mutation/Mutant.c	/^void  mutant_check_dir(gchar * path)$/;"	f
mutant_check_duplication	mutation/Mutant.c	/^gboolean mutant_check_duplication(Mutant * curr_mut, Mutant * next_mut)$/;"	f
mutant_check_equivalence	mutation/Mutant.c	/^gboolean mutant_check_equivalence(Mutant * mut, Mutant * std)$/;"	f
mutant_compile	mutation/Mutant.c	/^void mutant_compile(Mutant * mut, gchar * command, gchar * driver)$/;"	f
mutant_evaluate_strongly_subsuming_fitness	mutation/Mutant.c	/^void mutant_evaluate_strongly_subsuming_fitness(Mutant * mut, GPtrArray * foms)$/;"	f
mutant_evaluate_subsuming_fitness	mutation/Mutant.c	/^void mutant_evaluate_subsuming_fitness(Mutant * mut, GPtrArray * foms)$/;"	f
mutant_executor_run	mutation/MutantExecutor.c	/^void mutant_executor_run(GPtrArray * mutants, Mutant * original, GPtrArray * tests, StrategyType strategy_type)$/;"	f
mutant_get_src_path	mutation/Mutant.c	/^gchar * mutant_get_src_path(gchar * mut_path)$/;"	f
mutant_has_results	mutation/Mutant.c	/^gboolean mutant_has_results(Mutant * mut)$/;"	f
mutant_ids_get_random_nth_order	mutation/MutationId.c	/^GPtrArray * mutant_ids_get_random_nth_order(GArray * num_template, gint mutants_num, gint order_begin, gint order_end)$/;"	f
mutant_ids_get_random_nth_order_cover_fom	mutation/MutationId.c	/^GPtrArray * mutant_ids_get_random_nth_order_cover_fom(GArray * num_template, gint mutants_num, gint order)$/;"	f
mutant_ids_is_equal_2_ordered_mids	mutation/MutationId.c	/^ gboolean mutant_ids_is_equal_2_ordered_mids(GArray * mid1, GArray * mid2)$/;"	f
mutant_is_compilable	mutation/Mutant.c	/^gboolean mutant_is_compilable(Mutant * mut)$/;"	f
mutant_is_duplicated	mutation/Mutant.c	/^gboolean mutant_is_duplicated(Mutant * mut)$/;"	f
mutant_is_equivalent	mutation/Mutant.c	/^gboolean mutant_is_equivalent(Mutant * mut)$/;"	f
mutant_is_killed	mutation/Mutant.c	/^gboolean mutant_is_killed(Mutant * mut)$/;"	f
mutant_new	mutation/Mutant.c	/^Mutant * mutant_new(MutationId * id, gint file_id, gchar * base_path)$/;"	f
mutant_new_original	mutation/Mutant.c	/^Mutant * mutant_new_original(gchar * base_path)$/;"	f
mutant_print	mutation/Mutant.c	/^void mutant_print(Mutant * mut, FILE * output)$/;"	f
mutant_results_clean	mutation/Mutant.c	/^void mutant_results_clean(Mutant * mut)$/;"	f
mutant_results_load	mutation/Mutant.c	/^void mutant_results_load(Mutant * mut, gchar * results)$/;"	f
mutant_results_save	mutation/Mutant.c	/^void mutant_results_save(Mutant * mut, FILE * output)$/;"	f
mutant_results_set_kill	mutation/Mutant.c	/^void mutant_results_set_kill(Mutant * mut)$/;"	f
mutant_results_set_not_kill	mutation/Mutant.c	/^void mutant_results_set_not_kill(Mutant * mut)$/;"	f
mutant_run	mutation/Mutant.c	/^gboolean mutant_run(Mutant * mut, Mutant * std, gchar * test)$/;"	f
mutant_save	mutation/Mutant.c	/^void mutant_save(Mutant * mut)$/;"	f
mutant_save_html	mutation/Mutant.c	/^void mutant_save_html(Mutant * mut)$/;"	f
mutant_save_id	mutation/Mutant.c	/^void mutant_save_id(Mutant * mut, FILE * output)$/;"	f
mutant_set_duplicated	mutation/Mutant.c	/^void mutant_set_duplicated(Mutant * mut)$/;"	f
mutant_set_equivalence	mutation/Mutant.c	/^void mutant_set_equivalence(Mutant * mut)$/;"	f
mutant_set_killed	mutation/Mutant.c	/^void mutant_set_killed(Mutant * mut)$/;"	f
mutants_append_mutants	mutation/MutantSet.c	/^void mutants_append_mutants(GPtrArray * mutantsA, GPtrArray * mutantsB)$/;"	f
mutants_cal_mutation_score	mutation/MutantSet.c	/^gfloat mutants_cal_mutation_score(GPtrArray * mutants)$/;"	f
mutants_check_compiled	mutation/MutantSet.c	/^void mutants_check_compiled(GPtrArray * muts)$/;"	f
mutants_check_duplication	mutation/MutantSet.c	/^void mutants_check_duplication(GPtrArray * muts)$/;"	f
mutants_check_equivalence	mutation/MutantSet.c	/^void mutants_check_equivalence(GPtrArray * muts, Mutant * std)$/;"	f
mutants_compile	mutation/MutantSet.c	/^void mutants_compile(GPtrArray * muts)$/;"	f
mutants_compile_	mutation/MutantSet.c	/^static void mutants_compile_(GPtrArray * muts, gchar * command, gchar * driver) \/\/ Depreciate$/;"	f	file:
mutants_free	mutation/MutantSet.c	/^void mutants_free(GPtrArray * mutants)$/;"	f
mutants_get_compiled_number	mutation/MutantSet.c	/^gint mutants_get_compiled_number(GPtrArray * mutants)$/;"	f
mutants_get_duplicated_number	mutation/MutantSet.c	/^gint mutants_get_duplicated_number(GPtrArray * mutants)$/;"	f
mutants_get_equivalent_number	mutation/MutantSet.c	/^gint mutants_get_equivalent_number(GPtrArray * mutants)$/;"	f
mutants_get_killed_number	mutation/MutantSet.c	/^gint mutants_get_killed_number(GPtrArray * mutants)$/;"	f
mutants_get_non_equivalent_number	mutation/MutantSet.c	/^gint mutants_get_non_equivalent_number(GPtrArray * mutants)$/;"	f
mutants_new	mutation/MutantSet.c	/^GPtrArray * mutants_new(GPtrArray * ids, gchar * muts_path)$/;"	f
mutants_path	include/Project.h	/^    gchar * mutants_path; \/**< The path for mutants. *\/$/;"	m	struct:MiluProject
mutants_print	mutation/MutantSet.c	/^void mutants_print(GPtrArray * muts, FILE * output)$/;"	f
mutants_results_clean	mutation/MutantSet.c	/^void mutants_results_clean(GPtrArray * mutants)$/;"	f
mutants_results_load	mutation/MutantSet.c	/^void mutants_results_load(GPtrArray * muts, gchar * muts_results_path)$/;"	f
mutants_results_save	mutation/MutantSet.c	/^void mutants_results_save(GPtrArray * muts, FILE * output)$/;"	f
mutants_save	mutation/MutantSet.c	/^void mutants_save(GPtrArray * muts)$/;"	f
mutants_save_id	mutation/MutantSet.c	/^void mutants_save_id(GPtrArray * muts, FILE * output)$/;"	f
mutate	include/Mutator.h	/^	MutatorMutate mutate;             \/**<  The method to check mutate the node. *\/$/;"	m	struct:MiluMutator
mutation_compact_id_expend	mutation/MutationId.c	/^static void mutation_compact_id_expend(MutationCompactId * mcid, gint pos, MutationId * curr_id, GPtrArray * mids)$/;"	f	file:
mutation_compact_ids_expend	mutation/MutationId.c	/^GPtrArray * mutation_compact_ids_expend(GPtrArray * mcids)$/;"	f
mutation_compact_ids_get_next_order	mutation/MutationId.c	/^static void mutation_compact_ids_get_next_order(GArray * mut_num_template, gint pos, gint order, MutationCompactId * curr_mcid, GPtrArray * mcids)$/;"	f	file:
mutation_compact_ids_get_nth_order	mutation/MutationId.c	/^GPtrArray * mutation_compact_ids_get_nth_order(GArray * num_template, gint order)$/;"	f
mutation_id_clone	mutation/MutationId.c	/^static MutationId * mutation_id_clone(MutationId * mid)$/;"	f	file:
mutation_id_free	mutation/MutationId.c	/^void mutation_id_free(MutationId * mid)$/;"	f
mutation_id_get_random_nth_order	mutation/MutationId.c	/^GArray * mutation_id_get_random_nth_order(GArray * num_template, gint order)$/;"	f
mutation_id_new	mutation/MutationId.c	/^MutationId * mutation_id_new()$/;"	f
mutation_id_new_from_text	mutation/MutationId.c	/^MutationId * mutation_id_new_from_text(gchar * mid_text)$/;"	f
mutation_id_print	mutation/MutationId.c	/^void mutation_id_print(MutationId * mid, FILE * output)$/;"	f
mutation_ids_free	mutation/MutationId.c	/^void mutation_ids_free(GPtrArray * mids)$/;"	f
mutation_ids_get_1st_order	mutation/MutationId.c	/^GPtrArray * mutation_ids_get_1st_order(GArray * num_template)$/;"	f
mutation_ids_get_next_order	mutation/MutationId.c	/^GPtrArray * mutation_ids_get_next_order(GPtrArray * mids, GPtrArray * fom_mids )$/;"	f
mutation_ids_print	mutation/MutationId.c	/^void mutation_ids_print(GPtrArray * mids, FILE * output)$/;"	f
mutation_locations	include/Project.h	/^    GPtrArray * mutation_locations; \/**< The locations for all mutants. *\/$/;"	m	struct:MiluProject
mutation_num_template	include/Project.h	/^    MutationNumTemplate * mutation_num_template; \/**< The mutation template for all mutants in numeric form. *\/$/;"	m	struct:MiluProject
mutation_num_template_free	mutation/MutationTemplate.c	/^void mutation_num_template_free(MutationNumTemplate * mut_num_template)$/;"	f
mutation_operator_free	mutation/MutationOperator.c	/^void mutation_operator_free(Operator * op)$/;"	f
mutation_operator_new	mutation/MutationOperator.c	/^Operator * mutation_operator_new(const gchar * name, const gchar * info)$/;"	f
mutation_operator_print	mutation/MutationOperator.c	/^void mutation_operator_print(Operator * op, FILE * output)$/;"	f
mutation_operator_size	mutation/MutationOperator.c	/^guint mutation_operator_size(Operator * op)$/;"	f
mutation_operators	include/Project.h	/^    GPtrArray * mutation_operators; \/**< The set of mutation operators for current project. *\/$/;"	m	struct:MiluProject
mutation_operators_free	mutation/MutationOperator.c	/^void mutation_operators_free(GPtrArray * mut_operators)$/;"	f
mutation_operators_load	mutation/MutationOperator.c	/^GPtrArray * mutation_operators_load(const gchar * mut_op_path)$/;"	f
mutation_operators_print	mutation/MutationOperator.c	/^void mutation_operators_print(GPtrArray * mut_operators, FILE * output)$/;"	f
mutation_template	include/Project.h	/^    MutationTemplate * mutation_template ; \/**< The mutation template for all mutants. *\/$/;"	m	struct:MiluProject
mutation_template_apply_mutation	mutation/MutationTemplate.c	/^void mutation_template_apply_mutation(gint loc, gint id)$/;"	f
mutation_template_check_function	mutation/MutationTemplate.c	/^gchar * mutation_template_check_function(gint loc)$/;"	f
mutation_template_check_mutation	mutation/MutationTemplate.c	/^static gboolean mutation_template_check_mutation(ASTNode * node, gpointer data)$/;"	f	file:
mutation_template_clean_mutation	mutation/MutationTemplate.c	/^void mutation_template_clean_mutation(gint loc, gint id)$/;"	f
mutation_template_generate_mutants	mutation/MutationTemplate.c	/^GPtrArray * mutation_template_generate_mutants(GArray * num_template, gint order, gchar * muts_path)$/;"	f
mutation_template_generate_random_mutants	mutation/MutationTemplate.c	/^GPtrArray * mutation_template_generate_random_mutants(GArray * num_template, gint mutants_num, gint order_begin, gint order_end, gchar * muts_path)$/;"	f
mutation_template_generate_random_mutants_cover_fom	mutation/MutationTemplate.c	/^GPtrArray * mutation_template_generate_random_mutants_cover_fom(GArray * num_template, gint mutants_num, gint order, gchar * muts_path)$/;"	f
mutation_template_get_current	mutation/MutationTemplate.c	/^MutationTemplate * mutation_template_get_current()$/;"	f
mutation_template_location_free	mutation/MutationTemplate.c	/^void mutation_template_location_free(GPtrArray * mut_template, GPtrArray * mut_locations)$/;"	f
mutation_template_num_form	mutation/MutationTemplate.c	/^GArray * mutation_template_num_form(GPtrArray * mut_template)$/;"	f
mutation_template_num_form_print	mutation/MutationTemplate.c	/^void mutation_template_num_form_print(GArray * mut_num_template, FILE * output)$/;"	f
mutator_austin_milu_add_arithmetic_replacement	mutators/austin/OAAN/austin_add_arithmetic_replacement.c	/^Mutator * mutator_austin_milu_add_arithmetic_replacement()$/;"	f
mutator_austin_milu_and_logical_negation	mutators/austin/OLNG/austin_and_logical_negation.c	/^Mutator * mutator_austin_milu_and_logical_negation()$/;"	f
mutator_austin_milu_and_logical_replacement	mutators/austin/OLLN/austin_and_logical_replacement.c	/^Mutator * mutator_austin_milu_and_logical_replacement()$/;"	f
mutator_austin_milu_divide_arithmetic_replacement	mutators/austin/OAAN/austin_divide_arithmetic_replacement.c	/^Mutator * mutator_austin_milu_divide_arithmetic_replacement()$/;"	f
mutator_austin_milu_equal_relational_replacement	mutators/austin/ORRN/austin_equal_relational_replacement.c	/^Mutator * mutator_austin_milu_equal_relational_replacement()$/;"	f
mutator_austin_milu_greater_equal_relational_replacement	mutators/austin/ORRN/austin_greater_equal_relational_replacement.c	/^Mutator * mutator_austin_milu_greater_equal_relational_replacement()$/;"	f
mutator_austin_milu_greater_relational_replacement	mutators/austin/ORRN/austin_greater_relationa_replacement.c	/^Mutator * mutator_austin_milu_greater_relational_replacement()$/;"	f
mutator_austin_milu_integer_constant_replacement	mutators/austin/CRCR/austin_integer_constant_replacement.c	/^Mutator * mutator_austin_milu_integer_constant_replacement()$/;"	f
mutator_austin_milu_less_equal_relational_replacement	mutators/austin/ORRN/austin_less_equal_relational_replacement.c	/^Mutator * mutator_austin_milu_less_equal_relational_replacement()$/;"	f
mutator_austin_milu_less_relational_replacement	mutators/austin/ORRN/austin_less_relational_replacement.c	/^Mutator * mutator_austin_milu_less_relational_replacement()$/;"	f
mutator_austin_milu_modulus_arithmetic_replacement	mutators/austin/OAAN/austin_modulus_arithmetic_replacement.c	/^Mutator * mutator_austin_milu_modulus_arithmetic_replacement()$/;"	f
mutator_austin_milu_multiply_arithmetic_replacement	mutators/austin/OAAN/austin_multiply_arithmetic_replacement.c	/^Mutator * mutator_austin_milu_multiply_arithmetic_replacement()$/;"	f
mutator_austin_milu_not_equal_relational_replacement	mutators/austin/ORRN/austin_not_equal_relational_replacement.c	/^Mutator * mutator_austin_milu_not_equal_relational_replacement()$/;"	f
mutator_austin_milu_or_logical_negation	mutators/austin/OLNG/austin_or_logical_negation.c	/^Mutator * mutator_austin_milu_or_logical_negation()$/;"	f
mutator_austin_milu_or_logical_replacement	mutators/austin/OLLN/austin_or_logical_replacement.c	/^Mutator * mutator_austin_milu_or_logical_replacement()$/;"	f
mutator_austin_milu_subtract_arithmetic_replacement	mutators/austin/OAAN/austin_subtract_arithmetic_replacement.c	/^Mutator * mutator_austin_milu_subtract_arithmetic_replacement()$/;"	f
mutator_bio_node_generator_for_austin_milu	mutation/Mutator.c	/^ASTNode * mutator_bio_node_generator_for_austin_milu(ASTNode * node, gchar * mut_text)$/;"	f
mutator_free	mutation/Mutator.c	/^void mutator_free(Mutator * mut)$/;"	f
mutator_integer_constant_node_generator_for_austin_milu	mutation/Mutator.c	/^ASTNode * mutator_integer_constant_node_generator_for_austin_milu(ASTNode * node, gchar * mut_text)$/;"	f
mutator_milu_add_arithmetic_assignment_replacement	mutators/selective_c/OAAA/add_arithmetic_assignment_replacement.c	/^Mutator * mutator_milu_add_arithmetic_assignment_replacement()$/;"	f
mutator_milu_add_arithmetic_assignment_replacement_clean	mutators/selective_c/OAAA/add_arithmetic_assignment_replacement.c	/^static gboolean mutator_milu_add_arithmetic_assignment_replacement_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_add_arithmetic_assignment_replacement_mutate	mutators/selective_c/OAAA/add_arithmetic_assignment_replacement.c	/^static gboolean mutator_milu_add_arithmetic_assignment_replacement_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_add_arithmetic_assignment_replacement_node_checking	mutators/selective_c/OAAA/add_arithmetic_assignment_replacement.c	/^static gboolean mutator_milu_add_arithmetic_assignment_replacement_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_add_arithmetic_replacement	mutators/selective_c/OAAN/add_arithmetic_replacement.c	/^Mutator * mutator_milu_add_arithmetic_replacement()$/;"	f
mutator_milu_add_arithmetic_replacement_clean	mutators/austin/OAAN/austin_add_arithmetic_replacement.c	/^static gboolean mutator_milu_add_arithmetic_replacement_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_add_arithmetic_replacement_clean	mutators/selective_c/OAAN/add_arithmetic_replacement.c	/^static gboolean mutator_milu_add_arithmetic_replacement_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_add_arithmetic_replacement_mutate	mutators/austin/OAAN/austin_add_arithmetic_replacement.c	/^static gboolean mutator_milu_add_arithmetic_replacement_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_add_arithmetic_replacement_mutate	mutators/selective_c/OAAN/add_arithmetic_replacement.c	/^static gboolean mutator_milu_add_arithmetic_replacement_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_add_arithmetic_replacement_node_checking	mutators/austin/OAAN/austin_add_arithmetic_replacement.c	/^static gboolean mutator_milu_add_arithmetic_replacement_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_add_arithmetic_replacement_node_checking	mutators/selective_c/OAAN/add_arithmetic_replacement.c	/^static gboolean mutator_milu_add_arithmetic_replacement_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_and_logical_negation	mutators/selective_c/OLNG/and_logical_negation.c	/^Mutator * mutator_milu_and_logical_negation()$/;"	f
mutator_milu_and_logical_negation_clean	mutators/austin/OLNG/austin_and_logical_negation.c	/^static gboolean mutator_milu_and_logical_negation_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_and_logical_negation_clean	mutators/selective_c/OLNG/and_logical_negation.c	/^static gboolean mutator_milu_and_logical_negation_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_and_logical_negation_mutate	mutators/austin/OLNG/austin_and_logical_negation.c	/^static gboolean mutator_milu_and_logical_negation_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_and_logical_negation_mutate	mutators/selective_c/OLNG/and_logical_negation.c	/^static gboolean mutator_milu_and_logical_negation_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_and_logical_negation_node_checking	mutators/austin/OLNG/austin_and_logical_negation.c	/^static gboolean mutator_milu_and_logical_negation_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_and_logical_negation_node_checking	mutators/selective_c/OLNG/and_logical_negation.c	/^static gboolean mutator_milu_and_logical_negation_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_and_logical_replacement	mutators/selective_c/OLLN/and_logical_replacement.c	/^Mutator * mutator_milu_and_logical_replacement()$/;"	f
mutator_milu_and_logical_replacement_clean	mutators/austin/OLLN/austin_and_logical_replacement.c	/^static gboolean mutator_milu_and_logical_replacement_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_and_logical_replacement_clean	mutators/selective_c/OLLN/and_logical_replacement.c	/^static gboolean mutator_milu_and_logical_replacement_clean(ASTNode * node,gint type)$/;"	f	file:
mutator_milu_and_logical_replacement_mutate	mutators/austin/OLLN/austin_and_logical_replacement.c	/^static gboolean mutator_milu_and_logical_replacement_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_and_logical_replacement_mutate	mutators/selective_c/OLLN/and_logical_replacement.c	/^static gboolean mutator_milu_and_logical_replacement_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_and_logical_replacement_node_checking	mutators/austin/OLLN/austin_and_logical_replacement.c	/^static gboolean mutator_milu_and_logical_replacement_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_and_logical_replacement_node_checking	mutators/selective_c/OLLN/and_logical_replacement.c	/^static gboolean mutator_milu_and_logical_replacement_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_bitwise_and_logical_assignment_replacement	mutators/selective_c/OBBA/bitwise_and_logical_assignment_replacement.c	/^Mutator * mutator_milu_bitwise_and_logical_assignment_replacement()$/;"	f
mutator_milu_bitwise_and_logical_assignment_replacement_clean	mutators/selective_c/OBBA/bitwise_and_logical_assignment_replacement.c	/^static gboolean mutator_milu_bitwise_and_logical_assignment_replacement_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_bitwise_and_logical_assignment_replacement_mutate	mutators/selective_c/OBBA/bitwise_and_logical_assignment_replacement.c	/^static gboolean mutator_milu_bitwise_and_logical_assignment_replacement_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_bitwise_and_logical_assignment_replacement_node_checking	mutators/selective_c/OBBA/bitwise_and_logical_assignment_replacement.c	/^static gboolean mutator_milu_bitwise_and_logical_assignment_replacement_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_bitwise_and_logical_replacement	mutators/selective_c/OBBN/bitwise_and_logical_replacement.c	/^Mutator * mutator_milu_bitwise_and_logical_replacement()$/;"	f
mutator_milu_bitwise_and_logical_replacement_clean	mutators/selective_c/OBBN/bitwise_and_logical_replacement.c	/^static gboolean mutator_milu_bitwise_and_logical_replacement_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_bitwise_and_logical_replacement_mutate	mutators/selective_c/OBBN/bitwise_and_logical_replacement.c	/^static gboolean mutator_milu_bitwise_and_logical_replacement_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_bitwise_and_logical_replacement_node_checking	mutators/selective_c/OBBN/bitwise_and_logical_replacement.c	/^static gboolean mutator_milu_bitwise_and_logical_replacement_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_bitwise_or_logical_assignment_replacement	mutators/selective_c/OBBA/bitwise_or_logical_assignment_replacement.c	/^Mutator * mutator_milu_bitwise_or_logical_assignment_replacement()$/;"	f
mutator_milu_bitwise_or_logical_assignment_replacement_clean	mutators/selective_c/OBBA/bitwise_or_logical_assignment_replacement.c	/^static gboolean mutator_milu_bitwise_or_logical_assignment_replacement_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_bitwise_or_logical_assignment_replacement_mutate	mutators/selective_c/OBBA/bitwise_or_logical_assignment_replacement.c	/^static gboolean mutator_milu_bitwise_or_logical_assignment_replacement_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_bitwise_or_logical_assignment_replacement_node_checking	mutators/selective_c/OBBA/bitwise_or_logical_assignment_replacement.c	/^static gboolean mutator_milu_bitwise_or_logical_assignment_replacement_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_bitwise_or_logical_replacement	mutators/selective_c/OBBN/bitwise_or_logical_replacement.c	/^Mutator * mutator_milu_bitwise_or_logical_replacement()$/;"	f
mutator_milu_bitwise_or_logical_replacement_clean	mutators/selective_c/OBBN/bitwise_or_logical_replacement.c	/^static gboolean mutator_milu_bitwise_or_logical_replacement_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_bitwise_or_logical_replacement_mutate	mutators/selective_c/OBBN/bitwise_or_logical_replacement.c	/^static gboolean mutator_milu_bitwise_or_logical_replacement_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_bitwise_or_logical_replacement_node_checking	mutators/selective_c/OBBN/bitwise_or_logical_replacement.c	/^static gboolean mutator_milu_bitwise_or_logical_replacement_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_break_continue_replacement	mutators/other_c/SBRC/break_continue_replacement.c	/^Mutator * mutator_milu_break_continue_replacement()$/;"	f
mutator_milu_break_continue_replacement_clean	mutators/other_c/SBRC/break_continue_replacement.c	/^static gboolean mutator_milu_break_continue_replacement_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_break_continue_replacement_mutate	mutators/other_c/SBRC/break_continue_replacement.c	/^static gboolean mutator_milu_break_continue_replacement_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_break_statement_node_checking	mutators/other_c/SBRC/break_continue_replacement.c	/^static gboolean mutator_milu_break_statement_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_divide_arithmetic_assignment_replacement	mutators/selective_c/OAAA/divide_arithmetic_assignment_replacement.c	/^Mutator * mutator_milu_divide_arithmetic_assignment_replacement()$/;"	f
mutator_milu_divide_arithmetic_assignment_replacement_clean	mutators/selective_c/OAAA/divide_arithmetic_assignment_replacement.c	/^static gboolean mutator_milu_divide_arithmetic_assignment_replacement_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_divide_arithmetic_assignment_replacement_mutate	mutators/selective_c/OAAA/divide_arithmetic_assignment_replacement.c	/^static gboolean mutator_milu_divide_arithmetic_assignment_replacement_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_divide_arithmetic_assignment_replacement_node_checking	mutators/selective_c/OAAA/divide_arithmetic_assignment_replacement.c	/^static gboolean mutator_milu_divide_arithmetic_assignment_replacement_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_divide_arithmetic_replacement	mutators/selective_c/OAAN/divide_arithmetic_replacement.c	/^Mutator * mutator_milu_divide_arithmetic_replacement()$/;"	f
mutator_milu_divide_arithmetic_replacement_clean	mutators/austin/OAAN/austin_divide_arithmetic_replacement.c	/^static gboolean mutator_milu_divide_arithmetic_replacement_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_divide_arithmetic_replacement_clean	mutators/selective_c/OAAN/divide_arithmetic_replacement.c	/^static gboolean mutator_milu_divide_arithmetic_replacement_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_divide_arithmetic_replacement_mutate	mutators/austin/OAAN/austin_divide_arithmetic_replacement.c	/^static gboolean mutator_milu_divide_arithmetic_replacement_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_divide_arithmetic_replacement_mutate	mutators/selective_c/OAAN/divide_arithmetic_replacement.c	/^static gboolean mutator_milu_divide_arithmetic_replacement_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_divide_arithmetic_replacement_node_checking	mutators/austin/OAAN/austin_divide_arithmetic_replacement.c	/^static gboolean mutator_milu_divide_arithmetic_replacement_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_divide_arithmetic_replacement_node_checking	mutators/selective_c/OAAN/divide_arithmetic_replacement.c	/^static gboolean mutator_milu_divide_arithmetic_replacement_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_equal_relational_replacement	mutators/selective_c/ORRN/equal_relational_replacement.c	/^Mutator * mutator_milu_equal_relational_replacement()$/;"	f
mutator_milu_equal_relational_replacement_clean	mutators/austin/ORRN/austin_equal_relational_replacement.c	/^static gboolean mutator_milu_equal_relational_replacement_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_equal_relational_replacement_clean	mutators/selective_c/ORRN/equal_relational_replacement.c	/^static gboolean mutator_milu_equal_relational_replacement_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_equal_relational_replacement_mutate	mutators/austin/ORRN/austin_equal_relational_replacement.c	/^static gboolean mutator_milu_equal_relational_replacement_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_equal_relational_replacement_mutate	mutators/selective_c/ORRN/equal_relational_replacement.c	/^static gboolean mutator_milu_equal_relational_replacement_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_equal_relational_replacement_node_checking	mutators/austin/ORRN/austin_equal_relational_replacement.c	/^static gboolean mutator_milu_equal_relational_replacement_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_equal_relational_replacement_node_checking	mutators/selective_c/ORRN/equal_relational_replacement.c	/^static gboolean mutator_milu_equal_relational_replacement_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_float_constant_replacement	mutators/selective_c/CRCR/float_constant_replacement.c	/^Mutator * mutator_milu_float_constant_replacement()$/;"	f
mutator_milu_float_constant_replacement_clean	mutators/selective_c/CRCR/float_constant_replacement.c	/^static gboolean mutator_milu_float_constant_replacement_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_float_constant_replacement_mutate	mutators/selective_c/CRCR/float_constant_replacement.c	/^static gboolean mutator_milu_float_constant_replacement_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_float_constant_replacement_node_checking	mutators/selective_c/CRCR/float_constant_replacement.c	/^static gboolean mutator_milu_float_constant_replacement_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_float_var_abs_insertion	mutators/selective_c/ABS/float_var_abs_insertion.c	/^Mutator * mutator_milu_float_var_abs_insertion()$/;"	f
mutator_milu_float_var_abs_insertion_clean	mutators/selective_c/ABS/float_var_abs_insertion.c	/^static gboolean mutator_milu_float_var_abs_insertion_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_float_var_abs_insertion_mutate	mutators/selective_c/ABS/float_var_abs_insertion.c	/^static gboolean mutator_milu_float_var_abs_insertion_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_float_var_abs_insertion_node_checking	mutators/selective_c/ABS/float_var_abs_insertion.c	/^static gboolean mutator_milu_float_var_abs_insertion_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_greater_equal_relational_replacement	mutators/selective_c/ORRN/greater_equal_relational_replacement.c	/^Mutator * mutator_milu_greater_equal_relational_replacement()$/;"	f
mutator_milu_greater_equal_relational_replacement_clean	mutators/austin/ORRN/austin_greater_equal_relational_replacement.c	/^static gboolean mutator_milu_greater_equal_relational_replacement_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_greater_equal_relational_replacement_clean	mutators/selective_c/ORRN/greater_equal_relational_replacement.c	/^static gboolean mutator_milu_greater_equal_relational_replacement_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_greater_equal_relational_replacement_mutate	mutators/austin/ORRN/austin_greater_equal_relational_replacement.c	/^static gboolean mutator_milu_greater_equal_relational_replacement_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_greater_equal_relational_replacement_mutate	mutators/selective_c/ORRN/greater_equal_relational_replacement.c	/^static gboolean mutator_milu_greater_equal_relational_replacement_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_greater_equal_relational_replacement_node_checking	mutators/austin/ORRN/austin_greater_equal_relational_replacement.c	/^static gboolean mutator_milu_greater_equal_relational_replacement_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_greater_equal_relational_replacement_node_checking	mutators/selective_c/ORRN/greater_equal_relational_replacement.c	/^static gboolean mutator_milu_greater_equal_relational_replacement_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_greater_relational_replacement	mutators/selective_c/ORRN/greater_relational_replacement.c	/^Mutator * mutator_milu_greater_relational_replacement()$/;"	f
mutator_milu_greater_relational_replacement_clean	mutators/austin/ORRN/austin_greater_relationa_replacement.c	/^static gboolean mutator_milu_greater_relational_replacement_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_greater_relational_replacement_clean	mutators/selective_c/ORRN/greater_relational_replacement.c	/^static gboolean mutator_milu_greater_relational_replacement_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_greater_relational_replacement_mutate	mutators/austin/ORRN/austin_greater_relationa_replacement.c	/^static gboolean mutator_milu_greater_relational_replacement_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_greater_relational_replacement_mutate	mutators/selective_c/ORRN/greater_relational_replacement.c	/^static gboolean mutator_milu_greater_relational_replacement_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_greater_relational_replacement_node_checking	mutators/austin/ORRN/austin_greater_relationa_replacement.c	/^static gboolean mutator_milu_greater_relational_replacement_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_greater_relational_replacement_node_checking	mutators/selective_c/ORRN/greater_relational_replacement.c	/^static gboolean mutator_milu_greater_relational_replacement_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_if_expression_negation	mutators/selective_c/OCNG/if_expression_negation_replacement.c	/^Mutator * mutator_milu_if_expression_negation()$/;"	f
mutator_milu_if_expression_negation_clean	mutators/selective_c/OCNG/if_expression_negation_replacement.c	/^static gboolean mutator_milu_if_expression_negation_clean(ASTNode * node,gint type)$/;"	f	file:
mutator_milu_if_expression_negation_mutate	mutators/selective_c/OCNG/if_expression_negation_replacement.c	/^static gboolean mutator_milu_if_expression_negation_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_if_expression_negation_node_checking	mutators/selective_c/OCNG/if_expression_negation_replacement.c	/^static gboolean mutator_milu_if_expression_negation_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_integer_constant_replacement	mutators/selective_c/CRCR/integer_constant_replacement.c	/^Mutator * mutator_milu_integer_constant_replacement()$/;"	f
mutator_milu_integer_constant_replacement_clean	mutators/austin/CRCR/austin_integer_constant_replacement.c	/^static gboolean mutator_milu_integer_constant_replacement_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_integer_constant_replacement_clean	mutators/selective_c/CRCR/integer_constant_replacement.c	/^static gboolean mutator_milu_integer_constant_replacement_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_integer_constant_replacement_mutate	mutators/austin/CRCR/austin_integer_constant_replacement.c	/^static gboolean mutator_milu_integer_constant_replacement_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_integer_constant_replacement_mutate	mutators/selective_c/CRCR/integer_constant_replacement.c	/^static gboolean mutator_milu_integer_constant_replacement_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_integer_constant_replacement_node_checking	mutators/austin/CRCR/austin_integer_constant_replacement.c	/^static gboolean mutator_milu_integer_constant_replacement_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_integer_constant_replacement_node_checking	mutators/selective_c/CRCR/integer_constant_replacement.c	/^static gboolean mutator_milu_integer_constant_replacement_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_integer_var_abs_insertion	mutators/selective_c/ABS/integer_var_abs_insertion.c	/^Mutator * mutator_milu_integer_var_abs_insertion()$/;"	f
mutator_milu_integer_var_abs_insertion_clean	mutators/selective_c/ABS/integer_var_abs_insertion.c	/^static gboolean mutator_milu_integer_var_abs_insertion_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_integer_var_abs_insertion_mutate	mutators/selective_c/ABS/integer_var_abs_insertion.c	/^static gboolean mutator_milu_integer_var_abs_insertion_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_integer_var_abs_insertion_node_checking	mutators/selective_c/ABS/integer_var_abs_insertion.c	/^static gboolean mutator_milu_integer_var_abs_insertion_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_integer_var_uoi_insertion	mutators/selective_c/UOI/integer_var_uoi_insertion.c	/^Mutator * mutator_milu_integer_var_uoi_insertion()$/;"	f
mutator_milu_integer_var_uoi_insertion_clean	mutators/selective_c/UOI/integer_var_uoi_insertion.c	/^static gboolean mutator_milu_integer_var_uoi_insertion_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_integer_var_uoi_insertion_mutate	mutators/selective_c/UOI/integer_var_uoi_insertion.c	/^static gboolean mutator_milu_integer_var_uoi_insertion_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_integer_var_uoi_insertion_node_checking	mutators/selective_c/UOI/integer_var_uoi_insertion.c	/^static gboolean mutator_milu_integer_var_uoi_insertion_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_less_equal_relational_replacement	mutators/selective_c/ORRN/less_equal_relational_replacement.c	/^Mutator * mutator_milu_less_equal_relational_replacement()$/;"	f
mutator_milu_less_equal_relational_replacement_clean	mutators/austin/ORRN/austin_less_equal_relational_replacement.c	/^static gboolean mutator_milu_less_equal_relational_replacement_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_less_equal_relational_replacement_clean	mutators/selective_c/ORRN/less_equal_relational_replacement.c	/^static gboolean mutator_milu_less_equal_relational_replacement_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_less_equal_relational_replacement_mutate	mutators/austin/ORRN/austin_less_equal_relational_replacement.c	/^static gboolean mutator_milu_less_equal_relational_replacement_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_less_equal_relational_replacement_mutate	mutators/selective_c/ORRN/less_equal_relational_replacement.c	/^static gboolean mutator_milu_less_equal_relational_replacement_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_less_equal_relational_replacement_node_checking	mutators/austin/ORRN/austin_less_equal_relational_replacement.c	/^static gboolean mutator_milu_less_equal_relational_replacement_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_less_equal_relational_replacement_node_checking	mutators/selective_c/ORRN/less_equal_relational_replacement.c	/^static gboolean mutator_milu_less_equal_relational_replacement_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_less_relational_replacement	mutators/selective_c/ORRN/less_relational_replacement.c	/^Mutator * mutator_milu_less_relational_replacement()$/;"	f
mutator_milu_less_relational_replacement_clean	mutators/austin/ORRN/austin_less_relational_replacement.c	/^static gboolean mutator_milu_less_relational_replacement_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_less_relational_replacement_clean	mutators/selective_c/ORRN/less_relational_replacement.c	/^static gboolean mutator_milu_less_relational_replacement_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_less_relational_replacement_mutate	mutators/austin/ORRN/austin_less_relational_replacement.c	/^static gboolean mutator_milu_less_relational_replacement_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_less_relational_replacement_mutate	mutators/selective_c/ORRN/less_relational_replacement.c	/^static gboolean mutator_milu_less_relational_replacement_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_less_relational_replacement_node_checking	mutators/austin/ORRN/austin_less_relational_replacement.c	/^static gboolean mutator_milu_less_relational_replacement_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_less_relational_replacement_node_checking	mutators/selective_c/ORRN/less_relational_replacement.c	/^static gboolean mutator_milu_less_relational_replacement_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_modulus_arithmetic_assignment_replacement	mutators/selective_c/OAAA/modulus_arithmetic_assignment_replacement.c	/^Mutator * mutator_milu_modulus_arithmetic_assignment_replacement()$/;"	f
mutator_milu_modulus_arithmetic_assignment_replacement_clean	mutators/selective_c/OAAA/modulus_arithmetic_assignment_replacement.c	/^static gboolean mutator_milu_modulus_arithmetic_assignment_replacement_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_modulus_arithmetic_assignment_replacement_mutate	mutators/selective_c/OAAA/modulus_arithmetic_assignment_replacement.c	/^static gboolean mutator_milu_modulus_arithmetic_assignment_replacement_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_modulus_arithmetic_assignment_replacement_node_checking	mutators/selective_c/OAAA/modulus_arithmetic_assignment_replacement.c	/^static gboolean mutator_milu_modulus_arithmetic_assignment_replacement_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_modulus_arithmetic_replacement	mutators/selective_c/OAAN/modulus_arithmetic_replacement.c	/^Mutator * mutator_milu_modulus_arithmetic_replacement()$/;"	f
mutator_milu_modulus_arithmetic_replacement_clean	mutators/austin/OAAN/austin_modulus_arithmetic_replacement.c	/^static gboolean mutator_milu_modulus_arithmetic_replacement_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_modulus_arithmetic_replacement_clean	mutators/selective_c/OAAN/modulus_arithmetic_replacement.c	/^static gboolean mutator_milu_modulus_arithmetic_replacement_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_modulus_arithmetic_replacement_mutate	mutators/austin/OAAN/austin_modulus_arithmetic_replacement.c	/^static gboolean mutator_milu_modulus_arithmetic_replacement_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_modulus_arithmetic_replacement_mutate	mutators/selective_c/OAAN/modulus_arithmetic_replacement.c	/^static gboolean mutator_milu_modulus_arithmetic_replacement_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_modulus_arithmetic_replacement_node_checking	mutators/austin/OAAN/austin_modulus_arithmetic_replacement.c	/^static gboolean mutator_milu_modulus_arithmetic_replacement_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_modulus_arithmetic_replacement_node_checking	mutators/selective_c/OAAN/modulus_arithmetic_replacement.c	/^static gboolean mutator_milu_modulus_arithmetic_replacement_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_multiply_arithmetic_assignment_replacement	mutators/selective_c/OAAA/multiply_arithmetic_assignment_replacement.c	/^Mutator * mutator_milu_multiply_arithmetic_assignment_replacement()$/;"	f
mutator_milu_multiply_arithmetic_assignment_replacement_clean	mutators/selective_c/OAAA/multiply_arithmetic_assignment_replacement.c	/^static gboolean mutator_milu_multiply_arithmetic_assignment_replacement_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_multiply_arithmetic_assignment_replacement_mutate	mutators/selective_c/OAAA/multiply_arithmetic_assignment_replacement.c	/^static gboolean mutator_milu_multiply_arithmetic_assignment_replacement_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_multiply_arithmetic_assignment_replacement_node_checking	mutators/selective_c/OAAA/multiply_arithmetic_assignment_replacement.c	/^static gboolean mutator_milu_multiply_arithmetic_assignment_replacement_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_multiply_arithmetic_replacement	mutators/selective_c/OAAN/multiply_arithmetic_replacement.c	/^Mutator * mutator_milu_multiply_arithmetic_replacement()$/;"	f
mutator_milu_multiply_arithmetic_replacement_clean	mutators/austin/OAAN/austin_multiply_arithmetic_replacement.c	/^static gboolean mutator_milu_multiply_arithmetic_replacement_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_multiply_arithmetic_replacement_clean	mutators/selective_c/OAAN/multiply_arithmetic_replacement.c	/^static gboolean mutator_milu_multiply_arithmetic_replacement_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_multiply_arithmetic_replacement_mutate	mutators/austin/OAAN/austin_multiply_arithmetic_replacement.c	/^static gboolean mutator_milu_multiply_arithmetic_replacement_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_multiply_arithmetic_replacement_mutate	mutators/selective_c/OAAN/multiply_arithmetic_replacement.c	/^static gboolean mutator_milu_multiply_arithmetic_replacement_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_multiply_arithmetic_replacement_node_checking	mutators/austin/OAAN/austin_multiply_arithmetic_replacement.c	/^static gboolean mutator_milu_multiply_arithmetic_replacement_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_multiply_arithmetic_replacement_node_checking	mutators/selective_c/OAAN/multiply_arithmetic_replacement.c	/^static gboolean mutator_milu_multiply_arithmetic_replacement_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_not_equal_relational_replacement	mutators/selective_c/ORRN/not_equal_relational_replacement.c	/^Mutator * mutator_milu_not_equal_relational_replacement()$/;"	f
mutator_milu_not_equal_relational_replacement_clean	mutators/austin/ORRN/austin_not_equal_relational_replacement.c	/^static gboolean mutator_milu_not_equal_relational_replacement_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_not_equal_relational_replacement_clean	mutators/selective_c/ORRN/not_equal_relational_replacement.c	/^static gboolean mutator_milu_not_equal_relational_replacement_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_not_equal_relational_replacement_mutate	mutators/austin/ORRN/austin_not_equal_relational_replacement.c	/^static gboolean mutator_milu_not_equal_relational_replacement_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_not_equal_relational_replacement_mutate	mutators/selective_c/ORRN/not_equal_relational_replacement.c	/^static gboolean mutator_milu_not_equal_relational_replacement_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_not_equal_relational_replacement_node_checking	mutators/austin/ORRN/austin_not_equal_relational_replacement.c	/^static gboolean mutator_milu_not_equal_relational_replacement_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_not_equal_relational_replacement_node_checking	mutators/selective_c/ORRN/not_equal_relational_replacement.c	/^static gboolean mutator_milu_not_equal_relational_replacement_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_or_logical_negation	mutators/selective_c/OLNG/or_logical_negation.c	/^Mutator * mutator_milu_or_logical_negation()$/;"	f
mutator_milu_or_logical_negation_clean	mutators/austin/OLNG/austin_or_logical_negation.c	/^static gboolean mutator_milu_or_logical_negation_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_or_logical_negation_clean	mutators/selective_c/OLNG/or_logical_negation.c	/^static gboolean mutator_milu_or_logical_negation_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_or_logical_negation_mutate	mutators/austin/OLNG/austin_or_logical_negation.c	/^static gboolean mutator_milu_or_logical_negation_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_or_logical_negation_mutate	mutators/selective_c/OLNG/or_logical_negation.c	/^static gboolean mutator_milu_or_logical_negation_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_or_logical_negation_node_checking	mutators/austin/OLNG/austin_or_logical_negation.c	/^static gboolean mutator_milu_or_logical_negation_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_or_logical_negation_node_checking	mutators/selective_c/OLNG/or_logical_negation.c	/^static gboolean mutator_milu_or_logical_negation_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_or_logical_replacement	mutators/selective_c/OLLN/or_logical_replacement.c	/^Mutator * mutator_milu_or_logical_replacement()$/;"	f
mutator_milu_or_logical_replacement_clean	mutators/austin/OLLN/austin_or_logical_replacement.c	/^static gboolean mutator_milu_or_logical_replacement_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_or_logical_replacement_clean	mutators/selective_c/OLLN/or_logical_replacement.c	/^static gboolean mutator_milu_or_logical_replacement_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_or_logical_replacement_mutate	mutators/austin/OLLN/austin_or_logical_replacement.c	/^static gboolean mutator_milu_or_logical_replacement_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_or_logical_replacement_mutate	mutators/selective_c/OLLN/or_logical_replacement.c	/^static gboolean mutator_milu_or_logical_replacement_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_or_logical_replacement_node_checking	mutators/austin/OLLN/austin_or_logical_replacement.c	/^static gboolean mutator_milu_or_logical_replacement_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_or_logical_replacement_node_checking	mutators/selective_c/OLLN/or_logical_replacement.c	/^static gboolean mutator_milu_or_logical_replacement_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_postfix_decrement_replacement	mutators/selective_c/OIDO/postfix_decrement_replacement.c	/^Mutator * mutator_milu_postfix_decrement_replacement()$/;"	f
mutator_milu_postfix_decrement_replacement_clean	mutators/selective_c/OIDO/postfix_decrement_replacement.c	/^static gboolean mutator_milu_postfix_decrement_replacement_clean(ASTNode * node,gint type)$/;"	f	file:
mutator_milu_postfix_decrement_replacement_mutate	mutators/selective_c/OIDO/postfix_decrement_replacement.c	/^static gboolean mutator_milu_postfix_decrement_replacement_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_postfix_decrement_replacement_node_checking	mutators/selective_c/OIDO/postfix_decrement_replacement.c	/^static gboolean mutator_milu_postfix_decrement_replacement_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_postfix_increment_replacement	mutators/selective_c/OIDO/postfix_increment_replacement.c	/^Mutator * mutator_milu_postfix_increment_replacement()$/;"	f
mutator_milu_postfix_increment_replacement_clean	mutators/selective_c/OIDO/postfix_increment_replacement.c	/^static gboolean mutator_milu_postfix_increment_replacement_clean(ASTNode * node,gint type)$/;"	f	file:
mutator_milu_postfix_increment_replacement_mutate	mutators/selective_c/OIDO/postfix_increment_replacement.c	/^static gboolean mutator_milu_postfix_increment_replacement_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_postfix_increment_replacement_node_checking	mutators/selective_c/OIDO/postfix_increment_replacement.c	/^static gboolean mutator_milu_postfix_increment_replacement_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_prefix_decrement_replacement	mutators/selective_c/OIDO/prefix_decrement_replacement.c	/^Mutator * mutator_milu_prefix_decrement_replacement()$/;"	f
mutator_milu_prefix_decrement_replacement_clean	mutators/selective_c/OIDO/prefix_decrement_replacement.c	/^static gboolean mutator_milu_prefix_decrement_replacement_clean(ASTNode * node,gint type)$/;"	f	file:
mutator_milu_prefix_decrement_replacement_mutate	mutators/selective_c/OIDO/prefix_decrement_replacement.c	/^static gboolean mutator_milu_prefix_decrement_replacement_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_prefix_decrement_replacement_node_checking	mutators/selective_c/OIDO/prefix_decrement_replacement.c	/^static gboolean mutator_milu_prefix_decrement_replacement_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_prefix_increment_replacement	mutators/selective_c/OIDO/prefix_increment_replacement.c	/^Mutator * mutator_milu_prefix_increment_replacement()$/;"	f
mutator_milu_prefix_increment_replacement_clean	mutators/selective_c/OIDO/prefix_increment_replacement.c	/^static gboolean mutator_milu_prefix_increment_replacement_clean(ASTNode * node,gint type)$/;"	f	file:
mutator_milu_prefix_increment_replacement_mutate	mutators/selective_c/OIDO/prefix_increment_replacement.c	/^static gboolean mutator_milu_prefix_increment_replacement_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_prefix_increment_replacement_node_checking	mutators/selective_c/OIDO/prefix_increment_replacement.c	/^static gboolean mutator_milu_prefix_increment_replacement_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_remove_free_statement	mutators/memory_c/RMFS/remove_free_statement.c	/^Mutator * mutator_milu_remove_free_statement()$/;"	f
mutator_milu_remove_free_statement_clean	mutators/memory_c/RMFS/remove_free_statement.c	/^static gboolean mutator_milu_remove_free_statement_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_remove_free_statement_mutate	mutators/memory_c/RMFS/remove_free_statement.c	/^static gboolean mutator_milu_remove_free_statement_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_remove_free_statement_node_checking	mutators/memory_c/RMFS/remove_free_statement.c	/^static gboolean mutator_milu_remove_free_statement_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_remove_null_assignment	mutators/memory_c/RMNA/remove_null_assignment.c	/^Mutator * mutator_milu_remove_null_assignment()$/;"	f
mutator_milu_remove_null_assignment_clean	mutators/memory_c/RMNA/remove_null_assignment.c	/^static gboolean mutator_milu_remove_null_assignment_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_remove_null_assignment_mutate	mutators/memory_c/RMNA/remove_null_assignment.c	/^static gboolean mutator_milu_remove_null_assignment_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_remove_null_assignment_node_checking	mutators/memory_c/RMNA/remove_null_assignment.c	/^static gboolean mutator_milu_remove_null_assignment_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_replace_calloc_size_with_zero	mutators/memory_c/REDAWZ/replace_calloc_size_with_zero.c	/^Mutator * mutator_milu_replace_calloc_size_with_zero()$/;"	f
mutator_milu_replace_calloc_size_with_zero_clean	mutators/memory_c/REDAWZ/replace_calloc_size_with_zero.c	/^static gboolean mutator_milu_replace_calloc_size_with_zero_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_replace_calloc_size_with_zero_mutate	mutators/memory_c/REDAWZ/replace_calloc_size_with_zero.c	/^static gboolean mutator_milu_replace_calloc_size_with_zero_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_replace_calloc_size_with_zero_node_checking	mutators/memory_c/REDAWZ/replace_calloc_size_with_zero.c	/^static gboolean mutator_milu_replace_calloc_size_with_zero_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_replace_calloc_with_alloca	mutators/memory_c/REC2A/replace_calloc_with_alloca.c	/^Mutator * mutator_milu_replace_calloc_with_alloca()$/;"	f
mutator_milu_replace_calloc_with_alloca_clean	mutators/memory_c/REC2A/replace_calloc_with_alloca.c	/^static gboolean mutator_milu_replace_calloc_with_alloca_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_replace_calloc_with_alloca_mutate	mutators/memory_c/REC2A/replace_calloc_with_alloca.c	/^static gboolean mutator_milu_replace_calloc_with_alloca_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_replace_calloc_with_alloca_node_checking	mutators/memory_c/REC2A/replace_calloc_with_alloca.c	/^static gboolean mutator_milu_replace_calloc_with_alloca_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_replace_calloc_with_malloc	mutators/memory_c/REC2M/replace_calloc_with_malloc.c	/^Mutator * mutator_milu_replace_calloc_with_malloc()$/;"	f
mutator_milu_replace_calloc_with_malloc_clean	mutators/memory_c/REC2M/replace_calloc_with_malloc.c	/^static gboolean mutator_milu_replace_calloc_with_malloc_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_replace_calloc_with_malloc_mutate	mutators/memory_c/REC2M/replace_calloc_with_malloc.c	/^static gboolean mutator_milu_replace_calloc_with_malloc_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_replace_calloc_with_malloc_node_checking	mutators/memory_c/REC2M/replace_calloc_with_malloc.c	/^static gboolean mutator_milu_replace_calloc_with_malloc_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_replace_calloc_with_null	mutators/memory_c/REDAWN/replace_calloc_with_null.c	/^Mutator * mutator_milu_replace_calloc_with_null()$/;"	f
mutator_milu_replace_calloc_with_null_clean	mutators/memory_c/REDAWN/replace_calloc_with_null.c	/^static gboolean mutator_milu_replace_calloc_with_null_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_replace_calloc_with_null_mutate	mutators/memory_c/REDAWN/replace_calloc_with_null.c	/^static gboolean mutator_milu_replace_calloc_with_null_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_replace_calloc_with_null_node_checking	mutators/memory_c/REDAWN/replace_calloc_with_null.c	/^static gboolean mutator_milu_replace_calloc_with_null_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_replace_cast_calloc_with_alloca	mutators/memory_c/REC2A/replace_cast_calloc_with_alloca.c	/^Mutator * mutator_milu_replace_cast_calloc_with_alloca()$/;"	f
mutator_milu_replace_cast_calloc_with_alloca_clean	mutators/memory_c/REC2A/replace_cast_calloc_with_alloca.c	/^static gboolean mutator_milu_replace_cast_calloc_with_alloca_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_replace_cast_calloc_with_alloca_mutate	mutators/memory_c/REC2A/replace_cast_calloc_with_alloca.c	/^static gboolean mutator_milu_replace_cast_calloc_with_alloca_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_replace_cast_calloc_with_alloca_node_checking	mutators/memory_c/REC2A/replace_cast_calloc_with_alloca.c	/^static gboolean mutator_milu_replace_cast_calloc_with_alloca_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_replace_cast_calloc_with_malloc	mutators/memory_c/REC2M/replace_cast_calloc_with_malloc.c	/^Mutator * mutator_milu_replace_cast_calloc_with_malloc()$/;"	f
mutator_milu_replace_cast_calloc_with_malloc_clean	mutators/memory_c/REC2M/replace_cast_calloc_with_malloc.c	/^static gboolean mutator_milu_replace_cast_calloc_with_malloc_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_replace_cast_calloc_with_malloc_mutate	mutators/memory_c/REC2M/replace_cast_calloc_with_malloc.c	/^static gboolean mutator_milu_replace_cast_calloc_with_malloc_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_replace_cast_calloc_with_malloc_node_checking	mutators/memory_c/REC2M/replace_cast_calloc_with_malloc.c	/^static gboolean mutator_milu_replace_cast_calloc_with_malloc_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_replace_cast_calloc_with_null	mutators/memory_c/REDAWN/replace_cast_calloc_with_null.c	/^Mutator * mutator_milu_replace_cast_calloc_with_null()$/;"	f
mutator_milu_replace_cast_calloc_with_null_clean	mutators/memory_c/REDAWN/replace_cast_calloc_with_null.c	/^static gboolean mutator_milu_replace_cast_calloc_with_null_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_replace_cast_calloc_with_null_mutate	mutators/memory_c/REDAWN/replace_cast_calloc_with_null.c	/^static gboolean mutator_milu_replace_cast_calloc_with_null_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_replace_cast_calloc_with_null_node_checking	mutators/memory_c/REDAWN/replace_cast_calloc_with_null.c	/^static gboolean mutator_milu_replace_cast_calloc_with_null_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_replace_cast_malloc_with_null	mutators/memory_c/REDAWN/replace_cast_malloc_with_null.c	/^Mutator * mutator_milu_replace_cast_malloc_with_null()$/;"	f
mutator_milu_replace_cast_malloc_with_null_clean	mutators/memory_c/REDAWN/replace_cast_malloc_with_null.c	/^static gboolean mutator_milu_replace_cast_malloc_with_null_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_replace_cast_malloc_with_null_mutate	mutators/memory_c/REDAWN/replace_cast_malloc_with_null.c	/^static gboolean mutator_milu_replace_cast_malloc_with_null_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_replace_cast_malloc_with_null_node_checking	mutators/memory_c/REDAWN/replace_cast_malloc_with_null.c	/^static gboolean mutator_milu_replace_cast_malloc_with_null_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_replace_malloc_size_with_zero	mutators/memory_c/REDAWZ/replace_malloc_size_with_zero.c	/^Mutator * mutator_milu_replace_malloc_size_with_zero()$/;"	f
mutator_milu_replace_malloc_size_with_zero_clean	mutators/memory_c/REDAWZ/replace_malloc_size_with_zero.c	/^static gboolean mutator_milu_replace_malloc_size_with_zero_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_replace_malloc_size_with_zero_mutate	mutators/memory_c/REDAWZ/replace_malloc_size_with_zero.c	/^static gboolean mutator_milu_replace_malloc_size_with_zero_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_replace_malloc_size_with_zero_node_checking	mutators/memory_c/REDAWZ/replace_malloc_size_with_zero.c	/^static gboolean mutator_milu_replace_malloc_size_with_zero_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_replace_malloc_with_alloca	mutators/memory_c/REM2A/replace_malloc_with_alloca.c	/^Mutator * mutator_milu_replace_malloc_with_alloca()$/;"	f
mutator_milu_replace_malloc_with_alloca_clean	mutators/memory_c/REM2A/replace_malloc_with_alloca.c	/^static gboolean mutator_milu_replace_malloc_with_alloca_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_replace_malloc_with_alloca_mutate	mutators/memory_c/REM2A/replace_malloc_with_alloca.c	/^static gboolean mutator_milu_replace_malloc_with_alloca_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_replace_malloc_with_alloca_node_checking	mutators/memory_c/REM2A/replace_malloc_with_alloca.c	/^static gboolean mutator_milu_replace_malloc_with_alloca_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_replace_malloc_with_null	mutators/memory_c/REDAWN/replace_malloc_with_null.c	/^Mutator * mutator_milu_replace_malloc_with_null()$/;"	f
mutator_milu_replace_malloc_with_null_clean	mutators/memory_c/REDAWN/replace_malloc_with_null.c	/^static gboolean mutator_milu_replace_malloc_with_null_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_replace_malloc_with_null_mutate	mutators/memory_c/REDAWN/replace_malloc_with_null.c	/^static gboolean mutator_milu_replace_malloc_with_null_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_replace_malloc_with_null_node_checking	mutators/memory_c/REDAWN/replace_malloc_with_null.c	/^static gboolean mutator_milu_replace_malloc_with_null_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_replace_sizeof_argument_with_nonpointer_equivalent	mutators/memory_c/REMSOTP/replace_sizeof_argument_with_nonpointer_equivalent.c	/^Mutator * mutator_milu_replace_sizeof_argument_with_nonpointer_equivalent()$/;"	f
mutator_milu_replace_sizeof_argument_with_nonpointer_equivalent_clean	mutators/memory_c/REMSOTP/replace_sizeof_argument_with_nonpointer_equivalent.c	/^static gboolean mutator_milu_replace_sizeof_argument_with_nonpointer_equivalent_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_replace_sizeof_argument_with_nonpointer_equivalent_mutate	mutators/memory_c/REMSOTP/replace_sizeof_argument_with_nonpointer_equivalent.c	/^static gboolean mutator_milu_replace_sizeof_argument_with_nonpointer_equivalent_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_replace_sizeof_argument_with_nonpointer_equivalent_node_checking	mutators/memory_c/REMSOTP/replace_sizeof_argument_with_nonpointer_equivalent.c	/^static gboolean mutator_milu_replace_sizeof_argument_with_nonpointer_equivalent_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_replace_sizeof_argument_with_pointer_equivalent	mutators/memory_c/RESOTPE/replace_sizeof_argument_with_pointer_equivalent.c	/^Mutator * mutator_milu_replace_sizeof_argument_with_pointer_equivalent()$/;"	f
mutator_milu_replace_sizeof_argument_with_pointer_equivalent_clean	mutators/memory_c/RESOTPE/replace_sizeof_argument_with_pointer_equivalent.c	/^static gboolean mutator_milu_replace_sizeof_argument_with_pointer_equivalent_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_replace_sizeof_argument_with_pointer_equivalent_mutate	mutators/memory_c/RESOTPE/replace_sizeof_argument_with_pointer_equivalent.c	/^static gboolean mutator_milu_replace_sizeof_argument_with_pointer_equivalent_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_replace_sizeof_argument_with_pointer_equivalent_node_checking	mutators/memory_c/RESOTPE/replace_sizeof_argument_with_pointer_equivalent.c	/^static gboolean mutator_milu_replace_sizeof_argument_with_pointer_equivalent_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_statement_deletion	mutators/other_c/SSDL/statement_deletion.c	/^Mutator * mutator_milu_statement_deletion()$/;"	f
mutator_milu_statement_deletion_clean	mutators/other_c/SSDL/statement_deletion.c	/^static gboolean mutator_milu_statement_deletion_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_statement_deletion_mutate	mutators/other_c/SSDL/statement_deletion.c	/^static gboolean mutator_milu_statement_deletion_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_statement_node_checking	mutators/other_c/SSDL/statement_deletion.c	/^static gboolean mutator_milu_statement_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_subtract_arithmetic_assignment_replacement	mutators/selective_c/OAAA/subtract_arithmetic_assignment_replacement.c	/^Mutator * mutator_milu_subtract_arithmetic_assignment_replacement()$/;"	f
mutator_milu_subtract_arithmetic_assignment_replacement_clean	mutators/selective_c/OAAA/subtract_arithmetic_assignment_replacement.c	/^static gboolean mutator_milu_subtract_arithmetic_assignment_replacement_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_subtract_arithmetic_assignment_replacement_mutate	mutators/selective_c/OAAA/subtract_arithmetic_assignment_replacement.c	/^static gboolean mutator_milu_subtract_arithmetic_assignment_replacement_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_subtract_arithmetic_assignment_replacement_node_checking	mutators/selective_c/OAAA/subtract_arithmetic_assignment_replacement.c	/^static gboolean mutator_milu_subtract_arithmetic_assignment_replacement_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_subtract_arithmetic_replacement	mutators/selective_c/OAAN/subtract_arithmetic_replacement.c	/^Mutator * mutator_milu_subtract_arithmetic_replacement()$/;"	f
mutator_milu_subtract_arithmetic_replacement_clean	mutators/austin/OAAN/austin_subtract_arithmetic_replacement.c	/^static gboolean mutator_milu_subtract_arithmetic_replacement_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_subtract_arithmetic_replacement_clean	mutators/selective_c/OAAN/subtract_arithmetic_replacement.c	/^static gboolean mutator_milu_subtract_arithmetic_replacement_clean(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_subtract_arithmetic_replacement_mutate	mutators/austin/OAAN/austin_subtract_arithmetic_replacement.c	/^static gboolean mutator_milu_subtract_arithmetic_replacement_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_subtract_arithmetic_replacement_mutate	mutators/selective_c/OAAN/subtract_arithmetic_replacement.c	/^static gboolean mutator_milu_subtract_arithmetic_replacement_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_subtract_arithmetic_replacement_node_checking	mutators/austin/OAAN/austin_subtract_arithmetic_replacement.c	/^static gboolean mutator_milu_subtract_arithmetic_replacement_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_subtract_arithmetic_replacement_node_checking	mutators/selective_c/OAAN/subtract_arithmetic_replacement.c	/^static gboolean mutator_milu_subtract_arithmetic_replacement_node_checking(ASTNode * node)$/;"	f	file:
mutator_milu_while_expression_negation	mutators/selective_c/OCNG/while_expression_negation_replacement.c	/^Mutator * mutator_milu_while_expression_negation()$/;"	f
mutator_milu_while_expression_negation_clean	mutators/selective_c/OCNG/while_expression_negation_replacement.c	/^static gboolean mutator_milu_while_expression_negation_clean(ASTNode * node,gint type)$/;"	f	file:
mutator_milu_while_expression_negation_mutate	mutators/selective_c/OCNG/while_expression_negation_replacement.c	/^static gboolean mutator_milu_while_expression_negation_mutate(ASTNode * node, gint type)$/;"	f	file:
mutator_milu_while_expression_negation_node_checking	mutators/selective_c/OCNG/while_expression_negation_replacement.c	/^static gboolean mutator_milu_while_expression_negation_node_checking(ASTNode * node)$/;"	f	file:
mutator_new	mutation/Mutator.c	/^Mutator * mutator_new(const gchar * name, const gchar * info)$/;"	f
mutator_print	mutation/Mutator.c	/^void mutator_print(Mutator * mut, FILE * output)$/;"	f
mutator_reaching_node_only_generator_for_austin_milu	mutation/Mutator.c	/^ASTNode * mutator_reaching_node_only_generator_for_austin_milu(ASTNode * node, gchar * mut_text)$/;"	f
mutators	include/MutationOperator.h	/^	GPtrArray * mutators; \/**< The set of mutators including. *\/$/;"	m	struct:MiluMutationOperator
mutators_print	mutation/Mutator.c	/^void mutators_print(GPtrArray * muts, FILE * output)$/;"	f
name	include/MutationOperator.h	/^	gchar * name; \/**< The name of the mutation operator. *\/$/;"	m	struct:MiluMutationOperator
name	include/Mutator.h	/^	gchar * name;                     \/**<  The name of the mutator. *\/$/;"	m	struct:MiluMutator
name	include/clang-c/Index.h	/^  const char *name;$/;"	m	struct:__anon19
next_sibling	include/ASTNode.h	/^	ASTNode * next_sibling;       \/**< The next node of the node. *\/$/;"	m	struct:ASTNode
node	include/ASTNode.h	/^	struct ASTNode * node;$/;"	m	struct:ASTNodeType	typeref:struct:ASTNodeType::ASTNode
node_checking	include/Mutator.h	/^	MutatorNodeChecking node_checking; \/**<  The method to check whether mutate the node.*\/$/;"	m	struct:MiluMutator
numAttributes	include/clang-c/Index.h	/^  unsigned numAttributes;$/;"	m	struct:__anon19
numAttributes	include/clang-c/Index.h	/^  unsigned numAttributes;$/;"	m	struct:__anon22
numBases	include/clang-c/Index.h	/^  unsigned numBases;$/;"	m	struct:__anon31
numEntries	include/clang-c/Index.h	/^  unsigned numEntries;$/;"	m	struct:CXTUResourceUsage
numProtocols	include/clang-c/Index.h	/^  unsigned numProtocols;$/;"	m	struct:__anon27
objcClass	include/clang-c/Index.h	/^  const CXIdxEntityInfo *objcClass;$/;"	m	struct:__anon21
objcClass	include/clang-c/Index.h	/^  const CXIdxEntityInfo *objcClass;$/;"	m	struct:__anon29
ori_kind	include/ASTNode.h	/^	NodeKind ori_kind;             \/**< The original kind of the node, used for soem kind of mutation operator. *\/$/;"	m	struct:ASTNode
ori_text	include/ASTNode.h	/^	gchar * ori_text;             \/**< The original text of the node, used for soem kind of mutation operator. *\/$/;"	m	struct:ASTNode
original_program	include/Project.h	/^    Mutant * original_program; \/**< The mutant object representing the original program. *\/$/;"	m	struct:MiluProject
output_path	include/Mutant.h	/^	gchar * output_path;   \/**< The output path. *\/$/;"	m	struct:MiluMutant
output_path	include/Project.h	/^	gchar * output_path; \/**< The output path for milu.*\/$/;"	m	struct:MiluProject
parent	include/ASTNode.h	/^	ASTNode * parent;             \/**< The parent node of the node. *\/$/;"	m	struct:ASTNode
parent	include/clang-c/Index.h	/^     (^CXCursorVisitorBlock)(CXCursor cursor, CXCursor parent);$/;"	v
parentEntity	include/clang-c/Index.h	/^  const CXIdxEntityInfo *parentEntity;$/;"	m	struct:__anon33
parse_tree_fix_header	mutation/ASTUnit.c	/^static void parse_tree_fix_header(gchar * src_path, ASTNode * root)$/;"	f	file:
parse_tree_node_clean	mutation/ASTNode.c	/^void parse_tree_node_clean(ASTNode * node)$/;"	f
parse_tree_node_transform	mutation/ASTNode.c	/^void parse_tree_node_transform(ASTNode * node)$/;"	f
parse_tree_node_traverse_pre_order	mutation/ASTNode.c	/^gboolean parse_tree_node_traverse_pre_order (ASTNode * node, ASTNodeTraverseFunc func, gpointer data)$/;"	f
parsing_in_func	mutation/ASTUnit.c	/^static gboolean parsing_in_func =FALSE;$/;"	v	file:
ppIncludedFile	include/clang-c/Index.h	/^  CXIdxClientFile (*ppIncludedFile)(CXClientData client_data,$/;"	m	struct:__anon34
prev_binary_column	mutation/ASTUnit.c	/^static unsigned prev_binary_column=100;$/;"	v	file:
prev_binary_line	mutation/ASTUnit.c	/^static unsigned prev_binary_line = 100;$/;"	v	file:
prev_binary_offset	mutation/ASTUnit.c	/^static unsigned prev_binary_offset=100;$/;"	v	file:
prev_sibling	include/ASTNode.h	/^	ASTNode * prev_sibling;       \/**< The previous node of the node. *\/$/;"	m	struct:ASTNode
print_dot_connection	mutation/ASTPrinter.c	/^static gboolean print_dot_connection(ASTNode * node,gpointer data)$/;"	f	file:
print_dot_label	mutation/ASTPrinter.c	/^static gboolean print_dot_label(ASTNode * node,gpointer data)$/;"	f	file:
print_source_array_subscript_expr	mutation/ASTPrinter.c	/^static void	print_source_array_subscript_expr(ASTNode * parent, GString * buffer)$/;"	f	file:
print_source_binary_operator	mutation/ASTPrinter.c	/^static void	print_source_binary_operator(ASTNode * parent, GString * buffer, gboolean is_stmt)$/;"	f	file:
print_source_call_expr	mutation/ASTPrinter.c	/^static void print_source_call_expr (ASTNode * parent, GString * buffer)$/;"	f	file:
print_source_case_stmt	mutation/ASTPrinter.c	/^static void	print_source_case_stmt(ASTNode * parent, GString * buffer)$/;"	f	file:
print_source_char_literal	mutation/ASTPrinter.c	/^static void	print_source_char_literal(ASTNode * parent, GString * buffer)$/;"	f	file:
print_source_compound_stmt	mutation/ASTPrinter.c	/^static void	print_source_compound_stmt(ASTNode * parent, GString * buffer)$/;"	f	file:
print_source_conditional_operator	mutation/ASTPrinter.c	/^static void	print_source_conditional_operator(ASTNode * parent, GString * buffer, gboolean is_stmt)$/;"	f	file:
print_source_cstyle_cast_expr	mutation/ASTPrinter.c	/^static void print_source_cstyle_cast_expr(ASTNode * parent, GString * buffer, gboolean is_stmt)$/;"	f	file:
print_source_decl_ref_expr	mutation/ASTPrinter.c	/^static void	print_source_decl_ref_expr(ASTNode * node, GString * buffer)$/;"	f	file:
print_source_decl_stmt	mutation/ASTPrinter.c	/^static void	print_source_decl_stmt(ASTNode * parent, GString * buffer)$/;"	f	file:
print_source_default_stmt	mutation/ASTPrinter.c	/^static void	print_source_default_stmt(ASTNode * parent, GString * buffer)$/;"	f	file:
print_source_do_stmt	mutation/ASTPrinter.c	/^static void	print_source_do_stmt(ASTNode * parent, GString * buffer)$/;"	f	file:
print_source_expr	mutation/ASTPrinter.c	/^static void	print_source_expr(ASTNode * node, GString * buffer, gboolean is_stmt)$/;"	f	file:
print_source_float_literal	mutation/ASTPrinter.c	/^static void	print_source_float_literal(ASTNode * parent, GString * buffer)$/;"	f	file:
print_source_for_stmt	mutation/ASTPrinter.c	/^static void	print_source_for_stmt(ASTNode * parent, GString * buffer)$/;"	f	file:
print_source_function_decl	mutation/ASTPrinter.c	/^static void print_source_function_decl(ASTNode * parent, GString * buffer)$/;"	f	file:
print_source_goto_stmt	mutation/ASTPrinter.c	/^static void	print_source_goto_stmt(ASTNode * parent, GString * buffer)$/;"	f	file:
print_source_if_stmt	mutation/ASTPrinter.c	/^static void	print_source_if_stmt(ASTNode * parent, GString * buffer)$/;"	f	file:
print_source_init_list_expr	mutation/ASTPrinter.c	/^static void print_source_init_list_expr(ASTNode * node, GString * buffer)$/;"	f	file:
print_source_integer_literal	mutation/ASTPrinter.c	/^static void	print_source_integer_literal(ASTNode * parent, GString * buffer)$/;"	f	file:
print_source_label_stmt	mutation/ASTPrinter.c	/^static void	print_source_label_stmt(ASTNode * parent, GString * buffer)$/;"	f	file:
print_source_member_ref_expr	mutation/ASTPrinter.c	/^static void print_source_member_ref_expr(ASTNode * parent, GString * buffer)$/;"	f	file:
print_source_paren_stmt	mutation/ASTPrinter.c	/^static void	print_source_paren_stmt(ASTNode * parent, GString * buffer)$/;"	f	file:
print_source_parm_decl	mutation/ASTPrinter.c	/^static void print_source_parm_decl(ASTNode * parent, GString * buffer)$/;"	f	file:
print_source_return_stmt	mutation/ASTPrinter.c	/^static void	print_source_return_stmt(ASTNode * parent, GString * buffer)$/;"	f	file:
print_source_stmt	mutation/ASTPrinter.c	/^static void	print_source_stmt(ASTNode * node, GString * buffer)$/;"	f	file:
print_source_string_literal	mutation/ASTPrinter.c	/^static void print_source_string_literal(ASTNode * node, GString * buffer)$/;"	f	file:
print_source_switch_stmt	mutation/ASTPrinter.c	/^static void	print_source_switch_stmt(ASTNode * parent, GString * buffer)$/;"	f	file:
print_source_type_ref	mutation/ASTPrinter.c	/^static void print_source_type_ref(ASTNode * node, GString * buffer)$/;"	f	file:
print_source_typedef_decl	mutation/ASTPrinter.c	/^static void print_source_typedef_decl(ASTNode * parent, GString * buffer)$/;"	f	file:
print_source_unary_operator	mutation/ASTPrinter.c	/^static void	print_source_unary_operator(ASTNode * parent, GString * buffer, gboolean is_stmt)$/;"	f	file:
print_source_unary_operator_append	mutation/ASTPrinter.c	/^static void	print_source_unary_operator_append(ASTNode * parent, GString * buffer, gboolean is_stmt)$/;"	f	file:
print_source_unexposed_expr	mutation/ASTPrinter.c	/^static void	print_source_unexposed_expr(ASTNode * parent, GString * buffer)$/;"	f	file:
print_source_union_decl	mutation/ASTPrinter.c	/^static void print_source_union_decl(ASTNode * parent, GString * buffer)$/;"	f	file:
print_source_var_decl	mutation/ASTPrinter.c	/^static void	print_source_var_decl(ASTNode * parent, GString * buffer, gboolean notype)$/;"	f	file:
print_source_while_stmt	mutation/ASTPrinter.c	/^static void	print_source_while_stmt(ASTNode * parent, GString * buffer)$/;"	f	file:
private_flags	include/clang-c/Index.h	/^  unsigned private_flags;$/;"	m	struct:__anon1
process_unit_testing_driver	mutation/TestInput.c	/^GPtrArray * process_unit_testing_driver(const gchar * unit_tests_path)$/;"	f
protocol	include/clang-c/Index.h	/^  const CXIdxEntityInfo *protocol;$/;"	m	struct:__anon26
protocols	include/clang-c/Index.h	/^  const CXIdxObjCProtocolRefInfo *const *protocols;$/;"	m	struct:__anon27
protocols	include/clang-c/Index.h	/^  const CXIdxObjCProtocolRefListInfo *protocols;$/;"	m	struct:__anon28
protocols	include/clang-c/Index.h	/^  const CXIdxObjCProtocolRefListInfo *protocols;$/;"	m	struct:__anon29
ptr_data	include/clang-c/Index.h	/^  void *ptr_data;$/;"	m	struct:__anon7
ptr_data	include/clang-c/Index.h	/^  void *ptr_data[2];$/;"	m	struct:__anon11
ptr_data	include/clang-c/Index.h	/^  void *ptr_data[2];$/;"	m	struct:__anon3
ptr_data	include/clang-c/Index.h	/^  void *ptr_data[2];$/;"	m	struct:__anon4
referencedEntity	include/clang-c/Index.h	/^  const CXIdxEntityInfo *referencedEntity;$/;"	m	struct:__anon33
remove_function_signiture	mutation/ASTUnit.c	/^static void remove_function_signiture(ASTNode * root)$/;"	f	file:
replace_subtree_with	mutation/ASTNodeUtil.c	/^gboolean replace_subtree_with(ASTNode * ori, ASTNode * replace)$/;"	f
reset_function_text	mutation/ASTUnit.c	/^static gboolean reset_function_text(ASTNode * func)$/;"	f	file:
resolve_function_attribute	mutation/ASTUnit.c	/^static gchar * resolve_function_attribute()$/;"	f	file:
resolve_pointer	mutation/ASTUnit.c	/^static gchar * resolve_pointer(CXType type)$/;"	f	file:
results	include/Mutant.h	/^        GArray * results;   \/**< The results. *\/$/;"	m	struct:MiluMutant
search_curr_source_file	mutation/ASTUnit.c	/^static gboolean search_curr_source_file(gchar * text)$/;"	f	file:
search_foms_with_mid	mutation/Mutant.c	/^static Mutant * search_foms_with_mid(MutationId * mid, GPtrArray * foms)$/;"	f	file:
semanticContainer	include/clang-c/Index.h	/^  const CXIdxContainerInfo *semanticContainer;$/;"	m	struct:__anon22
set_ASTNode_kind	mutation/ASTNodeUtil.c	/^void set_ASTNode_kind(ASTNode * node, NodeKind kind)$/;"	f
set_ASTNode_text	mutation/ASTNodeUtil.c	/^void set_ASTNode_text(ASTNode * node, const gchar * text)$/;"	f
setter	include/clang-c/Index.h	/^  const CXIdxEntityInfo *setter;$/;"	m	struct:__anon30
size	include/Mutator.h	/^	gint size;                        \/**<  The number of type of mutation*\/$/;"	m	struct:MiluMutator
sort_mid	mutation/MutationId.c	/^static void sort_mid(MutationId * mid) \/\/ an optimised buble sort for mutation id$/;"	f	file:
source_path	include/Project.h	/^	gchar * source_path; \/**< The source file path under test. *\/$/;"	m	struct:MiluProject
src_path	include/Mutant.h	/^	gchar * src_path;  \/**< The source path. *\/$/;"	m	struct:MiluMutant
startedTranslationUnit	include/clang-c/Index.h	/^  CXIdxClientContainer (*startedTranslationUnit)(CXClientData client_data,$/;"	m	struct:__anon34
std_outputs	mutation/Milu3.c	/^GHashTable* std_outputs;$/;"	v
superInfo	include/clang-c/Index.h	/^  const CXIdxBaseClassInfo *superInfo;$/;"	m	struct:__anon28
templateKind	include/clang-c/Index.h	/^  CXIdxEntityCXXTemplateKind templateKind;$/;"	m	struct:__anon19
test_driver_path	include/Project.h	/^    gchar * test_driver_path; \/**< The path for test driver file. *\/$/;"	m	struct:MiluProject
test_inputs	include/Project.h	/^    GPtrArray * test_inputs; \/**< The set of test inputs. *\/$/;"	m	struct:MiluProject
test_inputs_free	mutation/TestInput.c	/^void test_inputs_free(GPtrArray * test_inputs)$/;"	f
test_inputs_load	mutation/TestInput.c	/^GPtrArray * test_inputs_load(const gchar * tests_path)$/;"	f
tests_path	include/Project.h	/^    gchar * tests_path; \/**< The path for input tests. *\/$/;"	m	struct:MiluProject
text	include/ASTNode.h	/^	gchar * text;                 \/**< The text of the node. *\/$/;"	m	struct:ASTNode
text	include/ASTNode.h	/^    gchar * text;$/;"	m	struct:ASTNodeType
tmpIndex	mutators/memory_c/REC2A/replace_calloc_with_alloca.c	/^static gint tmpIndex;$/;"	v	file:
tmpIndex	mutators/memory_c/REC2A/replace_cast_calloc_with_alloca.c	/^static gint tmpIndex;$/;"	v	file:
tmpIndex	mutators/memory_c/REDAWN/replace_calloc_with_null.c	/^static gint tmpIndex;$/;"	v	file:
tmpIndex	mutators/memory_c/REDAWN/replace_malloc_with_null.c	/^static gint tmpIndex;$/;"	v	file:
tmpNode	mutators/memory_c/REC2A/replace_calloc_with_alloca.c	/^static ASTNode * tmpNode;$/;"	v	file:
tmpNode	mutators/memory_c/REC2A/replace_cast_calloc_with_alloca.c	/^static ASTNode * tmpNode;$/;"	v	file:
tmpNode	mutators/memory_c/REC2M/replace_calloc_with_malloc.c	/^static ASTNode* tmpNode;$/;"	v	file:
tmpNode	mutators/memory_c/REC2M/replace_cast_calloc_with_malloc.c	/^static ASTNode* tmpNode;$/;"	v	file:
tmpNode	mutators/memory_c/REDAWN/replace_calloc_with_null.c	/^static ASTNode * tmpNode;$/;"	v	file:
tmpNode	mutators/memory_c/REDAWN/replace_cast_calloc_with_null.c	/^static ASTNode * tmpNode;$/;"	v	file:
tmpNode	mutators/memory_c/REDAWN/replace_cast_malloc_with_null.c	/^static ASTNode * tmpNode;$/;"	v	file:
tmpNode	mutators/memory_c/REDAWN/replace_malloc_with_null.c	/^static ASTNode * tmpNode;$/;"	v	file:
tmpNode	mutators/memory_c/REDAWZ/replace_calloc_size_with_zero.c	/^static ASTNode * tmpNode;$/;"	v	file:
tmpNode	mutators/memory_c/REDAWZ/replace_malloc_size_with_zero.c	/^static ASTNode * tmpNode;$/;"	v	file:
tmpNode	mutators/memory_c/RMFS/remove_free_statement.c	/^static ASTNode* tmpNode;$/;"	v	file:
tmp_mut_node	mutators/austin/CRCR/austin_integer_constant_replacement.c	/^static ASTNode * tmp_mut_node = NULL;$/;"	v	file:
tmp_mut_node	mutators/austin/OAAN/austin_add_arithmetic_replacement.c	/^static ASTNode * tmp_mut_node = NULL;$/;"	v	file:
tmp_mut_node	mutators/austin/OAAN/austin_divide_arithmetic_replacement.c	/^static ASTNode * tmp_mut_node = NULL;$/;"	v	file:
tmp_mut_node	mutators/austin/OAAN/austin_modulus_arithmetic_replacement.c	/^static ASTNode * tmp_mut_node = NULL;$/;"	v	file:
tmp_mut_node	mutators/austin/OAAN/austin_multiply_arithmetic_replacement.c	/^static ASTNode * tmp_mut_node = NULL;$/;"	v	file:
tmp_mut_node	mutators/austin/OAAN/austin_subtract_arithmetic_replacement.c	/^static ASTNode * tmp_mut_node = NULL;$/;"	v	file:
tmp_mut_node	mutators/austin/OLLN/austin_and_logical_replacement.c	/^static ASTNode * tmp_mut_node = NULL;$/;"	v	file:
tmp_mut_node	mutators/austin/OLLN/austin_or_logical_replacement.c	/^static ASTNode * tmp_mut_node = NULL;$/;"	v	file:
tmp_mut_node	mutators/austin/OLNG/austin_and_logical_negation.c	/^static ASTNode * tmp_mut_node = NULL;$/;"	v	file:
tmp_mut_node	mutators/austin/OLNG/austin_or_logical_negation.c	/^static ASTNode * tmp_mut_node = NULL;$/;"	v	file:
tmp_mut_node	mutators/austin/ORRN/austin_equal_relational_replacement.c	/^static ASTNode * tmp_mut_node = NULL;$/;"	v	file:
tmp_mut_node	mutators/austin/ORRN/austin_greater_equal_relational_replacement.c	/^static ASTNode * tmp_mut_node = NULL;$/;"	v	file:
tmp_mut_node	mutators/austin/ORRN/austin_greater_relationa_replacement.c	/^static ASTNode * tmp_mut_node = NULL;$/;"	v	file:
tmp_mut_node	mutators/austin/ORRN/austin_less_equal_relational_replacement.c	/^static ASTNode * tmp_mut_node = NULL;$/;"	v	file:
tmp_mut_node	mutators/austin/ORRN/austin_less_relational_replacement.c	/^static ASTNode * tmp_mut_node = NULL;$/;"	v	file:
tmp_mut_node	mutators/austin/ORRN/austin_not_equal_relational_replacement.c	/^static ASTNode * tmp_mut_node = NULL;$/;"	v	file:
type	include/ASTNode.h	/^	struct ASTNodeType * type;    \/**<  The type of the node. *\/$/;"	m	struct:ASTNode	typeref:struct:ASTNode::ASTNodeType
visit	include/clang-c/Index.h	/^  enum CXVisitorResult (*visit)(void *context, CXCursor, CXSourceRange);$/;"	m	struct:__anon10	typeref:enum:__anon10::visit
visit_ast	mutation/ASTUnit.c	/^enum CXChildVisitResult visit_ast(CXCursor cursor, CXCursor parent, CXClientData client_data)$/;"	f
xdata	include/clang-c/Index.h	/^  int xdata;$/;"	m	struct:__anon5
